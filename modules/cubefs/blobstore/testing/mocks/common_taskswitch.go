// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/common/taskswitch (interfaces: ISwitcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSwitcher is a mock of ISwitcher interface.
type MockSwitcher struct {
	ctrl     *gomock.Controller
	recorder *MockSwitcherMockRecorder
}

// MockSwitcherMockRecorder is the mock recorder for MockSwitcher.
type MockSwitcherMockRecorder struct {
	mock *MockSwitcher
}

// NewMockSwitcher creates a new mock instance.
func NewMockSwitcher(ctrl *gomock.Controller) *MockSwitcher {
	mock := &MockSwitcher{ctrl: ctrl}
	mock.recorder = &MockSwitcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwitcher) EXPECT() *MockSwitcherMockRecorder {
	return m.recorder
}

// Enabled mocks base method.
func (m *MockSwitcher) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockSwitcherMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockSwitcher)(nil).Enabled))
}

// WaitEnable mocks base method.
func (m *MockSwitcher) WaitEnable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitEnable")
}

// WaitEnable indicates an expected call of WaitEnable.
func (mr *MockSwitcherMockRecorder) WaitEnable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitEnable", reflect.TypeOf((*MockSwitcher)(nil).WaitEnable))
}
