// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/common/taskswitch (interfaces: ISwitcher,Accessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSwitcher is a mock of ISwitcher interface.
type MockSwitcher struct {
	ctrl     *gomock.Controller
	recorder *MockSwitcherMockRecorder
}

// MockSwitcherMockRecorder is the mock recorder for MockSwitcher.
type MockSwitcherMockRecorder struct {
	mock *MockSwitcher
}

// NewMockSwitcher creates a new mock instance.
func NewMockSwitcher(ctrl *gomock.Controller) *MockSwitcher {
	mock := &MockSwitcher{ctrl: ctrl}
	mock.recorder = &MockSwitcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwitcher) EXPECT() *MockSwitcherMockRecorder {
	return m.recorder
}

// Enabled mocks base method.
func (m *MockSwitcher) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockSwitcherMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockSwitcher)(nil).Enabled))
}

// WaitEnable mocks base method.
func (m *MockSwitcher) WaitEnable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitEnable")
}

// WaitEnable indicates an expected call of WaitEnable.
func (mr *MockSwitcherMockRecorder) WaitEnable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitEnable", reflect.TypeOf((*MockSwitcher)(nil).WaitEnable))
}

// MockAccessor is a mock of Accessor interface.
type MockAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAccessorMockRecorder
}

// MockAccessorMockRecorder is the mock recorder for MockAccessor.
type MockAccessorMockRecorder struct {
	mock *MockAccessor
}

// NewMockAccessor creates a new mock instance.
func NewMockAccessor(ctrl *gomock.Controller) *MockAccessor {
	mock := &MockAccessor{ctrl: ctrl}
	mock.recorder = &MockAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessor) EXPECT() *MockAccessorMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockAccessor) GetConfig(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockAccessorMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockAccessor)(nil).GetConfig), arg0, arg1)
}

// SetConfig mocks base method.
func (m *MockAccessor) SetConfig(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockAccessorMockRecorder) SetConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockAccessor)(nil).SetConfig), arg0, arg1, arg2)
}
