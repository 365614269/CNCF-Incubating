// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/clustermgr/base (interfaces: RaftApplier)

// Package base is a generated GoMock package.
package base

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRaftApplier is a mock of RaftApplier interface.
type MockRaftApplier struct {
	ctrl     *gomock.Controller
	recorder *MockRaftApplierMockRecorder
}

// MockRaftApplierMockRecorder is the mock recorder for MockRaftApplier.
type MockRaftApplierMockRecorder struct {
	mock *MockRaftApplier
}

// NewMockRaftApplier creates a new mock instance.
func NewMockRaftApplier(ctrl *gomock.Controller) *MockRaftApplier {
	mock := &MockRaftApplier{ctrl: ctrl}
	mock.recorder = &MockRaftApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftApplier) EXPECT() *MockRaftApplierMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockRaftApplier) Apply(arg0 context.Context, arg1 []int32, arg2 [][]byte, arg3 []ProposeContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockRaftApplierMockRecorder) Apply(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockRaftApplier)(nil).Apply), arg0, arg1, arg2, arg3)
}

// Flush mocks base method.
func (m *MockRaftApplier) Flush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockRaftApplierMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockRaftApplier)(nil).Flush), arg0)
}

// GetModuleName mocks base method.
func (m *MockRaftApplier) GetModuleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleName indicates an expected call of GetModuleName.
func (mr *MockRaftApplierMockRecorder) GetModuleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleName", reflect.TypeOf((*MockRaftApplier)(nil).GetModuleName))
}

// LoadData mocks base method.
func (m *MockRaftApplier) LoadData(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadData indicates an expected call of LoadData.
func (mr *MockRaftApplierMockRecorder) LoadData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockRaftApplier)(nil).LoadData), arg0)
}

// NotifyLeaderChange mocks base method.
func (m *MockRaftApplier) NotifyLeaderChange(arg0 context.Context, arg1 uint64, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyLeaderChange", arg0, arg1, arg2)
}

// NotifyLeaderChange indicates an expected call of NotifyLeaderChange.
func (mr *MockRaftApplierMockRecorder) NotifyLeaderChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyLeaderChange", reflect.TypeOf((*MockRaftApplier)(nil).NotifyLeaderChange), arg0, arg1, arg2)
}

// SetModuleName mocks base method.
func (m *MockRaftApplier) SetModuleName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModuleName", arg0)
}

// SetModuleName indicates an expected call of SetModuleName.
func (mr *MockRaftApplierMockRecorder) SetModuleName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModuleName", reflect.TypeOf((*MockRaftApplier)(nil).SetModuleName), arg0)
}
