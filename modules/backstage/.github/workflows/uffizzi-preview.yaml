name: Preview (deploy)

on:
  workflow_run:
    workflows:
      - 'Preview (build)'
    types:
      - completed

jobs:
  cache-manifests-file:
    name: Cache Manifests File
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      manifests-cache-key: ${{ env.MANIFESTS_FILE_HASH }}
      git-ref: ${{ env.GIT_REF }}
      pr-number: ${{ env.PR_NUMBER }}
      action: ${{ env.ACTION }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          egress-policy: audit

      - name: 'Download artifacts'
        # Fetch output (zip archive) from the workflow run that triggered this workflow.
        uses: actions/github-script@v6.4.1
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "preview-spec"
            })[0];
            if (matchArtifact === undefined) {
              throw TypeError('Build Artifact not found!');
            }
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/preview-spec.zip`, Buffer.from(download.data));

      - name: 'Unzip artifact'
        run: unzip preview-spec.zip

      - name: Read Event into ENV
        run: |
          echo 'EVENT_JSON<<EOF' >> $GITHUB_ENV
          cat event.json >> $GITHUB_ENV
          echo -e '\nEOF' >> $GITHUB_ENV

      - name: Hash Rendered Manifests File
        id: hash
        # If the previous workflow was triggered by a PR close event, we will not have a manifests file artifact.
        if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        run: |
          ls
          echo "MANIFESTS_FILE_HASH=$(md5sum manifests.rendered.yml | awk '{ print $1 }')" >> $GITHUB_ENV

      - name: Cache Manifests File
        if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        uses: actions/cache@v3.3.2
        with:
          path: manifests.rendered.yml
          key: ${{ env.MANIFESTS_FILE_HASH }}

      - name: Read PR Number From Event Object
        id: pr
        run: echo "PR_NUMBER=${{ fromJSON(env.EVENT_JSON).number }}" >> $GITHUB_ENV

      - name: Read Event Type from Event Object
        id: action
        run: echo "ACTION=${{ fromJSON(env.EVENT_JSON).action }}" >> $GITHUB_ENV

      - name: Read Git Ref From Event Object
        id: ref
        run: echo "GIT_REF=${{ fromJSON(env.EVENT_JSON).pull_request.head.sha }}" >> $GITHUB_ENV

      - name: DEBUG - Print Job Outputs
        if: ${{ runner.debug }}
        run: |
          echo "PR number: ${{ env.PR_NUMBER }}"
          echo "Git Ref: ${{ env.GIT_REF }}"
          echo "Manifests file hash: ${{ env.MANIFESTS_FILE_HASH }}"
          cat event.json

  deploy-uffizzi-preview:
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    name: Deploy to Uffizzi Virtual Cluster
    needs:
      - cache-manifests-file
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.cache-manifests-file.outputs.action != 'closed' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Identify comment to be updated
      - name: Find comment for Ephemeral Environment
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ needs.cache-manifests-file.outputs.pr-number }}
          comment-author: 'github-actions[bot]'
          body-includes: pr-${{ needs.cache-manifests-file.outputs.pr-number }}
          direction: last

      # Create/Update comment with action deployment status
      - name: Create or Update Comment with Deployment Notification
        id: notification
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ needs.cache-manifests-file.outputs.pr-number }}
          body: |
            ## Uffizzi Ephemeral Environment - Virtual Cluster

            :cloud: deploying ...

            :gear: Updating now by workflow run [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).

            Download the Uffizzi CLI to interact with the upcoming virtual cluster
            https://docs.uffizzi.com/install
          edit-mode: replace

      - name: Connect to Virtual Cluster
        uses: UffizziCloud/cluster-action@main
        with:
          cluster-name: pr-${{ needs.cache-manifests-file.outputs.pr-number }}
          server: https://app.uffizzi.com

      - name: Fetch cached Manifests File
        id: cache
        # if: ${{ contains(fromJSON('["create", "update"]'), env.UFFIZZI_ACTION) }}
        uses: actions/cache@v3
        with:
          path: manifests.rendered.yml
          key: ${{ needs.cache-manifests-file.outputs.manifests-cache-key }}

      - name: Kustomize and Apply Manifests
        id: prev
        run: |
          # Apply kustomized manifests to virtual cluster.
          export KUBECONFIG=`pwd`/kubeconfig
          kubectl apply -f manifests.rendered.yml --kubeconfig ./kubeconfig
          # Allow uffizzi to sync the resources
          sleep 10
          # Get the hostnames assigned by uffizzi
          export BACKSTAGE_HOST=$(kubectl get ingress backstage --kubeconfig kubeconfig -o json | jq '.spec.rules[0].host' | tr -d '"')
          export UFFIZZI_CLUSTER_APISERVER=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ")
          # Patch backstage deployment to use UFFIZZI_URL
          kubectl patch deployment backstage --kubeconfig kubeconfig  -p '{"spec": {"template": {"spec": {"containers": [{"name": "backstage", "args":["-c", "APP_CONFIG_app_baseUrl='https://${BACKSTAGE_HOST}' APP_CONFIG_backend_baseUrl='https://${BACKSTAGE_HOST}' APP_CONFIG_auth_environment='production' node packages/backend --config app-config.yaml"], "env": [{"name": "UFFIZZI_URL", "value": "'https://${BACKSTAGE_HOST}'"}, {"name": "UFFIZZI_CLUSTER_APISERVER", "value": "'${UFFIZZI_CLUSTER_APISERVER}'"}, {"name": "GITHUB_SHA", "value": "'${GITHUB_SHA}'"}, {"name": "REF_NAME", "value": "'${{ needs.cache-manifests-file.outputs.git-ref }}'"}]}]}}}}'
          if [[ ${RUNNER_DEBUG} == 1 ]]; then
            kubectl get all --kubeconfig ./kubeconfig
          fi
          echo "backstage_url=${BACKSTAGE_HOST}" >> $GITHUB_OUTPUT
          echo "Access the \`backstage\` endpoint at [\`${BACKSTAGE_HOST}\`](http://${BACKSTAGE_HOST})" >> $GITHUB_STEP_SUMMARY

      - name: Create or Update Comment with Deployment URL
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.notification.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Uffizzi Ephemeral Environment - Virtual Cluster

            Your cluster `pr-${{ needs.cache-manifests-file.outputs.pr-number }}` was successfully created. Learn more about [Uffizzi virtual clusters](https://docs.uffizzi.com/topics/virtual-clusters)
            To connect to this cluster, follow these steps:

            1. Download and install the Uffizzi CLI from https://docs.uffizzi.com/install
            2. Login to Uffizzi, then select the `backstage` account and project:
            ```
            uffizzi login
            ```

            ```
            Select an account: 
              ‣ ${{ github.event.repository.name }}
                jdoe

            Select a project or create a new project: 
              ‣ ${{ github.event.repository.name }}-6783521
            ```
            3. Update your kubeconfig: `uffizzi cluster update-kubeconfig pr-${{ needs.cache-manifests-file.outputs.pr-number }} --kubeconfig=[PATH_TO_KUBECONFIG]`
            After updating your kubeconfig, you can manage your cluster with `kubectl`, `kustomize`, `helm`, and other tools that use kubeconfig files: `kubectl get namespace --kubeconfig [PATH_TO_KUBECONFIG]`


            Access the `backstage` endpoint at [`https://${{ steps.prev.outputs.backstage_url }}`](https://${{ steps.prev.outputs.backstage_url }})

          edit-mode: replace

  delete-uffizzi-preview:
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    name: Delete the Uffizzi Virtual Cluster
    needs:
      - cache-manifests-file
    if: ${{ needs.cache-manifests-file.outputs.action == 'closed' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Delete Virtual Cluster
        uses: UffizziCloud/cluster-action@main
        with:
          cluster-name: pr-${{ needs.cache-manifests-file.outputs.pr-number }}
          server: https://app.uffizzi.com
          action: delete

      # Identify comment to be updated
      - name: Find comment for Ephemeral Environment
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ needs.cache-manifests-file.outputs.pr-number }}
          comment-author: 'github-actions[bot]'
          body-includes: pr-${{ needs.cache-manifests-file.outputs.pr-number }}
          direction: last

      - name: Update Comment with Deletion
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ needs.cache-manifests-file.outputs.pr-number }}
          body: |
            Uffizzi Cluster `pr-${{ needs.cache-manifests-file.outputs.pr-number }}` was deleted.
          edit-mode: replace
