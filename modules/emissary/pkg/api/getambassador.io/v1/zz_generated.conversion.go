//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2021 Ambassador Labs.  All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	v2 "github.com/emissary-ingress/emissary/v3/pkg/api/getambassador.io/v2"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*AuthService)(nil), (*v2.AuthService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_AuthService_To_v2_AuthService(a.(*AuthService), b.(*v2.AuthService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.AuthService)(nil), (*AuthService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_AuthService_To_v1_AuthService(a.(*v2.AuthService), b.(*AuthService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*AuthServiceList)(nil), (*v2.AuthServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_AuthServiceList_To_v2_AuthServiceList(a.(*AuthServiceList), b.(*v2.AuthServiceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.AuthServiceList)(nil), (*AuthServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_AuthServiceList_To_v1_AuthServiceList(a.(*v2.AuthServiceList), b.(*AuthServiceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ConsulResolver)(nil), (*v2.ConsulResolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ConsulResolver_To_v2_ConsulResolver(a.(*ConsulResolver), b.(*v2.ConsulResolver), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.ConsulResolver)(nil), (*ConsulResolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_ConsulResolver_To_v1_ConsulResolver(a.(*v2.ConsulResolver), b.(*ConsulResolver), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ConsulResolverList)(nil), (*v2.ConsulResolverList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ConsulResolverList_To_v2_ConsulResolverList(a.(*ConsulResolverList), b.(*v2.ConsulResolverList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.ConsulResolverList)(nil), (*ConsulResolverList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_ConsulResolverList_To_v1_ConsulResolverList(a.(*v2.ConsulResolverList), b.(*ConsulResolverList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*DevPortal)(nil), (*v2.DevPortal)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DevPortal_To_v2_DevPortal(a.(*DevPortal), b.(*v2.DevPortal), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.DevPortal)(nil), (*DevPortal)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_DevPortal_To_v1_DevPortal(a.(*v2.DevPortal), b.(*DevPortal), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*DevPortalList)(nil), (*v2.DevPortalList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DevPortalList_To_v2_DevPortalList(a.(*DevPortalList), b.(*v2.DevPortalList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.DevPortalList)(nil), (*DevPortalList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_DevPortalList_To_v1_DevPortalList(a.(*v2.DevPortalList), b.(*DevPortalList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubernetesEndpointResolver)(nil), (*v2.KubernetesEndpointResolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_KubernetesEndpointResolver_To_v2_KubernetesEndpointResolver(a.(*KubernetesEndpointResolver), b.(*v2.KubernetesEndpointResolver), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.KubernetesEndpointResolver)(nil), (*KubernetesEndpointResolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_KubernetesEndpointResolver_To_v1_KubernetesEndpointResolver(a.(*v2.KubernetesEndpointResolver), b.(*KubernetesEndpointResolver), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubernetesEndpointResolverList)(nil), (*v2.KubernetesEndpointResolverList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_KubernetesEndpointResolverList_To_v2_KubernetesEndpointResolverList(a.(*KubernetesEndpointResolverList), b.(*v2.KubernetesEndpointResolverList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.KubernetesEndpointResolverList)(nil), (*KubernetesEndpointResolverList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_KubernetesEndpointResolverList_To_v1_KubernetesEndpointResolverList(a.(*v2.KubernetesEndpointResolverList), b.(*KubernetesEndpointResolverList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubernetesServiceResolver)(nil), (*v2.KubernetesServiceResolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_KubernetesServiceResolver_To_v2_KubernetesServiceResolver(a.(*KubernetesServiceResolver), b.(*v2.KubernetesServiceResolver), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.KubernetesServiceResolver)(nil), (*KubernetesServiceResolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_KubernetesServiceResolver_To_v1_KubernetesServiceResolver(a.(*v2.KubernetesServiceResolver), b.(*KubernetesServiceResolver), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubernetesServiceResolverList)(nil), (*v2.KubernetesServiceResolverList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_KubernetesServiceResolverList_To_v2_KubernetesServiceResolverList(a.(*KubernetesServiceResolverList), b.(*v2.KubernetesServiceResolverList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.KubernetesServiceResolverList)(nil), (*KubernetesServiceResolverList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_KubernetesServiceResolverList_To_v1_KubernetesServiceResolverList(a.(*v2.KubernetesServiceResolverList), b.(*KubernetesServiceResolverList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*LogService)(nil), (*v2.LogService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_LogService_To_v2_LogService(a.(*LogService), b.(*v2.LogService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.LogService)(nil), (*LogService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_LogService_To_v1_LogService(a.(*v2.LogService), b.(*LogService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*LogServiceList)(nil), (*v2.LogServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_LogServiceList_To_v2_LogServiceList(a.(*LogServiceList), b.(*v2.LogServiceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.LogServiceList)(nil), (*LogServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_LogServiceList_To_v1_LogServiceList(a.(*v2.LogServiceList), b.(*LogServiceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Mapping)(nil), (*v2.Mapping)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Mapping_To_v2_Mapping(a.(*Mapping), b.(*v2.Mapping), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.Mapping)(nil), (*Mapping)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_Mapping_To_v1_Mapping(a.(*v2.Mapping), b.(*Mapping), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MappingList)(nil), (*v2.MappingList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_MappingList_To_v2_MappingList(a.(*MappingList), b.(*v2.MappingList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.MappingList)(nil), (*MappingList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_MappingList_To_v1_MappingList(a.(*v2.MappingList), b.(*MappingList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Module)(nil), (*v2.Module)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Module_To_v2_Module(a.(*Module), b.(*v2.Module), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.Module)(nil), (*Module)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_Module_To_v1_Module(a.(*v2.Module), b.(*Module), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ModuleList)(nil), (*v2.ModuleList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ModuleList_To_v2_ModuleList(a.(*ModuleList), b.(*v2.ModuleList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.ModuleList)(nil), (*ModuleList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_ModuleList_To_v1_ModuleList(a.(*v2.ModuleList), b.(*ModuleList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RateLimitService)(nil), (*v2.RateLimitService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_RateLimitService_To_v2_RateLimitService(a.(*RateLimitService), b.(*v2.RateLimitService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.RateLimitService)(nil), (*RateLimitService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_RateLimitService_To_v1_RateLimitService(a.(*v2.RateLimitService), b.(*RateLimitService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RateLimitServiceList)(nil), (*v2.RateLimitServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_RateLimitServiceList_To_v2_RateLimitServiceList(a.(*RateLimitServiceList), b.(*v2.RateLimitServiceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.RateLimitServiceList)(nil), (*RateLimitServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_RateLimitServiceList_To_v1_RateLimitServiceList(a.(*v2.RateLimitServiceList), b.(*RateLimitServiceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TCPMapping)(nil), (*v2.TCPMapping)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TCPMapping_To_v2_TCPMapping(a.(*TCPMapping), b.(*v2.TCPMapping), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.TCPMapping)(nil), (*TCPMapping)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_TCPMapping_To_v1_TCPMapping(a.(*v2.TCPMapping), b.(*TCPMapping), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TCPMappingList)(nil), (*v2.TCPMappingList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TCPMappingList_To_v2_TCPMappingList(a.(*TCPMappingList), b.(*v2.TCPMappingList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.TCPMappingList)(nil), (*TCPMappingList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_TCPMappingList_To_v1_TCPMappingList(a.(*v2.TCPMappingList), b.(*TCPMappingList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TLSContext)(nil), (*v2.TLSContext)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TLSContext_To_v2_TLSContext(a.(*TLSContext), b.(*v2.TLSContext), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.TLSContext)(nil), (*TLSContext)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_TLSContext_To_v1_TLSContext(a.(*v2.TLSContext), b.(*TLSContext), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TLSContextList)(nil), (*v2.TLSContextList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TLSContextList_To_v2_TLSContextList(a.(*TLSContextList), b.(*v2.TLSContextList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.TLSContextList)(nil), (*TLSContextList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_TLSContextList_To_v1_TLSContextList(a.(*v2.TLSContextList), b.(*TLSContextList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TracingService)(nil), (*v2.TracingService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TracingService_To_v2_TracingService(a.(*TracingService), b.(*v2.TracingService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.TracingService)(nil), (*TracingService)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_TracingService_To_v1_TracingService(a.(*v2.TracingService), b.(*TracingService), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TracingServiceList)(nil), (*v2.TracingServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_TracingServiceList_To_v2_TracingServiceList(a.(*TracingServiceList), b.(*v2.TracingServiceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v2.TracingServiceList)(nil), (*TracingServiceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v2_TracingServiceList_To_v1_TracingServiceList(a.(*v2.TracingServiceList), b.(*TracingServiceList), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_AuthService_To_v2_AuthService(in *AuthService, out *v2.AuthService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_AuthService_To_v2_AuthService is an autogenerated conversion function.
func Convert_v1_AuthService_To_v2_AuthService(in *AuthService, out *v2.AuthService, s conversion.Scope) error {
	return autoConvert_v1_AuthService_To_v2_AuthService(in, out, s)
}

func autoConvert_v2_AuthService_To_v1_AuthService(in *v2.AuthService, out *AuthService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_AuthService_To_v1_AuthService is an autogenerated conversion function.
func Convert_v2_AuthService_To_v1_AuthService(in *v2.AuthService, out *AuthService, s conversion.Scope) error {
	return autoConvert_v2_AuthService_To_v1_AuthService(in, out, s)
}

func autoConvert_v1_AuthServiceList_To_v2_AuthServiceList(in *AuthServiceList, out *v2.AuthServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.AuthService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_AuthService_To_v2_AuthService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_AuthServiceList_To_v2_AuthServiceList is an autogenerated conversion function.
func Convert_v1_AuthServiceList_To_v2_AuthServiceList(in *AuthServiceList, out *v2.AuthServiceList, s conversion.Scope) error {
	return autoConvert_v1_AuthServiceList_To_v2_AuthServiceList(in, out, s)
}

func autoConvert_v2_AuthServiceList_To_v1_AuthServiceList(in *v2.AuthServiceList, out *AuthServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]AuthService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_AuthService_To_v1_AuthService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_AuthServiceList_To_v1_AuthServiceList is an autogenerated conversion function.
func Convert_v2_AuthServiceList_To_v1_AuthServiceList(in *v2.AuthServiceList, out *AuthServiceList, s conversion.Scope) error {
	return autoConvert_v2_AuthServiceList_To_v1_AuthServiceList(in, out, s)
}

func autoConvert_v1_ConsulResolver_To_v2_ConsulResolver(in *ConsulResolver, out *v2.ConsulResolver, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_ConsulResolver_To_v2_ConsulResolver is an autogenerated conversion function.
func Convert_v1_ConsulResolver_To_v2_ConsulResolver(in *ConsulResolver, out *v2.ConsulResolver, s conversion.Scope) error {
	return autoConvert_v1_ConsulResolver_To_v2_ConsulResolver(in, out, s)
}

func autoConvert_v2_ConsulResolver_To_v1_ConsulResolver(in *v2.ConsulResolver, out *ConsulResolver, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_ConsulResolver_To_v1_ConsulResolver is an autogenerated conversion function.
func Convert_v2_ConsulResolver_To_v1_ConsulResolver(in *v2.ConsulResolver, out *ConsulResolver, s conversion.Scope) error {
	return autoConvert_v2_ConsulResolver_To_v1_ConsulResolver(in, out, s)
}

func autoConvert_v1_ConsulResolverList_To_v2_ConsulResolverList(in *ConsulResolverList, out *v2.ConsulResolverList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.ConsulResolver, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_ConsulResolver_To_v2_ConsulResolver(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_ConsulResolverList_To_v2_ConsulResolverList is an autogenerated conversion function.
func Convert_v1_ConsulResolverList_To_v2_ConsulResolverList(in *ConsulResolverList, out *v2.ConsulResolverList, s conversion.Scope) error {
	return autoConvert_v1_ConsulResolverList_To_v2_ConsulResolverList(in, out, s)
}

func autoConvert_v2_ConsulResolverList_To_v1_ConsulResolverList(in *v2.ConsulResolverList, out *ConsulResolverList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]ConsulResolver, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_ConsulResolver_To_v1_ConsulResolver(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_ConsulResolverList_To_v1_ConsulResolverList is an autogenerated conversion function.
func Convert_v2_ConsulResolverList_To_v1_ConsulResolverList(in *v2.ConsulResolverList, out *ConsulResolverList, s conversion.Scope) error {
	return autoConvert_v2_ConsulResolverList_To_v1_ConsulResolverList(in, out, s)
}

func autoConvert_v1_DevPortal_To_v2_DevPortal(in *DevPortal, out *v2.DevPortal, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_DevPortal_To_v2_DevPortal is an autogenerated conversion function.
func Convert_v1_DevPortal_To_v2_DevPortal(in *DevPortal, out *v2.DevPortal, s conversion.Scope) error {
	return autoConvert_v1_DevPortal_To_v2_DevPortal(in, out, s)
}

func autoConvert_v2_DevPortal_To_v1_DevPortal(in *v2.DevPortal, out *DevPortal, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_DevPortal_To_v1_DevPortal is an autogenerated conversion function.
func Convert_v2_DevPortal_To_v1_DevPortal(in *v2.DevPortal, out *DevPortal, s conversion.Scope) error {
	return autoConvert_v2_DevPortal_To_v1_DevPortal(in, out, s)
}

func autoConvert_v1_DevPortalList_To_v2_DevPortalList(in *DevPortalList, out *v2.DevPortalList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.DevPortal, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_DevPortal_To_v2_DevPortal(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_DevPortalList_To_v2_DevPortalList is an autogenerated conversion function.
func Convert_v1_DevPortalList_To_v2_DevPortalList(in *DevPortalList, out *v2.DevPortalList, s conversion.Scope) error {
	return autoConvert_v1_DevPortalList_To_v2_DevPortalList(in, out, s)
}

func autoConvert_v2_DevPortalList_To_v1_DevPortalList(in *v2.DevPortalList, out *DevPortalList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]DevPortal, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_DevPortal_To_v1_DevPortal(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_DevPortalList_To_v1_DevPortalList is an autogenerated conversion function.
func Convert_v2_DevPortalList_To_v1_DevPortalList(in *v2.DevPortalList, out *DevPortalList, s conversion.Scope) error {
	return autoConvert_v2_DevPortalList_To_v1_DevPortalList(in, out, s)
}

func autoConvert_v1_KubernetesEndpointResolver_To_v2_KubernetesEndpointResolver(in *KubernetesEndpointResolver, out *v2.KubernetesEndpointResolver, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_KubernetesEndpointResolver_To_v2_KubernetesEndpointResolver is an autogenerated conversion function.
func Convert_v1_KubernetesEndpointResolver_To_v2_KubernetesEndpointResolver(in *KubernetesEndpointResolver, out *v2.KubernetesEndpointResolver, s conversion.Scope) error {
	return autoConvert_v1_KubernetesEndpointResolver_To_v2_KubernetesEndpointResolver(in, out, s)
}

func autoConvert_v2_KubernetesEndpointResolver_To_v1_KubernetesEndpointResolver(in *v2.KubernetesEndpointResolver, out *KubernetesEndpointResolver, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_KubernetesEndpointResolver_To_v1_KubernetesEndpointResolver is an autogenerated conversion function.
func Convert_v2_KubernetesEndpointResolver_To_v1_KubernetesEndpointResolver(in *v2.KubernetesEndpointResolver, out *KubernetesEndpointResolver, s conversion.Scope) error {
	return autoConvert_v2_KubernetesEndpointResolver_To_v1_KubernetesEndpointResolver(in, out, s)
}

func autoConvert_v1_KubernetesEndpointResolverList_To_v2_KubernetesEndpointResolverList(in *KubernetesEndpointResolverList, out *v2.KubernetesEndpointResolverList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.KubernetesEndpointResolver, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_KubernetesEndpointResolver_To_v2_KubernetesEndpointResolver(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_KubernetesEndpointResolverList_To_v2_KubernetesEndpointResolverList is an autogenerated conversion function.
func Convert_v1_KubernetesEndpointResolverList_To_v2_KubernetesEndpointResolverList(in *KubernetesEndpointResolverList, out *v2.KubernetesEndpointResolverList, s conversion.Scope) error {
	return autoConvert_v1_KubernetesEndpointResolverList_To_v2_KubernetesEndpointResolverList(in, out, s)
}

func autoConvert_v2_KubernetesEndpointResolverList_To_v1_KubernetesEndpointResolverList(in *v2.KubernetesEndpointResolverList, out *KubernetesEndpointResolverList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]KubernetesEndpointResolver, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_KubernetesEndpointResolver_To_v1_KubernetesEndpointResolver(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_KubernetesEndpointResolverList_To_v1_KubernetesEndpointResolverList is an autogenerated conversion function.
func Convert_v2_KubernetesEndpointResolverList_To_v1_KubernetesEndpointResolverList(in *v2.KubernetesEndpointResolverList, out *KubernetesEndpointResolverList, s conversion.Scope) error {
	return autoConvert_v2_KubernetesEndpointResolverList_To_v1_KubernetesEndpointResolverList(in, out, s)
}

func autoConvert_v1_KubernetesServiceResolver_To_v2_KubernetesServiceResolver(in *KubernetesServiceResolver, out *v2.KubernetesServiceResolver, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_KubernetesServiceResolver_To_v2_KubernetesServiceResolver is an autogenerated conversion function.
func Convert_v1_KubernetesServiceResolver_To_v2_KubernetesServiceResolver(in *KubernetesServiceResolver, out *v2.KubernetesServiceResolver, s conversion.Scope) error {
	return autoConvert_v1_KubernetesServiceResolver_To_v2_KubernetesServiceResolver(in, out, s)
}

func autoConvert_v2_KubernetesServiceResolver_To_v1_KubernetesServiceResolver(in *v2.KubernetesServiceResolver, out *KubernetesServiceResolver, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_KubernetesServiceResolver_To_v1_KubernetesServiceResolver is an autogenerated conversion function.
func Convert_v2_KubernetesServiceResolver_To_v1_KubernetesServiceResolver(in *v2.KubernetesServiceResolver, out *KubernetesServiceResolver, s conversion.Scope) error {
	return autoConvert_v2_KubernetesServiceResolver_To_v1_KubernetesServiceResolver(in, out, s)
}

func autoConvert_v1_KubernetesServiceResolverList_To_v2_KubernetesServiceResolverList(in *KubernetesServiceResolverList, out *v2.KubernetesServiceResolverList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.KubernetesServiceResolver, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_KubernetesServiceResolver_To_v2_KubernetesServiceResolver(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_KubernetesServiceResolverList_To_v2_KubernetesServiceResolverList is an autogenerated conversion function.
func Convert_v1_KubernetesServiceResolverList_To_v2_KubernetesServiceResolverList(in *KubernetesServiceResolverList, out *v2.KubernetesServiceResolverList, s conversion.Scope) error {
	return autoConvert_v1_KubernetesServiceResolverList_To_v2_KubernetesServiceResolverList(in, out, s)
}

func autoConvert_v2_KubernetesServiceResolverList_To_v1_KubernetesServiceResolverList(in *v2.KubernetesServiceResolverList, out *KubernetesServiceResolverList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]KubernetesServiceResolver, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_KubernetesServiceResolver_To_v1_KubernetesServiceResolver(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_KubernetesServiceResolverList_To_v1_KubernetesServiceResolverList is an autogenerated conversion function.
func Convert_v2_KubernetesServiceResolverList_To_v1_KubernetesServiceResolverList(in *v2.KubernetesServiceResolverList, out *KubernetesServiceResolverList, s conversion.Scope) error {
	return autoConvert_v2_KubernetesServiceResolverList_To_v1_KubernetesServiceResolverList(in, out, s)
}

func autoConvert_v1_LogService_To_v2_LogService(in *LogService, out *v2.LogService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_LogService_To_v2_LogService is an autogenerated conversion function.
func Convert_v1_LogService_To_v2_LogService(in *LogService, out *v2.LogService, s conversion.Scope) error {
	return autoConvert_v1_LogService_To_v2_LogService(in, out, s)
}

func autoConvert_v2_LogService_To_v1_LogService(in *v2.LogService, out *LogService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_LogService_To_v1_LogService is an autogenerated conversion function.
func Convert_v2_LogService_To_v1_LogService(in *v2.LogService, out *LogService, s conversion.Scope) error {
	return autoConvert_v2_LogService_To_v1_LogService(in, out, s)
}

func autoConvert_v1_LogServiceList_To_v2_LogServiceList(in *LogServiceList, out *v2.LogServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.LogService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_LogService_To_v2_LogService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_LogServiceList_To_v2_LogServiceList is an autogenerated conversion function.
func Convert_v1_LogServiceList_To_v2_LogServiceList(in *LogServiceList, out *v2.LogServiceList, s conversion.Scope) error {
	return autoConvert_v1_LogServiceList_To_v2_LogServiceList(in, out, s)
}

func autoConvert_v2_LogServiceList_To_v1_LogServiceList(in *v2.LogServiceList, out *LogServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]LogService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_LogService_To_v1_LogService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_LogServiceList_To_v1_LogServiceList is an autogenerated conversion function.
func Convert_v2_LogServiceList_To_v1_LogServiceList(in *v2.LogServiceList, out *LogServiceList, s conversion.Scope) error {
	return autoConvert_v2_LogServiceList_To_v1_LogServiceList(in, out, s)
}

func autoConvert_v1_Mapping_To_v2_Mapping(in *Mapping, out *v2.Mapping, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	if true {
		in, out := &in.Status, &out.Status
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_Mapping_To_v2_Mapping is an autogenerated conversion function.
func Convert_v1_Mapping_To_v2_Mapping(in *Mapping, out *v2.Mapping, s conversion.Scope) error {
	return autoConvert_v1_Mapping_To_v2_Mapping(in, out, s)
}

func autoConvert_v2_Mapping_To_v1_Mapping(in *v2.Mapping, out *Mapping, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	if true {
		in, out := &in.Status, &out.Status
		*out = *in
	}
	return nil
}

// Convert_v2_Mapping_To_v1_Mapping is an autogenerated conversion function.
func Convert_v2_Mapping_To_v1_Mapping(in *v2.Mapping, out *Mapping, s conversion.Scope) error {
	return autoConvert_v2_Mapping_To_v1_Mapping(in, out, s)
}

func autoConvert_v1_MappingList_To_v2_MappingList(in *MappingList, out *v2.MappingList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.Mapping, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_Mapping_To_v2_Mapping(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_MappingList_To_v2_MappingList is an autogenerated conversion function.
func Convert_v1_MappingList_To_v2_MappingList(in *MappingList, out *v2.MappingList, s conversion.Scope) error {
	return autoConvert_v1_MappingList_To_v2_MappingList(in, out, s)
}

func autoConvert_v2_MappingList_To_v1_MappingList(in *v2.MappingList, out *MappingList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]Mapping, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_Mapping_To_v1_Mapping(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_MappingList_To_v1_MappingList is an autogenerated conversion function.
func Convert_v2_MappingList_To_v1_MappingList(in *v2.MappingList, out *MappingList, s conversion.Scope) error {
	return autoConvert_v2_MappingList_To_v1_MappingList(in, out, s)
}

func autoConvert_v1_Module_To_v2_Module(in *Module, out *v2.Module, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_Module_To_v2_Module is an autogenerated conversion function.
func Convert_v1_Module_To_v2_Module(in *Module, out *v2.Module, s conversion.Scope) error {
	return autoConvert_v1_Module_To_v2_Module(in, out, s)
}

func autoConvert_v2_Module_To_v1_Module(in *v2.Module, out *Module, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_Module_To_v1_Module is an autogenerated conversion function.
func Convert_v2_Module_To_v1_Module(in *v2.Module, out *Module, s conversion.Scope) error {
	return autoConvert_v2_Module_To_v1_Module(in, out, s)
}

func autoConvert_v1_ModuleList_To_v2_ModuleList(in *ModuleList, out *v2.ModuleList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.Module, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_Module_To_v2_Module(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_ModuleList_To_v2_ModuleList is an autogenerated conversion function.
func Convert_v1_ModuleList_To_v2_ModuleList(in *ModuleList, out *v2.ModuleList, s conversion.Scope) error {
	return autoConvert_v1_ModuleList_To_v2_ModuleList(in, out, s)
}

func autoConvert_v2_ModuleList_To_v1_ModuleList(in *v2.ModuleList, out *ModuleList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]Module, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_Module_To_v1_Module(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_ModuleList_To_v1_ModuleList is an autogenerated conversion function.
func Convert_v2_ModuleList_To_v1_ModuleList(in *v2.ModuleList, out *ModuleList, s conversion.Scope) error {
	return autoConvert_v2_ModuleList_To_v1_ModuleList(in, out, s)
}

func autoConvert_v1_RateLimitService_To_v2_RateLimitService(in *RateLimitService, out *v2.RateLimitService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_RateLimitService_To_v2_RateLimitService is an autogenerated conversion function.
func Convert_v1_RateLimitService_To_v2_RateLimitService(in *RateLimitService, out *v2.RateLimitService, s conversion.Scope) error {
	return autoConvert_v1_RateLimitService_To_v2_RateLimitService(in, out, s)
}

func autoConvert_v2_RateLimitService_To_v1_RateLimitService(in *v2.RateLimitService, out *RateLimitService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_RateLimitService_To_v1_RateLimitService is an autogenerated conversion function.
func Convert_v2_RateLimitService_To_v1_RateLimitService(in *v2.RateLimitService, out *RateLimitService, s conversion.Scope) error {
	return autoConvert_v2_RateLimitService_To_v1_RateLimitService(in, out, s)
}

func autoConvert_v1_RateLimitServiceList_To_v2_RateLimitServiceList(in *RateLimitServiceList, out *v2.RateLimitServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.RateLimitService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_RateLimitService_To_v2_RateLimitService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_RateLimitServiceList_To_v2_RateLimitServiceList is an autogenerated conversion function.
func Convert_v1_RateLimitServiceList_To_v2_RateLimitServiceList(in *RateLimitServiceList, out *v2.RateLimitServiceList, s conversion.Scope) error {
	return autoConvert_v1_RateLimitServiceList_To_v2_RateLimitServiceList(in, out, s)
}

func autoConvert_v2_RateLimitServiceList_To_v1_RateLimitServiceList(in *v2.RateLimitServiceList, out *RateLimitServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]RateLimitService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_RateLimitService_To_v1_RateLimitService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_RateLimitServiceList_To_v1_RateLimitServiceList is an autogenerated conversion function.
func Convert_v2_RateLimitServiceList_To_v1_RateLimitServiceList(in *v2.RateLimitServiceList, out *RateLimitServiceList, s conversion.Scope) error {
	return autoConvert_v2_RateLimitServiceList_To_v1_RateLimitServiceList(in, out, s)
}

func autoConvert_v1_TCPMapping_To_v2_TCPMapping(in *TCPMapping, out *v2.TCPMapping, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_TCPMapping_To_v2_TCPMapping is an autogenerated conversion function.
func Convert_v1_TCPMapping_To_v2_TCPMapping(in *TCPMapping, out *v2.TCPMapping, s conversion.Scope) error {
	return autoConvert_v1_TCPMapping_To_v2_TCPMapping(in, out, s)
}

func autoConvert_v2_TCPMapping_To_v1_TCPMapping(in *v2.TCPMapping, out *TCPMapping, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_TCPMapping_To_v1_TCPMapping is an autogenerated conversion function.
func Convert_v2_TCPMapping_To_v1_TCPMapping(in *v2.TCPMapping, out *TCPMapping, s conversion.Scope) error {
	return autoConvert_v2_TCPMapping_To_v1_TCPMapping(in, out, s)
}

func autoConvert_v1_TCPMappingList_To_v2_TCPMappingList(in *TCPMappingList, out *v2.TCPMappingList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.TCPMapping, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_TCPMapping_To_v2_TCPMapping(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_TCPMappingList_To_v2_TCPMappingList is an autogenerated conversion function.
func Convert_v1_TCPMappingList_To_v2_TCPMappingList(in *TCPMappingList, out *v2.TCPMappingList, s conversion.Scope) error {
	return autoConvert_v1_TCPMappingList_To_v2_TCPMappingList(in, out, s)
}

func autoConvert_v2_TCPMappingList_To_v1_TCPMappingList(in *v2.TCPMappingList, out *TCPMappingList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]TCPMapping, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_TCPMapping_To_v1_TCPMapping(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_TCPMappingList_To_v1_TCPMappingList is an autogenerated conversion function.
func Convert_v2_TCPMappingList_To_v1_TCPMappingList(in *v2.TCPMappingList, out *TCPMappingList, s conversion.Scope) error {
	return autoConvert_v2_TCPMappingList_To_v1_TCPMappingList(in, out, s)
}

func autoConvert_v1_TLSContext_To_v2_TLSContext(in *TLSContext, out *v2.TLSContext, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_TLSContext_To_v2_TLSContext is an autogenerated conversion function.
func Convert_v1_TLSContext_To_v2_TLSContext(in *TLSContext, out *v2.TLSContext, s conversion.Scope) error {
	return autoConvert_v1_TLSContext_To_v2_TLSContext(in, out, s)
}

func autoConvert_v2_TLSContext_To_v1_TLSContext(in *v2.TLSContext, out *TLSContext, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_TLSContext_To_v1_TLSContext is an autogenerated conversion function.
func Convert_v2_TLSContext_To_v1_TLSContext(in *v2.TLSContext, out *TLSContext, s conversion.Scope) error {
	return autoConvert_v2_TLSContext_To_v1_TLSContext(in, out, s)
}

func autoConvert_v1_TLSContextList_To_v2_TLSContextList(in *TLSContextList, out *v2.TLSContextList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.TLSContext, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_TLSContext_To_v2_TLSContext(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_TLSContextList_To_v2_TLSContextList is an autogenerated conversion function.
func Convert_v1_TLSContextList_To_v2_TLSContextList(in *TLSContextList, out *v2.TLSContextList, s conversion.Scope) error {
	return autoConvert_v1_TLSContextList_To_v2_TLSContextList(in, out, s)
}

func autoConvert_v2_TLSContextList_To_v1_TLSContextList(in *v2.TLSContextList, out *TLSContextList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]TLSContext, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_TLSContext_To_v1_TLSContext(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_TLSContextList_To_v1_TLSContextList is an autogenerated conversion function.
func Convert_v2_TLSContextList_To_v1_TLSContextList(in *v2.TLSContextList, out *TLSContextList, s conversion.Scope) error {
	return autoConvert_v2_TLSContextList_To_v1_TLSContextList(in, out, s)
}

func autoConvert_v1_TracingService_To_v2_TracingService(in *TracingService, out *v2.TracingService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	// INFO: in.dumbWorkaround opted out of conversion generation via +k8s:conversion-gen=false
	return nil
}

// Convert_v1_TracingService_To_v2_TracingService is an autogenerated conversion function.
func Convert_v1_TracingService_To_v2_TracingService(in *TracingService, out *v2.TracingService, s conversion.Scope) error {
	return autoConvert_v1_TracingService_To_v2_TracingService(in, out, s)
}

func autoConvert_v2_TracingService_To_v1_TracingService(in *v2.TracingService, out *TracingService, s conversion.Scope) error {
	if true {
		in, out := &in.ObjectMeta, &out.ObjectMeta
		*out = *in
	}
	if true {
		in, out := &in.Spec, &out.Spec
		*out = *in
	}
	return nil
}

// Convert_v2_TracingService_To_v1_TracingService is an autogenerated conversion function.
func Convert_v2_TracingService_To_v1_TracingService(in *v2.TracingService, out *TracingService, s conversion.Scope) error {
	return autoConvert_v2_TracingService_To_v1_TracingService(in, out, s)
}

func autoConvert_v1_TracingServiceList_To_v2_TracingServiceList(in *TracingServiceList, out *v2.TracingServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]v2.TracingService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v1_TracingService_To_v2_TracingService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v1_TracingServiceList_To_v2_TracingServiceList is an autogenerated conversion function.
func Convert_v1_TracingServiceList_To_v2_TracingServiceList(in *TracingServiceList, out *v2.TracingServiceList, s conversion.Scope) error {
	return autoConvert_v1_TracingServiceList_To_v2_TracingServiceList(in, out, s)
}

func autoConvert_v2_TracingServiceList_To_v1_TracingServiceList(in *v2.TracingServiceList, out *TracingServiceList, s conversion.Scope) error {
	if true {
		in, out := &in.ListMeta, &out.ListMeta
		*out = *in
	}
	if true {
		in, out := &in.Items, &out.Items
		if *in == nil {
			*out = nil
		} else {
			*out = make([]TracingService, len(*in))
			for i := range *in {
				in, out := &(*in)[i], &(*out)[i]
				if err := Convert_v2_TracingService_To_v1_TracingService(in, out, s); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Convert_v2_TracingServiceList_To_v1_TracingServiceList is an autogenerated conversion function.
func Convert_v2_TracingServiceList_To_v1_TracingServiceList(in *v2.TracingServiceList, out *TracingServiceList, s conversion.Scope) error {
	return autoConvert_v2_TracingServiceList_To_v1_TracingServiceList(in, out, s)
}
