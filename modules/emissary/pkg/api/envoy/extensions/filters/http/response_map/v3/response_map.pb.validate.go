// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/extensions/filters/http/response_map/v3/response_map.proto

package response_mapv3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResponseMapper with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseMapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseMapper with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMapperMultiError,
// or nil if none found.
func (m *ResponseMapper) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseMapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFilter() == nil {
		err := ResponseMapperValidationError{
			field:  "Filter",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMapperValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMapperValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapperValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetStatusCode(); wrapper != nil {

		if val := wrapper.GetValue(); val < 200 || val >= 600 {
			err := ResponseMapperValidationError{
				field:  "StatusCode",
				reason: "value must be inside range [200, 600)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMapperValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMapperValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapperValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBodyFormatOverride()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMapperValidationError{
					field:  "BodyFormatOverride",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMapperValidationError{
					field:  "BodyFormatOverride",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBodyFormatOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapperValidationError{
				field:  "BodyFormatOverride",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseMapperMultiError(errors)
	}

	return nil
}

// ResponseMapperMultiError is an error wrapping multiple validation errors
// returned by ResponseMapper.ValidateAll() if the designated constraints
// aren't met.
type ResponseMapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMapperMultiError) AllErrors() []error { return m }

// ResponseMapperValidationError is the validation error returned by
// ResponseMapper.Validate if the designated constraints aren't met.
type ResponseMapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMapperValidationError) ErrorName() string { return "ResponseMapperValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMapperValidationError{}

// Validate checks the field values on ResponseMap with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseMap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMapMultiError, or
// nil if none found.
func (m *ResponseMap) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMappers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseMapValidationError{
						field:  fmt.Sprintf("Mappers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseMapValidationError{
						field:  fmt.Sprintf("Mappers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseMapValidationError{
					field:  fmt.Sprintf("Mappers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBodyFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMapValidationError{
					field:  "BodyFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMapValidationError{
					field:  "BodyFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBodyFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMapValidationError{
				field:  "BodyFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseMapMultiError(errors)
	}

	return nil
}

// ResponseMapMultiError is an error wrapping multiple validation errors
// returned by ResponseMap.ValidateAll() if the designated constraints aren't met.
type ResponseMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMapMultiError) AllErrors() []error { return m }

// ResponseMapValidationError is the validation error returned by
// ResponseMap.Validate if the designated constraints aren't met.
type ResponseMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMapValidationError) ErrorName() string { return "ResponseMapValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMapValidationError{}

// Validate checks the field values on ResponseMapPerRoute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseMapPerRoute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseMapPerRoute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseMapPerRouteMultiError, or nil if none found.
func (m *ResponseMapPerRoute) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseMapPerRoute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofOverridePresent := false
	switch v := m.Override.(type) {
	case *ResponseMapPerRoute_Disabled:
		if v == nil {
			err := ResponseMapPerRouteValidationError{
				field:  "Override",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOverridePresent = true

		if m.GetDisabled() != true {
			err := ResponseMapPerRouteValidationError{
				field:  "Disabled",
				reason: "value must equal true",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ResponseMapPerRoute_ResponseMap:
		if v == nil {
			err := ResponseMapPerRouteValidationError{
				field:  "Override",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOverridePresent = true

		if m.GetResponseMap() == nil {
			err := ResponseMapPerRouteValidationError{
				field:  "ResponseMap",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResponseMap()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseMapPerRouteValidationError{
						field:  "ResponseMap",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseMapPerRouteValidationError{
						field:  "ResponseMap",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponseMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseMapPerRouteValidationError{
					field:  "ResponseMap",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofOverridePresent {
		err := ResponseMapPerRouteValidationError{
			field:  "Override",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResponseMapPerRouteMultiError(errors)
	}

	return nil
}

// ResponseMapPerRouteMultiError is an error wrapping multiple validation
// errors returned by ResponseMapPerRoute.ValidateAll() if the designated
// constraints aren't met.
type ResponseMapPerRouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMapPerRouteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMapPerRouteMultiError) AllErrors() []error { return m }

// ResponseMapPerRouteValidationError is the validation error returned by
// ResponseMapPerRoute.Validate if the designated constraints aren't met.
type ResponseMapPerRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMapPerRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMapPerRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMapPerRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMapPerRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMapPerRouteValidationError) ErrorName() string {
	return "ResponseMapPerRouteValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseMapPerRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMapPerRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMapPerRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMapPerRouteValidationError{}
