// Code generated by MockGen. DO NOT EDIT.
// Source: strategy.go
//
// Generated by this command:
//
//	mockgen -source strategy.go -imports libvirt=libvirt.org/go/libvirt -package=install -destination=generated_mock_strategy.go
//

// Package install is a generated GoMock package.
package install

import (
	context "context"
	reflect "reflect"

	v1 "github.com/openshift/api/route/v1"
	v10 "github.com/openshift/api/security/v1"
	v11 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	gomock "go.uber.org/mock/gomock"
	v12 "k8s.io/api/admissionregistration/v1"
	v13 "k8s.io/api/apps/v1"
	v14 "k8s.io/api/core/v1"
	v15 "k8s.io/api/rbac/v1"
	v16 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	v17 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	v18 "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1"
	v1beta1 "kubevirt.io/api/instancetype/v1beta1"
)

// MockAPIServiceInterface is a mock of APIServiceInterface interface.
type MockAPIServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAPIServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockAPIServiceInterfaceMockRecorder is the mock recorder for MockAPIServiceInterface.
type MockAPIServiceInterfaceMockRecorder struct {
	mock *MockAPIServiceInterface
}

// NewMockAPIServiceInterface creates a new mock instance.
func NewMockAPIServiceInterface(ctrl *gomock.Controller) *MockAPIServiceInterface {
	mock := &MockAPIServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAPIServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIServiceInterface) EXPECT() *MockAPIServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAPIServiceInterface) Create(ctx context.Context, apiService *v18.APIService, opts v17.CreateOptions) (*v18.APIService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, apiService, opts)
	ret0, _ := ret[0].(*v18.APIService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAPIServiceInterfaceMockRecorder) Create(ctx, apiService, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPIServiceInterface)(nil).Create), ctx, apiService, opts)
}

// Delete mocks base method.
func (m *MockAPIServiceInterface) Delete(ctx context.Context, name string, options v17.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAPIServiceInterfaceMockRecorder) Delete(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAPIServiceInterface)(nil).Delete), ctx, name, options)
}

// Get mocks base method.
func (m *MockAPIServiceInterface) Get(ctx context.Context, name string, options v17.GetOptions) (*v18.APIService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, options)
	ret0, _ := ret[0].(*v18.APIService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAPIServiceInterfaceMockRecorder) Get(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPIServiceInterface)(nil).Get), ctx, name, options)
}

// Patch mocks base method.
func (m *MockAPIServiceInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v17.PatchOptions, subresources ...string) (*v18.APIService, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v18.APIService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockAPIServiceInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockAPIServiceInterface)(nil).Patch), varargs...)
}

// MockStrategyInterface is a mock of StrategyInterface interface.
type MockStrategyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyInterfaceMockRecorder
	isgomock struct{}
}

// MockStrategyInterfaceMockRecorder is the mock recorder for MockStrategyInterface.
type MockStrategyInterfaceMockRecorder struct {
	mock *MockStrategyInterface
}

// NewMockStrategyInterface creates a new mock instance.
func NewMockStrategyInterface(ctrl *gomock.Controller) *MockStrategyInterface {
	mock := &MockStrategyInterface{ctrl: ctrl}
	mock.recorder = &MockStrategyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrategyInterface) EXPECT() *MockStrategyInterfaceMockRecorder {
	return m.recorder
}

// APIServices mocks base method.
func (m *MockStrategyInterface) APIServices() []*v18.APIService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIServices")
	ret0, _ := ret[0].([]*v18.APIService)
	return ret0
}

// APIServices indicates an expected call of APIServices.
func (mr *MockStrategyInterfaceMockRecorder) APIServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIServices", reflect.TypeOf((*MockStrategyInterface)(nil).APIServices))
}

// ApiDeployments mocks base method.
func (m *MockStrategyInterface) ApiDeployments() []*v13.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiDeployments")
	ret0, _ := ret[0].([]*v13.Deployment)
	return ret0
}

// ApiDeployments indicates an expected call of ApiDeployments.
func (mr *MockStrategyInterfaceMockRecorder) ApiDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiDeployments", reflect.TypeOf((*MockStrategyInterface)(nil).ApiDeployments))
}

// CRDs mocks base method.
func (m *MockStrategyInterface) CRDs() []*v16.CustomResourceDefinition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CRDs")
	ret0, _ := ret[0].([]*v16.CustomResourceDefinition)
	return ret0
}

// CRDs indicates an expected call of CRDs.
func (mr *MockStrategyInterfaceMockRecorder) CRDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CRDs", reflect.TypeOf((*MockStrategyInterface)(nil).CRDs))
}

// CertificateSecrets mocks base method.
func (m *MockStrategyInterface) CertificateSecrets() []*v14.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateSecrets")
	ret0, _ := ret[0].([]*v14.Secret)
	return ret0
}

// CertificateSecrets indicates an expected call of CertificateSecrets.
func (mr *MockStrategyInterfaceMockRecorder) CertificateSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateSecrets", reflect.TypeOf((*MockStrategyInterface)(nil).CertificateSecrets))
}

// ClusterRoleBindings mocks base method.
func (m *MockStrategyInterface) ClusterRoleBindings() []*v15.ClusterRoleBinding {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoleBindings")
	ret0, _ := ret[0].([]*v15.ClusterRoleBinding)
	return ret0
}

// ClusterRoleBindings indicates an expected call of ClusterRoleBindings.
func (mr *MockStrategyInterfaceMockRecorder) ClusterRoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoleBindings", reflect.TypeOf((*MockStrategyInterface)(nil).ClusterRoleBindings))
}

// ClusterRoles mocks base method.
func (m *MockStrategyInterface) ClusterRoles() []*v15.ClusterRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoles")
	ret0, _ := ret[0].([]*v15.ClusterRole)
	return ret0
}

// ClusterRoles indicates an expected call of ClusterRoles.
func (mr *MockStrategyInterfaceMockRecorder) ClusterRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoles", reflect.TypeOf((*MockStrategyInterface)(nil).ClusterRoles))
}

// ConfigMaps mocks base method.
func (m *MockStrategyInterface) ConfigMaps() []*v14.ConfigMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps")
	ret0, _ := ret[0].([]*v14.ConfigMap)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps.
func (mr *MockStrategyInterfaceMockRecorder) ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockStrategyInterface)(nil).ConfigMaps))
}

// ControllerDeployments mocks base method.
func (m *MockStrategyInterface) ControllerDeployments() []*v13.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerDeployments")
	ret0, _ := ret[0].([]*v13.Deployment)
	return ret0
}

// ControllerDeployments indicates an expected call of ControllerDeployments.
func (mr *MockStrategyInterfaceMockRecorder) ControllerDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerDeployments", reflect.TypeOf((*MockStrategyInterface)(nil).ControllerDeployments))
}

// DaemonSets mocks base method.
func (m *MockStrategyInterface) DaemonSets() []*v13.DaemonSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonSets")
	ret0, _ := ret[0].([]*v13.DaemonSet)
	return ret0
}

// DaemonSets indicates an expected call of DaemonSets.
func (mr *MockStrategyInterfaceMockRecorder) DaemonSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonSets", reflect.TypeOf((*MockStrategyInterface)(nil).DaemonSets))
}

// Deployments mocks base method.
func (m *MockStrategyInterface) Deployments() []*v13.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployments")
	ret0, _ := ret[0].([]*v13.Deployment)
	return ret0
}

// Deployments indicates an expected call of Deployments.
func (mr *MockStrategyInterfaceMockRecorder) Deployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockStrategyInterface)(nil).Deployments))
}

// ExportProxyDeployments mocks base method.
func (m *MockStrategyInterface) ExportProxyDeployments() []*v13.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportProxyDeployments")
	ret0, _ := ret[0].([]*v13.Deployment)
	return ret0
}

// ExportProxyDeployments indicates an expected call of ExportProxyDeployments.
func (mr *MockStrategyInterfaceMockRecorder) ExportProxyDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportProxyDeployments", reflect.TypeOf((*MockStrategyInterface)(nil).ExportProxyDeployments))
}

// Instancetypes mocks base method.
func (m *MockStrategyInterface) Instancetypes() []*v1beta1.VirtualMachineClusterInstancetype {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instancetypes")
	ret0, _ := ret[0].([]*v1beta1.VirtualMachineClusterInstancetype)
	return ret0
}

// Instancetypes indicates an expected call of Instancetypes.
func (mr *MockStrategyInterfaceMockRecorder) Instancetypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instancetypes", reflect.TypeOf((*MockStrategyInterface)(nil).Instancetypes))
}

// MutatingWebhookConfigurations mocks base method.
func (m *MockStrategyInterface) MutatingWebhookConfigurations() []*v12.MutatingWebhookConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutatingWebhookConfigurations")
	ret0, _ := ret[0].([]*v12.MutatingWebhookConfiguration)
	return ret0
}

// MutatingWebhookConfigurations indicates an expected call of MutatingWebhookConfigurations.
func (mr *MockStrategyInterfaceMockRecorder) MutatingWebhookConfigurations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutatingWebhookConfigurations", reflect.TypeOf((*MockStrategyInterface)(nil).MutatingWebhookConfigurations))
}

// Preferences mocks base method.
func (m *MockStrategyInterface) Preferences() []*v1beta1.VirtualMachineClusterPreference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preferences")
	ret0, _ := ret[0].([]*v1beta1.VirtualMachineClusterPreference)
	return ret0
}

// Preferences indicates an expected call of Preferences.
func (mr *MockStrategyInterfaceMockRecorder) Preferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preferences", reflect.TypeOf((*MockStrategyInterface)(nil).Preferences))
}

// PrometheusRules mocks base method.
func (m *MockStrategyInterface) PrometheusRules() []*v11.PrometheusRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusRules")
	ret0, _ := ret[0].([]*v11.PrometheusRule)
	return ret0
}

// PrometheusRules indicates an expected call of PrometheusRules.
func (mr *MockStrategyInterfaceMockRecorder) PrometheusRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusRules", reflect.TypeOf((*MockStrategyInterface)(nil).PrometheusRules))
}

// RoleBindings mocks base method.
func (m *MockStrategyInterface) RoleBindings() []*v15.RoleBinding {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBindings")
	ret0, _ := ret[0].([]*v15.RoleBinding)
	return ret0
}

// RoleBindings indicates an expected call of RoleBindings.
func (mr *MockStrategyInterfaceMockRecorder) RoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBindings", reflect.TypeOf((*MockStrategyInterface)(nil).RoleBindings))
}

// Roles mocks base method.
func (m *MockStrategyInterface) Roles() []*v15.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].([]*v15.Role)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockStrategyInterfaceMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockStrategyInterface)(nil).Roles))
}

// Routes mocks base method.
func (m *MockStrategyInterface) Routes() []*v1.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].([]*v1.Route)
	return ret0
}

// Routes indicates an expected call of Routes.
func (mr *MockStrategyInterfaceMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockStrategyInterface)(nil).Routes))
}

// SCCs mocks base method.
func (m *MockStrategyInterface) SCCs() []*v10.SecurityContextConstraints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCCs")
	ret0, _ := ret[0].([]*v10.SecurityContextConstraints)
	return ret0
}

// SCCs indicates an expected call of SCCs.
func (mr *MockStrategyInterfaceMockRecorder) SCCs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCCs", reflect.TypeOf((*MockStrategyInterface)(nil).SCCs))
}

// ServiceAccounts mocks base method.
func (m *MockStrategyInterface) ServiceAccounts() []*v14.ServiceAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts")
	ret0, _ := ret[0].([]*v14.ServiceAccount)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts.
func (mr *MockStrategyInterfaceMockRecorder) ServiceAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockStrategyInterface)(nil).ServiceAccounts))
}

// ServiceMonitors mocks base method.
func (m *MockStrategyInterface) ServiceMonitors() []*v11.ServiceMonitor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceMonitors")
	ret0, _ := ret[0].([]*v11.ServiceMonitor)
	return ret0
}

// ServiceMonitors indicates an expected call of ServiceMonitors.
func (mr *MockStrategyInterfaceMockRecorder) ServiceMonitors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceMonitors", reflect.TypeOf((*MockStrategyInterface)(nil).ServiceMonitors))
}

// Services mocks base method.
func (m *MockStrategyInterface) Services() []*v14.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].([]*v14.Service)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockStrategyInterfaceMockRecorder) Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockStrategyInterface)(nil).Services))
}

// ValidatingAdmissionPolicies mocks base method.
func (m *MockStrategyInterface) ValidatingAdmissionPolicies() []*v12.ValidatingAdmissionPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatingAdmissionPolicies")
	ret0, _ := ret[0].([]*v12.ValidatingAdmissionPolicy)
	return ret0
}

// ValidatingAdmissionPolicies indicates an expected call of ValidatingAdmissionPolicies.
func (mr *MockStrategyInterfaceMockRecorder) ValidatingAdmissionPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatingAdmissionPolicies", reflect.TypeOf((*MockStrategyInterface)(nil).ValidatingAdmissionPolicies))
}

// ValidatingAdmissionPolicyBindings mocks base method.
func (m *MockStrategyInterface) ValidatingAdmissionPolicyBindings() []*v12.ValidatingAdmissionPolicyBinding {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatingAdmissionPolicyBindings")
	ret0, _ := ret[0].([]*v12.ValidatingAdmissionPolicyBinding)
	return ret0
}

// ValidatingAdmissionPolicyBindings indicates an expected call of ValidatingAdmissionPolicyBindings.
func (mr *MockStrategyInterfaceMockRecorder) ValidatingAdmissionPolicyBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatingAdmissionPolicyBindings", reflect.TypeOf((*MockStrategyInterface)(nil).ValidatingAdmissionPolicyBindings))
}

// ValidatingWebhookConfigurations mocks base method.
func (m *MockStrategyInterface) ValidatingWebhookConfigurations() []*v12.ValidatingWebhookConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatingWebhookConfigurations")
	ret0, _ := ret[0].([]*v12.ValidatingWebhookConfiguration)
	return ret0
}

// ValidatingWebhookConfigurations indicates an expected call of ValidatingWebhookConfigurations.
func (mr *MockStrategyInterfaceMockRecorder) ValidatingWebhookConfigurations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatingWebhookConfigurations", reflect.TypeOf((*MockStrategyInterface)(nil).ValidatingWebhookConfigurations))
}
