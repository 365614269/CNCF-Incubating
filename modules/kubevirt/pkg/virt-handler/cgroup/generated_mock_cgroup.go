// Code generated by MockGen. DO NOT EDIT.
// Source: cgroup.go
//
// Generated by this command:
//
//	mockgen -source cgroup.go -package=cgroup -destination=generated_mock_cgroup.go
//

// Package cgroup is a generated GoMock package.
package cgroup

import (
	reflect "reflect"

	cgroups "github.com/opencontainers/runc/libcontainer/cgroups"
	configs "github.com/opencontainers/runc/libcontainer/configs"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AttachTID mocks base method.
func (m *MockManager) AttachTID(subSystem, subCgroup string, tid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTID", subSystem, subCgroup, tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachTID indicates an expected call of AttachTID.
func (mr *MockManagerMockRecorder) AttachTID(subSystem, subCgroup, tid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTID", reflect.TypeOf((*MockManager)(nil).AttachTID), subSystem, subCgroup, tid)
}

// CreateChildCgroup mocks base method.
func (m *MockManager) CreateChildCgroup(name, subSystem string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChildCgroup", name, subSystem)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChildCgroup indicates an expected call of CreateChildCgroup.
func (mr *MockManagerMockRecorder) CreateChildCgroup(name, subSystem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildCgroup", reflect.TypeOf((*MockManager)(nil).CreateChildCgroup), name, subSystem)
}

// GetBasePathToHostSubsystem mocks base method.
func (m *MockManager) GetBasePathToHostSubsystem(subsystem string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasePathToHostSubsystem", subsystem)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasePathToHostSubsystem indicates an expected call of GetBasePathToHostSubsystem.
func (mr *MockManagerMockRecorder) GetBasePathToHostSubsystem(subsystem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathToHostSubsystem", reflect.TypeOf((*MockManager)(nil).GetBasePathToHostSubsystem), subsystem)
}

// GetCgroupThreads mocks base method.
func (m *MockManager) GetCgroupThreads() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCgroupThreads")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCgroupThreads indicates an expected call of GetCgroupThreads.
func (mr *MockManagerMockRecorder) GetCgroupThreads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCgroupThreads", reflect.TypeOf((*MockManager)(nil).GetCgroupThreads))
}

// GetCgroupVersion mocks base method.
func (m *MockManager) GetCgroupVersion() CgroupVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCgroupVersion")
	ret0, _ := ret[0].(CgroupVersion)
	return ret0
}

// GetCgroupVersion indicates an expected call of GetCgroupVersion.
func (mr *MockManagerMockRecorder) GetCgroupVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCgroupVersion", reflect.TypeOf((*MockManager)(nil).GetCgroupVersion))
}

// GetCpuSet mocks base method.
func (m *MockManager) GetCpuSet() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuSet")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCpuSet indicates an expected call of GetCpuSet.
func (mr *MockManagerMockRecorder) GetCpuSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuSet", reflect.TypeOf((*MockManager)(nil).GetCpuSet))
}

// Set mocks base method.
func (m *MockManager) Set(r *configs.Resources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockManagerMockRecorder) Set(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockManager)(nil).Set), r)
}

// SetCpuSet mocks base method.
func (m *MockManager) SetCpuSet(subcgroup string, cpulist []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCpuSet", subcgroup, cpulist)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCpuSet indicates an expected call of SetCpuSet.
func (mr *MockManagerMockRecorder) SetCpuSet(subcgroup, cpulist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCpuSet", reflect.TypeOf((*MockManager)(nil).SetCpuSet), subcgroup, cpulist)
}

// MockruncManager is a mock of runcManager interface.
type MockruncManager struct {
	ctrl     *gomock.Controller
	recorder *MockruncManagerMockRecorder
	isgomock struct{}
}

// MockruncManagerMockRecorder is the mock recorder for MockruncManager.
type MockruncManagerMockRecorder struct {
	mock *MockruncManager
}

// NewMockruncManager creates a new mock instance.
func NewMockruncManager(ctrl *gomock.Controller) *MockruncManager {
	mock := &MockruncManager{ctrl: ctrl}
	mock.recorder = &MockruncManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockruncManager) EXPECT() *MockruncManagerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockruncManager) Apply(pid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockruncManagerMockRecorder) Apply(pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockruncManager)(nil).Apply), pid)
}

// Destroy mocks base method.
func (m *MockruncManager) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockruncManagerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockruncManager)(nil).Destroy))
}

// Exists mocks base method.
func (m *MockruncManager) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockruncManagerMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockruncManager)(nil).Exists))
}

// Freeze mocks base method.
func (m *MockruncManager) Freeze(state configs.FreezerState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Freeze", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Freeze indicates an expected call of Freeze.
func (mr *MockruncManagerMockRecorder) Freeze(state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Freeze", reflect.TypeOf((*MockruncManager)(nil).Freeze), state)
}

// GetAllPids mocks base method.
func (m *MockruncManager) GetAllPids() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPids")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPids indicates an expected call of GetAllPids.
func (mr *MockruncManagerMockRecorder) GetAllPids() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPids", reflect.TypeOf((*MockruncManager)(nil).GetAllPids))
}

// GetCgroups mocks base method.
func (m *MockruncManager) GetCgroups() (*configs.Cgroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCgroups")
	ret0, _ := ret[0].(*configs.Cgroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCgroups indicates an expected call of GetCgroups.
func (mr *MockruncManagerMockRecorder) GetCgroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCgroups", reflect.TypeOf((*MockruncManager)(nil).GetCgroups))
}

// GetFreezerState mocks base method.
func (m *MockruncManager) GetFreezerState() (configs.FreezerState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreezerState")
	ret0, _ := ret[0].(configs.FreezerState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreezerState indicates an expected call of GetFreezerState.
func (mr *MockruncManagerMockRecorder) GetFreezerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreezerState", reflect.TypeOf((*MockruncManager)(nil).GetFreezerState))
}

// GetPaths mocks base method.
func (m *MockruncManager) GetPaths() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaths")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetPaths indicates an expected call of GetPaths.
func (mr *MockruncManagerMockRecorder) GetPaths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaths", reflect.TypeOf((*MockruncManager)(nil).GetPaths))
}

// GetPids mocks base method.
func (m *MockruncManager) GetPids() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPids")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPids indicates an expected call of GetPids.
func (mr *MockruncManagerMockRecorder) GetPids() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPids", reflect.TypeOf((*MockruncManager)(nil).GetPids))
}

// GetStats mocks base method.
func (m *MockruncManager) GetStats() (*cgroups.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*cgroups.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockruncManagerMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockruncManager)(nil).GetStats))
}

// OOMKillCount mocks base method.
func (m *MockruncManager) OOMKillCount() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OOMKillCount")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OOMKillCount indicates an expected call of OOMKillCount.
func (mr *MockruncManagerMockRecorder) OOMKillCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OOMKillCount", reflect.TypeOf((*MockruncManager)(nil).OOMKillCount))
}

// Path mocks base method.
func (m *MockruncManager) Path(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockruncManagerMockRecorder) Path(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockruncManager)(nil).Path), arg0)
}

// Set mocks base method.
func (m *MockruncManager) Set(r *configs.Resources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockruncManagerMockRecorder) Set(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockruncManager)(nil).Set), r)
}
