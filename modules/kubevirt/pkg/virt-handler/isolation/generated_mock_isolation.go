// Code generated by MockGen. DO NOT EDIT.
// Source: isolation.go
//
// Generated by this command:
//
//	mockgen -source isolation.go -package=isolation -destination=generated_mock_isolation.go
//

// Package isolation is a generated GoMock package.
package isolation

import (
	reflect "reflect"

	ps "github.com/mitchellh/go-ps"
	mountinfo "github.com/moby/sys/mountinfo"
	gomock "go.uber.org/mock/gomock"

	safepath "kubevirt.io/kubevirt/pkg/safepath"
)

// MockIsolationResult is a mock of IsolationResult interface.
type MockIsolationResult struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationResultMockRecorder
	isgomock struct{}
}

// MockIsolationResultMockRecorder is the mock recorder for MockIsolationResult.
type MockIsolationResultMockRecorder struct {
	mock *MockIsolationResult
}

// NewMockIsolationResult creates a new mock instance.
func NewMockIsolationResult(ctrl *gomock.Controller) *MockIsolationResult {
	mock := &MockIsolationResult{ctrl: ctrl}
	mock.recorder = &MockIsolationResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationResult) EXPECT() *MockIsolationResultMockRecorder {
	return m.recorder
}

// GetQEMUProcess mocks base method.
func (m *MockIsolationResult) GetQEMUProcess() (ps.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQEMUProcess")
	ret0, _ := ret[0].(ps.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQEMUProcess indicates an expected call of GetQEMUProcess.
func (mr *MockIsolationResultMockRecorder) GetQEMUProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQEMUProcess", reflect.TypeOf((*MockIsolationResult)(nil).GetQEMUProcess))
}

// KvmPitPid mocks base method.
func (m *MockIsolationResult) KvmPitPid() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvmPitPid")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KvmPitPid indicates an expected call of KvmPitPid.
func (mr *MockIsolationResultMockRecorder) KvmPitPid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvmPitPid", reflect.TypeOf((*MockIsolationResult)(nil).KvmPitPid))
}

// MountNamespace mocks base method.
func (m *MockIsolationResult) MountNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// MountNamespace indicates an expected call of MountNamespace.
func (mr *MockIsolationResultMockRecorder) MountNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountNamespace", reflect.TypeOf((*MockIsolationResult)(nil).MountNamespace))
}

// MountRoot mocks base method.
func (m *MockIsolationResult) MountRoot() (*safepath.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountRoot")
	ret0, _ := ret[0].(*safepath.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MountRoot indicates an expected call of MountRoot.
func (mr *MockIsolationResultMockRecorder) MountRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountRoot", reflect.TypeOf((*MockIsolationResult)(nil).MountRoot))
}

// Mounts mocks base method.
func (m *MockIsolationResult) Mounts(arg0 mountinfo.FilterFunc) ([]*mountinfo.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mounts", arg0)
	ret0, _ := ret[0].([]*mountinfo.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mounts indicates an expected call of Mounts.
func (mr *MockIsolationResultMockRecorder) Mounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mounts", reflect.TypeOf((*MockIsolationResult)(nil).Mounts), arg0)
}

// PIDNamespace mocks base method.
func (m *MockIsolationResult) PIDNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PIDNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// PIDNamespace indicates an expected call of PIDNamespace.
func (mr *MockIsolationResultMockRecorder) PIDNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PIDNamespace", reflect.TypeOf((*MockIsolationResult)(nil).PIDNamespace))
}

// PPid mocks base method.
func (m *MockIsolationResult) PPid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PPid")
	ret0, _ := ret[0].(int)
	return ret0
}

// PPid indicates an expected call of PPid.
func (mr *MockIsolationResultMockRecorder) PPid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PPid", reflect.TypeOf((*MockIsolationResult)(nil).PPid))
}

// Pid mocks base method.
func (m *MockIsolationResult) Pid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockIsolationResultMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockIsolationResult)(nil).Pid))
}
