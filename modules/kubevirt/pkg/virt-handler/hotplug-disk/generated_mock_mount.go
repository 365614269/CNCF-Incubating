// Code generated by MockGen. DO NOT EDIT.
// Source: mount.go
//
// Generated by this command:
//
//	mockgen -source mount.go -package=hotplug_volume -destination=generated_mock_mount.go
//

// Package hotplug_volume is a generated GoMock package.
package hotplug_volume

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
	v1 "kubevirt.io/api/core/v1"

	cgroup "kubevirt.io/kubevirt/pkg/virt-handler/cgroup"
)

// MockVolumeMounter is a mock of VolumeMounter interface.
type MockVolumeMounter struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeMounterMockRecorder
	isgomock struct{}
}

// MockVolumeMounterMockRecorder is the mock recorder for MockVolumeMounter.
type MockVolumeMounterMockRecorder struct {
	mock *MockVolumeMounter
}

// NewMockVolumeMounter creates a new mock instance.
func NewMockVolumeMounter(ctrl *gomock.Controller) *MockVolumeMounter {
	mock := &MockVolumeMounter{ctrl: ctrl}
	mock.recorder = &MockVolumeMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeMounter) EXPECT() *MockVolumeMounterMockRecorder {
	return m.recorder
}

// IsMounted mocks base method.
func (m *MockVolumeMounter) IsMounted(vmi *v1.VirtualMachineInstance, volume string, sourceUID types.UID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMounted", vmi, volume, sourceUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMounted indicates an expected call of IsMounted.
func (mr *MockVolumeMounterMockRecorder) IsMounted(vmi, volume, sourceUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMounted", reflect.TypeOf((*MockVolumeMounter)(nil).IsMounted), vmi, volume, sourceUID)
}

// Mount mocks base method.
func (m *MockVolumeMounter) Mount(vmi *v1.VirtualMachineInstance, cgroupManager cgroup.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", vmi, cgroupManager)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockVolumeMounterMockRecorder) Mount(vmi, cgroupManager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockVolumeMounter)(nil).Mount), vmi, cgroupManager)
}

// MountFromPod mocks base method.
func (m *MockVolumeMounter) MountFromPod(vmi *v1.VirtualMachineInstance, sourceUID types.UID, cgroupManager cgroup.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountFromPod", vmi, sourceUID, cgroupManager)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountFromPod indicates an expected call of MountFromPod.
func (mr *MockVolumeMounterMockRecorder) MountFromPod(vmi, sourceUID, cgroupManager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountFromPod", reflect.TypeOf((*MockVolumeMounter)(nil).MountFromPod), vmi, sourceUID, cgroupManager)
}

// Unmount mocks base method.
func (m *MockVolumeMounter) Unmount(vmi *v1.VirtualMachineInstance, cgroupManager cgroup.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", vmi, cgroupManager)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockVolumeMounterMockRecorder) Unmount(vmi, cgroupManager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockVolumeMounter)(nil).Unmount), vmi, cgroupManager)
}

// UnmountAll mocks base method.
func (m *MockVolumeMounter) UnmountAll(vmi *v1.VirtualMachineInstance, cgroupManager cgroup.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountAll", vmi, cgroupManager)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountAll indicates an expected call of UnmountAll.
func (mr *MockVolumeMounterMockRecorder) UnmountAll(vmi, cgroupManager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountAll", reflect.TypeOf((*MockVolumeMounter)(nil).UnmountAll), vmi, cgroupManager)
}
