// Code generated by MockGen. DO NOT EDIT.
// Source: multipath_monitor.go
//
// Generated by this command:
//
//	mockgen -source multipath_monitor.go -package=multipath_monitor -destination=generated_mock_multipath_monitor.go
//

// Package multipath_monitor is a generated GoMock package.
package multipath_monitor

import (
	exec "os/exec"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	safepath "kubevirt.io/kubevirt/pkg/safepath"
)

// Mockmounter is a mock of mounter interface.
type Mockmounter struct {
	ctrl     *gomock.Controller
	recorder *MockmounterMockRecorder
	isgomock struct{}
}

// MockmounterMockRecorder is the mock recorder for Mockmounter.
type MockmounterMockRecorder struct {
	mock *Mockmounter
}

// NewMockmounter creates a new mock instance.
func NewMockmounter(ctrl *gomock.Controller) *Mockmounter {
	mock := &Mockmounter{ctrl: ctrl}
	mock.recorder = &MockmounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmounter) EXPECT() *MockmounterMockRecorder {
	return m.recorder
}

// IsMounted mocks base method.
func (m *Mockmounter) IsMounted(mountPoint *safepath.Path) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMounted", mountPoint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMounted indicates an expected call of IsMounted.
func (mr *MockmounterMockRecorder) IsMounted(mountPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMounted", reflect.TypeOf((*Mockmounter)(nil).IsMounted), mountPoint)
}

// Mount mocks base method.
func (m *Mockmounter) Mount(sourcePath, targetPath *safepath.Path, ro bool) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", sourcePath, targetPath, ro)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockmounterMockRecorder) Mount(sourcePath, targetPath, ro any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*Mockmounter)(nil).Mount), sourcePath, targetPath, ro)
}

// Umount mocks base method.
func (m *Mockmounter) Umount(path *safepath.Path) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Umount", path)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Umount indicates an expected call of Umount.
func (mr *MockmounterMockRecorder) Umount(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Umount", reflect.TypeOf((*Mockmounter)(nil).Umount), path)
}
