// Code generated by MockGen. DO NOT EDIT.
// Source: common.go
//
// Generated by this command:
//
//	mockgen -source common.go -package=device_manager -destination=generated_mock_common.go
//

// Package device_manager is a generated GoMock package.
package device_manager

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceHandler is a mock of DeviceHandler interface.
type MockDeviceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceHandlerMockRecorder
	isgomock struct{}
}

// MockDeviceHandlerMockRecorder is the mock recorder for MockDeviceHandler.
type MockDeviceHandlerMockRecorder struct {
	mock *MockDeviceHandler
}

// NewMockDeviceHandler creates a new mock instance.
func NewMockDeviceHandler(ctrl *gomock.Controller) *MockDeviceHandler {
	mock := &MockDeviceHandler{ctrl: ctrl}
	mock.recorder = &MockDeviceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceHandler) EXPECT() *MockDeviceHandlerMockRecorder {
	return m.recorder
}

// CreateMDEVType mocks base method.
func (m *MockDeviceHandler) CreateMDEVType(mdevType, parentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMDEVType", mdevType, parentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMDEVType indicates an expected call of CreateMDEVType.
func (mr *MockDeviceHandlerMockRecorder) CreateMDEVType(mdevType, parentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMDEVType", reflect.TypeOf((*MockDeviceHandler)(nil).CreateMDEVType), mdevType, parentID)
}

// GetDeviceDriver mocks base method.
func (m *MockDeviceHandler) GetDeviceDriver(basepath, pciAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDriver", basepath, pciAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDriver indicates an expected call of GetDeviceDriver.
func (mr *MockDeviceHandlerMockRecorder) GetDeviceDriver(basepath, pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDriver", reflect.TypeOf((*MockDeviceHandler)(nil).GetDeviceDriver), basepath, pciAddress)
}

// GetDeviceIOMMUGroup mocks base method.
func (m *MockDeviceHandler) GetDeviceIOMMUGroup(basepath, pciAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceIOMMUGroup", basepath, pciAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceIOMMUGroup indicates an expected call of GetDeviceIOMMUGroup.
func (mr *MockDeviceHandlerMockRecorder) GetDeviceIOMMUGroup(basepath, pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceIOMMUGroup", reflect.TypeOf((*MockDeviceHandler)(nil).GetDeviceIOMMUGroup), basepath, pciAddress)
}

// GetDeviceNumaNode mocks base method.
func (m *MockDeviceHandler) GetDeviceNumaNode(basepath, pciAddress string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceNumaNode", basepath, pciAddress)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDeviceNumaNode indicates an expected call of GetDeviceNumaNode.
func (mr *MockDeviceHandlerMockRecorder) GetDeviceNumaNode(basepath, pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceNumaNode", reflect.TypeOf((*MockDeviceHandler)(nil).GetDeviceNumaNode), basepath, pciAddress)
}

// GetDevicePCIID mocks base method.
func (m *MockDeviceHandler) GetDevicePCIID(basepath, pciAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePCIID", basepath, pciAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePCIID indicates an expected call of GetDevicePCIID.
func (mr *MockDeviceHandlerMockRecorder) GetDevicePCIID(basepath, pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePCIID", reflect.TypeOf((*MockDeviceHandler)(nil).GetDevicePCIID), basepath, pciAddress)
}

// GetMdevParentPCIAddr mocks base method.
func (m *MockDeviceHandler) GetMdevParentPCIAddr(mdevUUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMdevParentPCIAddr", mdevUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMdevParentPCIAddr indicates an expected call of GetMdevParentPCIAddr.
func (mr *MockDeviceHandlerMockRecorder) GetMdevParentPCIAddr(mdevUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMdevParentPCIAddr", reflect.TypeOf((*MockDeviceHandler)(nil).GetMdevParentPCIAddr), mdevUUID)
}

// ReadMDEVAvailableInstances mocks base method.
func (m *MockDeviceHandler) ReadMDEVAvailableInstances(mdevType, parentID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMDEVAvailableInstances", mdevType, parentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMDEVAvailableInstances indicates an expected call of ReadMDEVAvailableInstances.
func (mr *MockDeviceHandlerMockRecorder) ReadMDEVAvailableInstances(mdevType, parentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMDEVAvailableInstances", reflect.TypeOf((*MockDeviceHandler)(nil).ReadMDEVAvailableInstances), mdevType, parentID)
}

// RemoveMDEVType mocks base method.
func (m *MockDeviceHandler) RemoveMDEVType(mdevUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMDEVType", mdevUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMDEVType indicates an expected call of RemoveMDEVType.
func (mr *MockDeviceHandlerMockRecorder) RemoveMDEVType(mdevUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMDEVType", reflect.TypeOf((*MockDeviceHandler)(nil).RemoveMDEVType), mdevUUID)
}
