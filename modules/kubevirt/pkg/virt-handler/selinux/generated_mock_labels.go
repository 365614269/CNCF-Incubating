// Code generated by MockGen. DO NOT EDIT.
// Source: labels.go
//
// Generated by this command:
//
//	mockgen -source labels.go -package=selinux -destination=generated_mock_labels.go
//

// Package selinux is a generated GoMock package.
package selinux

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSELinux is a mock of SELinux interface.
type MockSELinux struct {
	ctrl     *gomock.Controller
	recorder *MockSELinuxMockRecorder
	isgomock struct{}
}

// MockSELinuxMockRecorder is the mock recorder for MockSELinux.
type MockSELinuxMockRecorder struct {
	mock *MockSELinux
}

// NewMockSELinux creates a new mock instance.
func NewMockSELinux(ctrl *gomock.Controller) *MockSELinux {
	mock := &MockSELinux{ctrl: ctrl}
	mock.recorder = &MockSELinuxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSELinux) EXPECT() *MockSELinuxMockRecorder {
	return m.recorder
}

// IsPermissive mocks base method.
func (m *MockSELinux) IsPermissive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPermissive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPermissive indicates an expected call of IsPermissive.
func (mr *MockSELinuxMockRecorder) IsPermissive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPermissive", reflect.TypeOf((*MockSELinux)(nil).IsPermissive))
}

// Mode mocks base method.
func (m *MockSELinux) Mode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(string)
	return ret0
}

// Mode indicates an expected call of Mode.
func (mr *MockSELinuxMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockSELinux)(nil).Mode))
}
