// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go
//
// Generated by this command:
//
//	mockgen -source executor.go -package=selinux -destination=generated_mock_executor.go
//

// Package selinux is a generated GoMock package.
package selinux

import (
	exec "os/exec"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// CloseOnExec mocks base method.
func (m *MockExecutor) CloseOnExec(fd int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseOnExec", fd)
}

// CloseOnExec indicates an expected call of CloseOnExec.
func (mr *MockExecutorMockRecorder) CloseOnExec(fd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseOnExec", reflect.TypeOf((*MockExecutor)(nil).CloseOnExec), fd)
}

// FileLabel mocks base method.
func (m *MockExecutor) FileLabel(filepath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileLabel", filepath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileLabel indicates an expected call of FileLabel.
func (mr *MockExecutorMockRecorder) FileLabel(filepath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileLabel", reflect.TypeOf((*MockExecutor)(nil).FileLabel), filepath)
}

// LockOSThread mocks base method.
func (m *MockExecutor) LockOSThread() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LockOSThread")
}

// LockOSThread indicates an expected call of LockOSThread.
func (mr *MockExecutorMockRecorder) LockOSThread() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockOSThread", reflect.TypeOf((*MockExecutor)(nil).LockOSThread))
}

// NewSELinux mocks base method.
func (m *MockExecutor) NewSELinux() (SELinux, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSELinux")
	ret0, _ := ret[0].(SELinux)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewSELinux indicates an expected call of NewSELinux.
func (mr *MockExecutorMockRecorder) NewSELinux() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSELinux", reflect.TypeOf((*MockExecutor)(nil).NewSELinux))
}

// Run mocks base method.
func (m *MockExecutor) Run(cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockExecutorMockRecorder) Run(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExecutor)(nil).Run), cmd)
}

// SetExecLabel mocks base method.
func (m *MockExecutor) SetExecLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExecLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExecLabel indicates an expected call of SetExecLabel.
func (mr *MockExecutorMockRecorder) SetExecLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExecLabel", reflect.TypeOf((*MockExecutor)(nil).SetExecLabel), label)
}

// UnlockOSThread mocks base method.
func (m *MockExecutor) UnlockOSThread() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnlockOSThread")
}

// UnlockOSThread indicates an expected call of UnlockOSThread.
func (mr *MockExecutorMockRecorder) UnlockOSThread() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockOSThread", reflect.TypeOf((*MockExecutor)(nil).UnlockOSThread))
}
