// Code generated by MockGen. DO NOT EDIT.
// Source: configurator.go
//
// Generated by this command:
//
//	mockgen -source configurator.go -package=dhcp -destination=generated_mock_configurator.go
//

// Package dhcp is a generated GoMock package.
package dhcp

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "kubevirt.io/api/core/v1"

	cache "kubevirt.io/kubevirt/pkg/network/cache"
)

// MockConfigurator is a mock of Configurator interface.
type MockConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorMockRecorder
	isgomock struct{}
}

// MockConfiguratorMockRecorder is the mock recorder for MockConfigurator.
type MockConfiguratorMockRecorder struct {
	mock *MockConfigurator
}

// NewMockConfigurator creates a new mock instance.
func NewMockConfigurator(ctrl *gomock.Controller) *MockConfigurator {
	mock := &MockConfigurator{ctrl: ctrl}
	mock.recorder = &MockConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurator) EXPECT() *MockConfiguratorMockRecorder {
	return m.recorder
}

// EnsureDHCPServerStarted mocks base method.
func (m *MockConfigurator) EnsureDHCPServerStarted(podInterfaceName string, dhcpConfig cache.DHCPConfig, dhcpOptions *v1.DHCPOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDHCPServerStarted", podInterfaceName, dhcpConfig, dhcpOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDHCPServerStarted indicates an expected call of EnsureDHCPServerStarted.
func (mr *MockConfiguratorMockRecorder) EnsureDHCPServerStarted(podInterfaceName, dhcpConfig, dhcpOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDHCPServerStarted", reflect.TypeOf((*MockConfigurator)(nil).EnsureDHCPServerStarted), podInterfaceName, dhcpConfig, dhcpOptions)
}

// Generate mocks base method.
func (m *MockConfigurator) Generate() (*cache.DHCPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(*cache.DHCPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockConfiguratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockConfigurator)(nil).Generate))
}

// MockConfigGenerator is a mock of ConfigGenerator interface.
type MockConfigGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGeneratorMockRecorder
	isgomock struct{}
}

// MockConfigGeneratorMockRecorder is the mock recorder for MockConfigGenerator.
type MockConfigGeneratorMockRecorder struct {
	mock *MockConfigGenerator
}

// NewMockConfigGenerator creates a new mock instance.
func NewMockConfigGenerator(ctrl *gomock.Controller) *MockConfigGenerator {
	mock := &MockConfigGenerator{ctrl: ctrl}
	mock.recorder = &MockConfigGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGenerator) EXPECT() *MockConfigGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockConfigGenerator) Generate() (*cache.DHCPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(*cache.DHCPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockConfigGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockConfigGenerator)(nil).Generate))
}
