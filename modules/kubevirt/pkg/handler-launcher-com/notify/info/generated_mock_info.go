// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handler-launcher-com/notify/info/info.pb.go
//
// Generated by this command:
//
//	mockgen -source pkg/handler-launcher-com/notify/info/info.pb.go -package=info -destination=pkg/handler-launcher-com/notify/info/generated_mock_info.go
//

// Package info is a generated GoMock package.
package info

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockNotifyInfoClient is a mock of NotifyInfoClient interface.
type MockNotifyInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyInfoClientMockRecorder
	isgomock struct{}
}

// MockNotifyInfoClientMockRecorder is the mock recorder for MockNotifyInfoClient.
type MockNotifyInfoClientMockRecorder struct {
	mock *MockNotifyInfoClient
}

// NewMockNotifyInfoClient creates a new mock instance.
func NewMockNotifyInfoClient(ctrl *gomock.Controller) *MockNotifyInfoClient {
	mock := &MockNotifyInfoClient{ctrl: ctrl}
	mock.recorder = &MockNotifyInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyInfoClient) EXPECT() *MockNotifyInfoClientMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockNotifyInfoClient) Info(ctx context.Context, in *NotifyInfoRequest, opts ...grpc.CallOption) (*NotifyInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*NotifyInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockNotifyInfoClientMockRecorder) Info(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockNotifyInfoClient)(nil).Info), varargs...)
}

// MockNotifyInfoServer is a mock of NotifyInfoServer interface.
type MockNotifyInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyInfoServerMockRecorder
	isgomock struct{}
}

// MockNotifyInfoServerMockRecorder is the mock recorder for MockNotifyInfoServer.
type MockNotifyInfoServerMockRecorder struct {
	mock *MockNotifyInfoServer
}

// NewMockNotifyInfoServer creates a new mock instance.
func NewMockNotifyInfoServer(ctrl *gomock.Controller) *MockNotifyInfoServer {
	mock := &MockNotifyInfoServer{ctrl: ctrl}
	mock.recorder = &MockNotifyInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyInfoServer) EXPECT() *MockNotifyInfoServerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockNotifyInfoServer) Info(arg0 context.Context, arg1 *NotifyInfoRequest) (*NotifyInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*NotifyInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockNotifyInfoServerMockRecorder) Info(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockNotifyInfoServer)(nil).Info), arg0, arg1)
}
