// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handler-launcher-com/cmd/info/info.pb.go
//
// Generated by this command:
//
//	mockgen -source pkg/handler-launcher-com/cmd/info/info.pb.go -package=info -destination=pkg/handler-launcher-com/cmd/info/generated_mock_info.go
//

// Package info is a generated GoMock package.
package info

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockCmdInfoClient is a mock of CmdInfoClient interface.
type MockCmdInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockCmdInfoClientMockRecorder
	isgomock struct{}
}

// MockCmdInfoClientMockRecorder is the mock recorder for MockCmdInfoClient.
type MockCmdInfoClientMockRecorder struct {
	mock *MockCmdInfoClient
}

// NewMockCmdInfoClient creates a new mock instance.
func NewMockCmdInfoClient(ctrl *gomock.Controller) *MockCmdInfoClient {
	mock := &MockCmdInfoClient{ctrl: ctrl}
	mock.recorder = &MockCmdInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdInfoClient) EXPECT() *MockCmdInfoClientMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockCmdInfoClient) Info(ctx context.Context, in *CmdInfoRequest, opts ...grpc.CallOption) (*CmdInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*CmdInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockCmdInfoClientMockRecorder) Info(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCmdInfoClient)(nil).Info), varargs...)
}

// MockCmdInfoServer is a mock of CmdInfoServer interface.
type MockCmdInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockCmdInfoServerMockRecorder
	isgomock struct{}
}

// MockCmdInfoServerMockRecorder is the mock recorder for MockCmdInfoServer.
type MockCmdInfoServerMockRecorder struct {
	mock *MockCmdInfoServer
}

// NewMockCmdInfoServer creates a new mock instance.
func NewMockCmdInfoServer(ctrl *gomock.Controller) *MockCmdInfoServer {
	mock := &MockCmdInfoServer{ctrl: ctrl}
	mock.recorder = &MockCmdInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdInfoServer) EXPECT() *MockCmdInfoServerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockCmdInfoServer) Info(arg0 context.Context, arg1 *CmdInfoRequest) (*CmdInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*CmdInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockCmdInfoServerMockRecorder) Info(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCmdInfoServer)(nil).Info), arg0, arg1)
}
