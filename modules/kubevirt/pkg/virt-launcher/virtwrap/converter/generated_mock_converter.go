// Code generated by MockGen. DO NOT EDIT.
// Source: converter.go
//
// Generated by this command:
//
//	mockgen -source converter.go -package=converter -destination=generated_mock_converter.go
//

// Package converter is a generated GoMock package.
package converter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDirectIOChecker is a mock of DirectIOChecker interface.
type MockDirectIOChecker struct {
	ctrl     *gomock.Controller
	recorder *MockDirectIOCheckerMockRecorder
	isgomock struct{}
}

// MockDirectIOCheckerMockRecorder is the mock recorder for MockDirectIOChecker.
type MockDirectIOCheckerMockRecorder struct {
	mock *MockDirectIOChecker
}

// NewMockDirectIOChecker creates a new mock instance.
func NewMockDirectIOChecker(ctrl *gomock.Controller) *MockDirectIOChecker {
	mock := &MockDirectIOChecker{ctrl: ctrl}
	mock.recorder = &MockDirectIOCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectIOChecker) EXPECT() *MockDirectIOCheckerMockRecorder {
	return m.recorder
}

// CheckBlockDevice mocks base method.
func (m *MockDirectIOChecker) CheckBlockDevice(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBlockDevice", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBlockDevice indicates an expected call of CheckBlockDevice.
func (mr *MockDirectIOCheckerMockRecorder) CheckBlockDevice(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBlockDevice", reflect.TypeOf((*MockDirectIOChecker)(nil).CheckBlockDevice), path)
}

// CheckFile mocks base method.
func (m *MockDirectIOChecker) CheckFile(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFile", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFile indicates an expected call of CheckFile.
func (mr *MockDirectIOCheckerMockRecorder) CheckFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFile", reflect.TypeOf((*MockDirectIOChecker)(nil).CheckFile), path)
}
