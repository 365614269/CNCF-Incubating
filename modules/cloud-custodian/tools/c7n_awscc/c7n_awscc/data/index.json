{
  "resources": {
    "awscc.accessanalyzer_analyzer": "c7n_awscc.resources.accessanalyzer_analyzer.AccessanalyzerAnalyzer",
    "awscc.acmpca_certificate": "c7n_awscc.resources.acmpca_certificate.AcmpcaCertificate",
    "awscc.acmpca_certificateauthority": "c7n_awscc.resources.acmpca_certificateauthority.AcmpcaCertificateauthority",
    "awscc.acmpca_certificateauthorityactivation": "c7n_awscc.resources.acmpca_certificateauthorityactivation.AcmpcaCertificateauthorityactivation",
    "awscc.amplify_app": "c7n_awscc.resources.amplify_app.AmplifyApp",
    "awscc.amplify_branch": "c7n_awscc.resources.amplify_branch.AmplifyBranch",
    "awscc.amplify_domain": "c7n_awscc.resources.amplify_domain.AmplifyDomain",
    "awscc.amplifyuibuilder_component": "c7n_awscc.resources.amplifyuibuilder_component.AmplifyuibuilderComponent",
    "awscc.amplifyuibuilder_theme": "c7n_awscc.resources.amplifyuibuilder_theme.AmplifyuibuilderTheme",
    "awscc.apigateway_account": "c7n_awscc.resources.apigateway_account.ApigatewayAccount",
    "awscc.apigateway_apikey": "c7n_awscc.resources.apigateway_apikey.ApigatewayApikey",
    "awscc.apigateway_authorizer": "c7n_awscc.resources.apigateway_authorizer.ApigatewayAuthorizer",
    "awscc.apigateway_basepathmapping": "c7n_awscc.resources.apigateway_basepathmapping.ApigatewayBasepathmapping",
    "awscc.apigateway_clientcertificate": "c7n_awscc.resources.apigateway_clientcertificate.ApigatewayClientcertificate",
    "awscc.apigateway_deployment": "c7n_awscc.resources.apigateway_deployment.ApigatewayDeployment",
    "awscc.apigateway_documentationversion": "c7n_awscc.resources.apigateway_documentationversion.ApigatewayDocumentationversion",
    "awscc.apigateway_domainname": "c7n_awscc.resources.apigateway_domainname.ApigatewayDomainname",
    "awscc.apigateway_method": "c7n_awscc.resources.apigateway_method.ApigatewayMethod",
    "awscc.apigateway_model": "c7n_awscc.resources.apigateway_model.ApigatewayModel",
    "awscc.apigateway_requestvalidator": "c7n_awscc.resources.apigateway_requestvalidator.ApigatewayRequestvalidator",
    "awscc.apigateway_stage": "c7n_awscc.resources.apigateway_stage.ApigatewayStage",
    "awscc.apigateway_usageplan": "c7n_awscc.resources.apigateway_usageplan.ApigatewayUsageplan",
    "awscc.appflow_connectorprofile": "c7n_awscc.resources.appflow_connectorprofile.AppflowConnectorprofile",
    "awscc.appflow_flow": "c7n_awscc.resources.appflow_flow.AppflowFlow",
    "awscc.appintegrations_eventintegration": "c7n_awscc.resources.appintegrations_eventintegration.AppintegrationsEventintegration",
    "awscc.applicationinsights_application": "c7n_awscc.resources.applicationinsights_application.ApplicationinsightsApplication",
    "awscc.apprunner_service": "c7n_awscc.resources.apprunner_service.ApprunnerService",
    "awscc.appstream_application": "c7n_awscc.resources.appstream_application.AppstreamApplication",
    "awscc.appstream_entitlement": "c7n_awscc.resources.appstream_entitlement.AppstreamEntitlement",
    "awscc.appsync_domainname": "c7n_awscc.resources.appsync_domainname.AppsyncDomainname",
    "awscc.appsync_domainnameapiassociation": "c7n_awscc.resources.appsync_domainnameapiassociation.AppsyncDomainnameapiassociation",
    "awscc.aps_rulegroupsnamespace": "c7n_awscc.resources.aps_rulegroupsnamespace.ApsRulegroupsnamespace",
    "awscc.aps_workspace": "c7n_awscc.resources.aps_workspace.ApsWorkspace",
    "awscc.athena_datacatalog": "c7n_awscc.resources.athena_datacatalog.AthenaDatacatalog",
    "awscc.athena_namedquery": "c7n_awscc.resources.athena_namedquery.AthenaNamedquery",
    "awscc.athena_preparedstatement": "c7n_awscc.resources.athena_preparedstatement.AthenaPreparedstatement",
    "awscc.athena_workgroup": "c7n_awscc.resources.athena_workgroup.AthenaWorkgroup",
    "awscc.auditmanager_assessment": "c7n_awscc.resources.auditmanager_assessment.AuditmanagerAssessment",
    "awscc.autoscaling_lifecyclehook": "c7n_awscc.resources.autoscaling_lifecyclehook.AutoscalingLifecyclehook",
    "awscc.autoscaling_warmpool": "c7n_awscc.resources.autoscaling_warmpool.AutoscalingWarmpool",
    "awscc.backup_backupplan": "c7n_awscc.resources.backup_backupplan.BackupBackupplan",
    "awscc.backup_backupvault": "c7n_awscc.resources.backup_backupvault.BackupBackupvault",
    "awscc.backup_framework": "c7n_awscc.resources.backup_framework.BackupFramework",
    "awscc.backup_reportplan": "c7n_awscc.resources.backup_reportplan.BackupReportplan",
    "awscc.batch_schedulingpolicy": "c7n_awscc.resources.batch_schedulingpolicy.BatchSchedulingpolicy",
    "awscc.budgets_budgetsaction": "c7n_awscc.resources.budgets_budgetsaction.BudgetsBudgetsaction",
    "awscc.cassandra_keyspace": "c7n_awscc.resources.cassandra_keyspace.CassandraKeyspace",
    "awscc.cassandra_table": "c7n_awscc.resources.cassandra_table.CassandraTable",
    "awscc.ce_anomalymonitor": "c7n_awscc.resources.ce_anomalymonitor.CeAnomalymonitor",
    "awscc.ce_anomalysubscription": "c7n_awscc.resources.ce_anomalysubscription.CeAnomalysubscription",
    "awscc.ce_costcategory": "c7n_awscc.resources.ce_costcategory.CeCostcategory",
    "awscc.certificatemanager_account": "c7n_awscc.resources.certificatemanager_account.CertificatemanagerAccount",
    "awscc.chatbot_slackchannelconfiguration": "c7n_awscc.resources.chatbot_slackchannelconfiguration.ChatbotSlackchannelconfiguration",
    "awscc.cloudformation_resourcedefaultversion": "c7n_awscc.resources.cloudformation_resourcedefaultversion.CloudformationResourcedefaultversion",
    "awscc.cloudformation_stackset": "c7n_awscc.resources.cloudformation_stackset.CloudformationStackset",
    "awscc.cloudformation_typeactivation": "c7n_awscc.resources.cloudformation_typeactivation.CloudformationTypeactivation",
    "awscc.cloudfront_cachepolicy": "c7n_awscc.resources.cloudfront_cachepolicy.CloudfrontCachepolicy",
    "awscc.cloudfront_cloudfrontoriginaccessidentity": "c7n_awscc.resources.cloudfront_cloudfrontoriginaccessidentity.CloudfrontCloudfrontoriginaccessidentity",
    "awscc.cloudfront_distribution": "c7n_awscc.resources.cloudfront_distribution.CloudfrontDistribution",
    "awscc.cloudfront_function": "c7n_awscc.resources.cloudfront_function.CloudfrontFunction",
    "awscc.cloudfront_keygroup": "c7n_awscc.resources.cloudfront_keygroup.CloudfrontKeygroup",
    "awscc.cloudfront_originrequestpolicy": "c7n_awscc.resources.cloudfront_originrequestpolicy.CloudfrontOriginrequestpolicy",
    "awscc.cloudfront_publickey": "c7n_awscc.resources.cloudfront_publickey.CloudfrontPublickey",
    "awscc.cloudfront_realtimelogconfig": "c7n_awscc.resources.cloudfront_realtimelogconfig.CloudfrontRealtimelogconfig",
    "awscc.cloudfront_responseheaderspolicy": "c7n_awscc.resources.cloudfront_responseheaderspolicy.CloudfrontResponseheaderspolicy",
    "awscc.cloudtrail_trail": "c7n_awscc.resources.cloudtrail_trail.CloudtrailTrail",
    "awscc.cloudwatch_compositealarm": "c7n_awscc.resources.cloudwatch_compositealarm.CloudwatchCompositealarm",
    "awscc.cloudwatch_metricstream": "c7n_awscc.resources.cloudwatch_metricstream.CloudwatchMetricstream",
    "awscc.codeartifact_domain": "c7n_awscc.resources.codeartifact_domain.CodeartifactDomain",
    "awscc.codeartifact_repository": "c7n_awscc.resources.codeartifact_repository.CodeartifactRepository",
    "awscc.codeguruprofiler_profilinggroup": "c7n_awscc.resources.codeguruprofiler_profilinggroup.CodeguruprofilerProfilinggroup",
    "awscc.codestarconnections_connection": "c7n_awscc.resources.codestarconnections_connection.CodestarconnectionsConnection",
    "awscc.codestarnotifications_notificationrule": "c7n_awscc.resources.codestarnotifications_notificationrule.CodestarnotificationsNotificationrule",
    "awscc.config_aggregationauthorization": "c7n_awscc.resources.config_aggregationauthorization.ConfigAggregationauthorization",
    "awscc.config_configurationaggregator": "c7n_awscc.resources.config_configurationaggregator.ConfigConfigurationaggregator",
    "awscc.config_conformancepack": "c7n_awscc.resources.config_conformancepack.ConfigConformancepack",
    "awscc.config_organizationconformancepack": "c7n_awscc.resources.config_organizationconformancepack.ConfigOrganizationconformancepack",
    "awscc.config_storedquery": "c7n_awscc.resources.config_storedquery.ConfigStoredquery",
    "awscc.connect_contactflow": "c7n_awscc.resources.connect_contactflow.ConnectContactflow",
    "awscc.connect_contactflowmodule": "c7n_awscc.resources.connect_contactflowmodule.ConnectContactflowmodule",
    "awscc.connect_hoursofoperation": "c7n_awscc.resources.connect_hoursofoperation.ConnectHoursofoperation",
    "awscc.connect_quickconnect": "c7n_awscc.resources.connect_quickconnect.ConnectQuickconnect",
    "awscc.connect_user": "c7n_awscc.resources.connect_user.ConnectUser",
    "awscc.connect_userhierarchygroup": "c7n_awscc.resources.connect_userhierarchygroup.ConnectUserhierarchygroup",
    "awscc.cur_reportdefinition": "c7n_awscc.resources.cur_reportdefinition.CurReportdefinition",
    "awscc.customerprofiles_domain": "c7n_awscc.resources.customerprofiles_domain.CustomerprofilesDomain",
    "awscc.customerprofiles_integration": "c7n_awscc.resources.customerprofiles_integration.CustomerprofilesIntegration",
    "awscc.customerprofiles_objecttype": "c7n_awscc.resources.customerprofiles_objecttype.CustomerprofilesObjecttype",
    "awscc.databrew_dataset": "c7n_awscc.resources.databrew_dataset.DatabrewDataset",
    "awscc.databrew_job": "c7n_awscc.resources.databrew_job.DatabrewJob",
    "awscc.databrew_project": "c7n_awscc.resources.databrew_project.DatabrewProject",
    "awscc.databrew_recipe": "c7n_awscc.resources.databrew_recipe.DatabrewRecipe",
    "awscc.databrew_ruleset": "c7n_awscc.resources.databrew_ruleset.DatabrewRuleset",
    "awscc.databrew_schedule": "c7n_awscc.resources.databrew_schedule.DatabrewSchedule",
    "awscc.datasync_agent": "c7n_awscc.resources.datasync_agent.DatasyncAgent",
    "awscc.datasync_locationefs": "c7n_awscc.resources.datasync_locationefs.DatasyncLocationefs",
    "awscc.datasync_locationfsxwindows": "c7n_awscc.resources.datasync_locationfsxwindows.DatasyncLocationfsxwindows",
    "awscc.datasync_locationhdfs": "c7n_awscc.resources.datasync_locationhdfs.DatasyncLocationhdfs",
    "awscc.datasync_locationnfs": "c7n_awscc.resources.datasync_locationnfs.DatasyncLocationnfs",
    "awscc.datasync_locationobjectstorage": "c7n_awscc.resources.datasync_locationobjectstorage.DatasyncLocationobjectstorage",
    "awscc.datasync_locations3": "c7n_awscc.resources.datasync_locations3.DatasyncLocations3",
    "awscc.datasync_locationsmb": "c7n_awscc.resources.datasync_locationsmb.DatasyncLocationsmb",
    "awscc.datasync_task": "c7n_awscc.resources.datasync_task.DatasyncTask",
    "awscc.detective_graph": "c7n_awscc.resources.detective_graph.DetectiveGraph",
    "awscc.detective_memberinvitation": "c7n_awscc.resources.detective_memberinvitation.DetectiveMemberinvitation",
    "awscc.devopsguru_resourcecollection": "c7n_awscc.resources.devopsguru_resourcecollection.DevopsguruResourcecollection",
    "awscc.dynamodb_globaltable": "c7n_awscc.resources.dynamodb_globaltable.DynamodbGlobaltable",
    "awscc.ec2_capacityreservationfleet": "c7n_awscc.resources.ec2_capacityreservationfleet.Ec2Capacityreservationfleet",
    "awscc.ec2_carriergateway": "c7n_awscc.resources.ec2_carriergateway.Ec2Carriergateway",
    "awscc.ec2_dhcpoptions": "c7n_awscc.resources.ec2_dhcpoptions.Ec2Dhcpoptions",
    "awscc.ec2_ec2fleet": "c7n_awscc.resources.ec2_ec2fleet.Ec2Ec2Fleet",
    "awscc.ec2_flowlog": "c7n_awscc.resources.ec2_flowlog.Ec2Flowlog",
    "awscc.ec2_gatewayroutetableassociation": "c7n_awscc.resources.ec2_gatewayroutetableassociation.Ec2Gatewayroutetableassociation",
    "awscc.ec2_host": "c7n_awscc.resources.ec2_host.Ec2Host",
    "awscc.ec2_internetgateway": "c7n_awscc.resources.ec2_internetgateway.Ec2Internetgateway",
    "awscc.ec2_ipam": "c7n_awscc.resources.ec2_ipam.Ec2Ipam",
    "awscc.ec2_ipampool": "c7n_awscc.resources.ec2_ipampool.Ec2Ipampool",
    "awscc.ec2_ipamscope": "c7n_awscc.resources.ec2_ipamscope.Ec2Ipamscope",
    "awscc.ec2_localgatewayroutetablevpcassociation": "c7n_awscc.resources.ec2_localgatewayroutetablevpcassociation.Ec2Localgatewayroutetablevpcassociation",
    "awscc.ec2_networkacl": "c7n_awscc.resources.ec2_networkacl.Ec2Networkacl",
    "awscc.ec2_networkinsightsaccessscope": "c7n_awscc.resources.ec2_networkinsightsaccessscope.Ec2Networkinsightsaccessscope",
    "awscc.ec2_networkinsightsaccessscopeanalysis": "c7n_awscc.resources.ec2_networkinsightsaccessscopeanalysis.Ec2Networkinsightsaccessscopeanalysis",
    "awscc.ec2_networkinsightsanalysis": "c7n_awscc.resources.ec2_networkinsightsanalysis.Ec2Networkinsightsanalysis",
    "awscc.ec2_networkinsightspath": "c7n_awscc.resources.ec2_networkinsightspath.Ec2Networkinsightspath",
    "awscc.ec2_networkinterface": "c7n_awscc.resources.ec2_networkinterface.Ec2Networkinterface",
    "awscc.ec2_prefixlist": "c7n_awscc.resources.ec2_prefixlist.Ec2Prefixlist",
    "awscc.ec2_routetable": "c7n_awscc.resources.ec2_routetable.Ec2Routetable",
    "awscc.ec2_spotfleet": "c7n_awscc.resources.ec2_spotfleet.Ec2Spotfleet",
    "awscc.ec2_subnet": "c7n_awscc.resources.ec2_subnet.Ec2Subnet",
    "awscc.ec2_transitgateway": "c7n_awscc.resources.ec2_transitgateway.Ec2Transitgateway",
    "awscc.ec2_transitgatewayconnect": "c7n_awscc.resources.ec2_transitgatewayconnect.Ec2Transitgatewayconnect",
    "awscc.ec2_transitgatewaymulticastdomain": "c7n_awscc.resources.ec2_transitgatewaymulticastdomain.Ec2Transitgatewaymulticastdomain",
    "awscc.ec2_transitgatewaypeeringattachment": "c7n_awscc.resources.ec2_transitgatewaypeeringattachment.Ec2Transitgatewaypeeringattachment",
    "awscc.ec2_transitgatewayvpcattachment": "c7n_awscc.resources.ec2_transitgatewayvpcattachment.Ec2Transitgatewayvpcattachment",
    "awscc.ec2_vpc": "c7n_awscc.resources.ec2_vpc.Ec2Vpc",
    "awscc.ec2_vpcdhcpoptionsassociation": "c7n_awscc.resources.ec2_vpcdhcpoptionsassociation.Ec2Vpcdhcpoptionsassociation",
    "awscc.ec2_vpcendpoint": "c7n_awscc.resources.ec2_vpcendpoint.Ec2Vpcendpoint",
    "awscc.ecr_publicrepository": "c7n_awscc.resources.ecr_publicrepository.EcrPublicrepository",
    "awscc.ecr_registrypolicy": "c7n_awscc.resources.ecr_registrypolicy.EcrRegistrypolicy",
    "awscc.ecr_replicationconfiguration": "c7n_awscc.resources.ecr_replicationconfiguration.EcrReplicationconfiguration",
    "awscc.ecr_repository": "c7n_awscc.resources.ecr_repository.EcrRepository",
    "awscc.ecs_capacityprovider": "c7n_awscc.resources.ecs_capacityprovider.EcsCapacityprovider",
    "awscc.ecs_cluster": "c7n_awscc.resources.ecs_cluster.EcsCluster",
    "awscc.ecs_clustercapacityproviderassociations": "c7n_awscc.resources.ecs_clustercapacityproviderassociations.EcsClustercapacityproviderassociations",
    "awscc.ecs_primarytaskset": "c7n_awscc.resources.ecs_primarytaskset.EcsPrimarytaskset",
    "awscc.ecs_service": "c7n_awscc.resources.ecs_service.EcsService",
    "awscc.ecs_taskdefinition": "c7n_awscc.resources.ecs_taskdefinition.EcsTaskdefinition",
    "awscc.ecs_taskset": "c7n_awscc.resources.ecs_taskset.EcsTaskset",
    "awscc.efs_accesspoint": "c7n_awscc.resources.efs_accesspoint.EfsAccesspoint",
    "awscc.efs_filesystem": "c7n_awscc.resources.efs_filesystem.EfsFilesystem",
    "awscc.efs_mounttarget": "c7n_awscc.resources.efs_mounttarget.EfsMounttarget",
    "awscc.eks_addon": "c7n_awscc.resources.eks_addon.EksAddon",
    "awscc.eks_cluster": "c7n_awscc.resources.eks_cluster.EksCluster",
    "awscc.eks_fargateprofile": "c7n_awscc.resources.eks_fargateprofile.EksFargateprofile",
    "awscc.elasticache_globalreplicationgroup": "c7n_awscc.resources.elasticache_globalreplicationgroup.ElasticacheGlobalreplicationgroup",
    "awscc.elasticache_user": "c7n_awscc.resources.elasticache_user.ElasticacheUser",
    "awscc.elasticache_usergroup": "c7n_awscc.resources.elasticache_usergroup.ElasticacheUsergroup",
    "awscc.elasticloadbalancingv2_listener": "c7n_awscc.resources.elasticloadbalancingv2_listener.Elasticloadbalancingv2Listener",
    "awscc.elasticloadbalancingv2_listenerrule": "c7n_awscc.resources.elasticloadbalancingv2_listenerrule.Elasticloadbalancingv2Listenerrule",
    "awscc.emr_studio": "c7n_awscc.resources.emr_studio.EmrStudio",
    "awscc.emr_studiosessionmapping": "c7n_awscc.resources.emr_studiosessionmapping.EmrStudiosessionmapping",
    "awscc.emrcontainers_virtualcluster": "c7n_awscc.resources.emrcontainers_virtualcluster.EmrcontainersVirtualcluster",
    "awscc.events_apidestination": "c7n_awscc.resources.events_apidestination.EventsApidestination",
    "awscc.events_archive": "c7n_awscc.resources.events_archive.EventsArchive",
    "awscc.events_connection": "c7n_awscc.resources.events_connection.EventsConnection",
    "awscc.eventschemas_registrypolicy": "c7n_awscc.resources.eventschemas_registrypolicy.EventschemasRegistrypolicy",
    "awscc.evidently_experiment": "c7n_awscc.resources.evidently_experiment.EvidentlyExperiment",
    "awscc.evidently_feature": "c7n_awscc.resources.evidently_feature.EvidentlyFeature",
    "awscc.evidently_launch": "c7n_awscc.resources.evidently_launch.EvidentlyLaunch",
    "awscc.evidently_project": "c7n_awscc.resources.evidently_project.EvidentlyProject",
    "awscc.finspace_environment": "c7n_awscc.resources.finspace_environment.FinspaceEnvironment",
    "awscc.fis_experimenttemplate": "c7n_awscc.resources.fis_experimenttemplate.FisExperimenttemplate",
    "awscc.fms_notificationchannel": "c7n_awscc.resources.fms_notificationchannel.FmsNotificationchannel",
    "awscc.fms_policy": "c7n_awscc.resources.fms_policy.FmsPolicy",
    "awscc.forecast_datasetgroup": "c7n_awscc.resources.forecast_datasetgroup.ForecastDatasetgroup",
    "awscc.frauddetector_detector": "c7n_awscc.resources.frauddetector_detector.FrauddetectorDetector",
    "awscc.frauddetector_entitytype": "c7n_awscc.resources.frauddetector_entitytype.FrauddetectorEntitytype",
    "awscc.frauddetector_eventtype": "c7n_awscc.resources.frauddetector_eventtype.FrauddetectorEventtype",
    "awscc.frauddetector_label": "c7n_awscc.resources.frauddetector_label.FrauddetectorLabel",
    "awscc.frauddetector_outcome": "c7n_awscc.resources.frauddetector_outcome.FrauddetectorOutcome",
    "awscc.frauddetector_variable": "c7n_awscc.resources.frauddetector_variable.FrauddetectorVariable",
    "awscc.gamelift_alias": "c7n_awscc.resources.gamelift_alias.GameliftAlias",
    "awscc.gamelift_fleet": "c7n_awscc.resources.gamelift_fleet.GameliftFleet",
    "awscc.gamelift_gameservergroup": "c7n_awscc.resources.gamelift_gameservergroup.GameliftGameservergroup",
    "awscc.globalaccelerator_accelerator": "c7n_awscc.resources.globalaccelerator_accelerator.GlobalacceleratorAccelerator",
    "awscc.globalaccelerator_endpointgroup": "c7n_awscc.resources.globalaccelerator_endpointgroup.GlobalacceleratorEndpointgroup",
    "awscc.globalaccelerator_listener": "c7n_awscc.resources.globalaccelerator_listener.GlobalacceleratorListener",
    "awscc.glue_registry": "c7n_awscc.resources.glue_registry.GlueRegistry",
    "awscc.glue_schema": "c7n_awscc.resources.glue_schema.GlueSchema",
    "awscc.greengrassv2_componentversion": "c7n_awscc.resources.greengrassv2_componentversion.Greengrassv2Componentversion",
    "awscc.groundstation_config": "c7n_awscc.resources.groundstation_config.GroundstationConfig",
    "awscc.groundstation_missionprofile": "c7n_awscc.resources.groundstation_missionprofile.GroundstationMissionprofile",
    "awscc.healthlake_fhirdatastore": "c7n_awscc.resources.healthlake_fhirdatastore.HealthlakeFhirdatastore",
    "awscc.iam_oidcprovider": "c7n_awscc.resources.iam_oidcprovider.IamOidcprovider",
    "awscc.iam_role": "c7n_awscc.resources.iam_role.IamRole",
    "awscc.iam_samlprovider": "c7n_awscc.resources.iam_samlprovider.IamSamlprovider",
    "awscc.iam_servercertificate": "c7n_awscc.resources.iam_servercertificate.IamServercertificate",
    "awscc.iam_virtualmfadevice": "c7n_awscc.resources.iam_virtualmfadevice.IamVirtualmfadevice",
    "awscc.imagebuilder_distributionconfiguration": "c7n_awscc.resources.imagebuilder_distributionconfiguration.ImagebuilderDistributionconfiguration",
    "awscc.imagebuilder_image": "c7n_awscc.resources.imagebuilder_image.ImagebuilderImage",
    "awscc.imagebuilder_imagepipeline": "c7n_awscc.resources.imagebuilder_imagepipeline.ImagebuilderImagepipeline",
    "awscc.imagebuilder_infrastructureconfiguration": "c7n_awscc.resources.imagebuilder_infrastructureconfiguration.ImagebuilderInfrastructureconfiguration",
    "awscc.inspectorv2_filter": "c7n_awscc.resources.inspectorv2_filter.Inspectorv2Filter",
    "awscc.iot_accountauditconfiguration": "c7n_awscc.resources.iot_accountauditconfiguration.IotAccountauditconfiguration",
    "awscc.iot_authorizer": "c7n_awscc.resources.iot_authorizer.IotAuthorizer",
    "awscc.iot_certificate": "c7n_awscc.resources.iot_certificate.IotCertificate",
    "awscc.iot_custommetric": "c7n_awscc.resources.iot_custommetric.IotCustommetric",
    "awscc.iot_dimension": "c7n_awscc.resources.iot_dimension.IotDimension",
    "awscc.iot_domainconfiguration": "c7n_awscc.resources.iot_domainconfiguration.IotDomainconfiguration",
    "awscc.iot_fleetmetric": "c7n_awscc.resources.iot_fleetmetric.IotFleetmetric",
    "awscc.iot_logging": "c7n_awscc.resources.iot_logging.IotLogging",
    "awscc.iot_mitigationaction": "c7n_awscc.resources.iot_mitigationaction.IotMitigationaction",
    "awscc.iot_provisioningtemplate": "c7n_awscc.resources.iot_provisioningtemplate.IotProvisioningtemplate",
    "awscc.iot_resourcespecificlogging": "c7n_awscc.resources.iot_resourcespecificlogging.IotResourcespecificlogging",
    "awscc.iot_scheduledaudit": "c7n_awscc.resources.iot_scheduledaudit.IotScheduledaudit",
    "awscc.iot_securityprofile": "c7n_awscc.resources.iot_securityprofile.IotSecurityprofile",
    "awscc.iot_topicrule": "c7n_awscc.resources.iot_topicrule.IotTopicrule",
    "awscc.iot_topicruledestination": "c7n_awscc.resources.iot_topicruledestination.IotTopicruledestination",
    "awscc.iotanalytics_dataset": "c7n_awscc.resources.iotanalytics_dataset.IotanalyticsDataset",
    "awscc.iotanalytics_datastore": "c7n_awscc.resources.iotanalytics_datastore.IotanalyticsDatastore",
    "awscc.iotanalytics_pipeline": "c7n_awscc.resources.iotanalytics_pipeline.IotanalyticsPipeline",
    "awscc.iotcoredeviceadvisor_suitedefinition": "c7n_awscc.resources.iotcoredeviceadvisor_suitedefinition.IotcoredeviceadvisorSuitedefinition",
    "awscc.iotevents_detectormodel": "c7n_awscc.resources.iotevents_detectormodel.IoteventsDetectormodel",
    "awscc.iotevents_input": "c7n_awscc.resources.iotevents_input.IoteventsInput",
    "awscc.iotfleethub_application": "c7n_awscc.resources.iotfleethub_application.IotfleethubApplication",
    "awscc.iotsitewise_accesspolicy": "c7n_awscc.resources.iotsitewise_accesspolicy.IotsitewiseAccesspolicy",
    "awscc.iotsitewise_asset": "c7n_awscc.resources.iotsitewise_asset.IotsitewiseAsset",
    "awscc.iotsitewise_assetmodel": "c7n_awscc.resources.iotsitewise_assetmodel.IotsitewiseAssetmodel",
    "awscc.iotsitewise_dashboard": "c7n_awscc.resources.iotsitewise_dashboard.IotsitewiseDashboard",
    "awscc.iotsitewise_gateway": "c7n_awscc.resources.iotsitewise_gateway.IotsitewiseGateway",
    "awscc.iotsitewise_portal": "c7n_awscc.resources.iotsitewise_portal.IotsitewisePortal",
    "awscc.iotsitewise_project": "c7n_awscc.resources.iotsitewise_project.IotsitewiseProject",
    "awscc.iotwireless_destination": "c7n_awscc.resources.iotwireless_destination.IotwirelessDestination",
    "awscc.iotwireless_fuotatask": "c7n_awscc.resources.iotwireless_fuotatask.IotwirelessFuotatask",
    "awscc.iotwireless_multicastgroup": "c7n_awscc.resources.iotwireless_multicastgroup.IotwirelessMulticastgroup",
    "awscc.iotwireless_partneraccount": "c7n_awscc.resources.iotwireless_partneraccount.IotwirelessPartneraccount",
    "awscc.iotwireless_wirelessdevice": "c7n_awscc.resources.iotwireless_wirelessdevice.IotwirelessWirelessdevice",
    "awscc.iotwireless_wirelessgateway": "c7n_awscc.resources.iotwireless_wirelessgateway.IotwirelessWirelessgateway",
    "awscc.ivs_channel": "c7n_awscc.resources.ivs_channel.IvsChannel",
    "awscc.ivs_playbackkeypair": "c7n_awscc.resources.ivs_playbackkeypair.IvsPlaybackkeypair",
    "awscc.ivs_recordingconfiguration": "c7n_awscc.resources.ivs_recordingconfiguration.IvsRecordingconfiguration",
    "awscc.ivs_streamkey": "c7n_awscc.resources.ivs_streamkey.IvsStreamkey",
    "awscc.kendra_datasource": "c7n_awscc.resources.kendra_datasource.KendraDatasource",
    "awscc.kendra_faq": "c7n_awscc.resources.kendra_faq.KendraFaq",
    "awscc.kendra_index": "c7n_awscc.resources.kendra_index.KendraIndex",
    "awscc.kinesis_stream": "c7n_awscc.resources.kinesis_stream.KinesisStream",
    "awscc.kinesisfirehose_deliverystream": "c7n_awscc.resources.kinesisfirehose_deliverystream.KinesisfirehoseDeliverystream",
    "awscc.kinesisvideo_signalingchannel": "c7n_awscc.resources.kinesisvideo_signalingchannel.KinesisvideoSignalingchannel",
    "awscc.kinesisvideo_stream": "c7n_awscc.resources.kinesisvideo_stream.KinesisvideoStream",
    "awscc.kms_alias": "c7n_awscc.resources.kms_alias.KmsAlias",
    "awscc.kms_key": "c7n_awscc.resources.kms_key.KmsKey",
    "awscc.kms_replicakey": "c7n_awscc.resources.kms_replicakey.KmsReplicakey",
    "awscc.lambda_codesigningconfig": "c7n_awscc.resources.lambda_codesigningconfig.LambdaCodesigningconfig",
    "awscc.lambda_eventsourcemapping": "c7n_awscc.resources.lambda_eventsourcemapping.LambdaEventsourcemapping",
    "awscc.lambda_function": "c7n_awscc.resources.lambda_function.LambdaFunction",
    "awscc.lex_bot": "c7n_awscc.resources.lex_bot.LexBot",
    "awscc.lex_botalias": "c7n_awscc.resources.lex_botalias.LexBotalias",
    "awscc.lex_resourcepolicy": "c7n_awscc.resources.lex_resourcepolicy.LexResourcepolicy",
    "awscc.licensemanager_grant": "c7n_awscc.resources.licensemanager_grant.LicensemanagerGrant",
    "awscc.licensemanager_license": "c7n_awscc.resources.licensemanager_license.LicensemanagerLicense",
    "awscc.lightsail_alarm": "c7n_awscc.resources.lightsail_alarm.LightsailAlarm",
    "awscc.lightsail_bucket": "c7n_awscc.resources.lightsail_bucket.LightsailBucket",
    "awscc.lightsail_database": "c7n_awscc.resources.lightsail_database.LightsailDatabase",
    "awscc.lightsail_disk": "c7n_awscc.resources.lightsail_disk.LightsailDisk",
    "awscc.lightsail_instance": "c7n_awscc.resources.lightsail_instance.LightsailInstance",
    "awscc.lightsail_loadbalancer": "c7n_awscc.resources.lightsail_loadbalancer.LightsailLoadbalancer",
    "awscc.lightsail_loadbalancertlscertificate": "c7n_awscc.resources.lightsail_loadbalancertlscertificate.LightsailLoadbalancertlscertificate",
    "awscc.lightsail_staticip": "c7n_awscc.resources.lightsail_staticip.LightsailStaticip",
    "awscc.logs_loggroup": "c7n_awscc.resources.logs_loggroup.LogsLoggroup",
    "awscc.logs_querydefinition": "c7n_awscc.resources.logs_querydefinition.LogsQuerydefinition",
    "awscc.logs_resourcepolicy": "c7n_awscc.resources.logs_resourcepolicy.LogsResourcepolicy",
    "awscc.lookoutequipment_inferencescheduler": "c7n_awscc.resources.lookoutequipment_inferencescheduler.LookoutequipmentInferencescheduler",
    "awscc.lookoutmetrics_anomalydetector": "c7n_awscc.resources.lookoutmetrics_anomalydetector.LookoutmetricsAnomalydetector",
    "awscc.lookoutvision_project": "c7n_awscc.resources.lookoutvision_project.LookoutvisionProject",
    "awscc.macie_customdataidentifier": "c7n_awscc.resources.macie_customdataidentifier.MacieCustomdataidentifier",
    "awscc.macie_findingsfilter": "c7n_awscc.resources.macie_findingsfilter.MacieFindingsfilter",
    "awscc.macie_session": "c7n_awscc.resources.macie_session.MacieSession",
    "awscc.mediaconnect_flow": "c7n_awscc.resources.mediaconnect_flow.MediaconnectFlow",
    "awscc.mediaconnect_flowentitlement": "c7n_awscc.resources.mediaconnect_flowentitlement.MediaconnectFlowentitlement",
    "awscc.mediaconnect_flowoutput": "c7n_awscc.resources.mediaconnect_flowoutput.MediaconnectFlowoutput",
    "awscc.mediaconnect_flowsource": "c7n_awscc.resources.mediaconnect_flowsource.MediaconnectFlowsource",
    "awscc.mediaconnect_flowvpcinterface": "c7n_awscc.resources.mediaconnect_flowvpcinterface.MediaconnectFlowvpcinterface",
    "awscc.mediapackage_channel": "c7n_awscc.resources.mediapackage_channel.MediapackageChannel",
    "awscc.mediapackage_originendpoint": "c7n_awscc.resources.mediapackage_originendpoint.MediapackageOriginendpoint",
    "awscc.mediapackage_packaginggroup": "c7n_awscc.resources.mediapackage_packaginggroup.MediapackagePackaginggroup",
    "awscc.memorydb_acl": "c7n_awscc.resources.memorydb_acl.MemorydbAcl",
    "awscc.memorydb_cluster": "c7n_awscc.resources.memorydb_cluster.MemorydbCluster",
    "awscc.memorydb_parametergroup": "c7n_awscc.resources.memorydb_parametergroup.MemorydbParametergroup",
    "awscc.memorydb_subnetgroup": "c7n_awscc.resources.memorydb_subnetgroup.MemorydbSubnetgroup",
    "awscc.memorydb_user": "c7n_awscc.resources.memorydb_user.MemorydbUser",
    "awscc.mwaa_environment": "c7n_awscc.resources.mwaa_environment.MwaaEnvironment",
    "awscc.networkfirewall_firewall": "c7n_awscc.resources.networkfirewall_firewall.NetworkfirewallFirewall",
    "awscc.networkfirewall_firewallpolicy": "c7n_awscc.resources.networkfirewall_firewallpolicy.NetworkfirewallFirewallpolicy",
    "awscc.networkfirewall_loggingconfiguration": "c7n_awscc.resources.networkfirewall_loggingconfiguration.NetworkfirewallLoggingconfiguration",
    "awscc.networkfirewall_rulegroup": "c7n_awscc.resources.networkfirewall_rulegroup.NetworkfirewallRulegroup",
    "awscc.networkmanager_device": "c7n_awscc.resources.networkmanager_device.NetworkmanagerDevice",
    "awscc.networkmanager_globalnetwork": "c7n_awscc.resources.networkmanager_globalnetwork.NetworkmanagerGlobalnetwork",
    "awscc.networkmanager_link": "c7n_awscc.resources.networkmanager_link.NetworkmanagerLink",
    "awscc.networkmanager_site": "c7n_awscc.resources.networkmanager_site.NetworkmanagerSite",
    "awscc.nimblestudio_launchprofile": "c7n_awscc.resources.nimblestudio_launchprofile.NimblestudioLaunchprofile",
    "awscc.nimblestudio_streamingimage": "c7n_awscc.resources.nimblestudio_streamingimage.NimblestudioStreamingimage",
    "awscc.nimblestudio_studio": "c7n_awscc.resources.nimblestudio_studio.NimblestudioStudio",
    "awscc.nimblestudio_studiocomponent": "c7n_awscc.resources.nimblestudio_studiocomponent.NimblestudioStudiocomponent",
    "awscc.opensearchservice_domain": "c7n_awscc.resources.opensearchservice_domain.OpensearchserviceDomain",
    "awscc.opsworkscm_server": "c7n_awscc.resources.opsworkscm_server.OpsworkscmServer",
    "awscc.panorama_applicationinstance": "c7n_awscc.resources.panorama_applicationinstance.PanoramaApplicationinstance",
    "awscc.panorama_package": "c7n_awscc.resources.panorama_package.PanoramaPackage",
    "awscc.panorama_packageversion": "c7n_awscc.resources.panorama_packageversion.PanoramaPackageversion",
    "awscc.pinpoint_inapptemplate": "c7n_awscc.resources.pinpoint_inapptemplate.PinpointInapptemplate",
    "awscc.qldb_stream": "c7n_awscc.resources.qldb_stream.QldbStream",
    "awscc.quicksight_analysis": "c7n_awscc.resources.quicksight_analysis.QuicksightAnalysis",
    "awscc.quicksight_dashboard": "c7n_awscc.resources.quicksight_dashboard.QuicksightDashboard",
    "awscc.quicksight_dataset": "c7n_awscc.resources.quicksight_dataset.QuicksightDataset",
    "awscc.quicksight_datasource": "c7n_awscc.resources.quicksight_datasource.QuicksightDatasource",
    "awscc.quicksight_template": "c7n_awscc.resources.quicksight_template.QuicksightTemplate",
    "awscc.quicksight_theme": "c7n_awscc.resources.quicksight_theme.QuicksightTheme",
    "awscc.rds_dbproxy": "c7n_awscc.resources.rds_dbproxy.RdsDbproxy",
    "awscc.rds_dbproxyendpoint": "c7n_awscc.resources.rds_dbproxyendpoint.RdsDbproxyendpoint",
    "awscc.rds_dbproxytargetgroup": "c7n_awscc.resources.rds_dbproxytargetgroup.RdsDbproxytargetgroup",
    "awscc.rds_globalcluster": "c7n_awscc.resources.rds_globalcluster.RdsGlobalcluster",
    "awscc.redshift_cluster": "c7n_awscc.resources.redshift_cluster.RedshiftCluster",
    "awscc.redshift_endpointaccess": "c7n_awscc.resources.redshift_endpointaccess.RedshiftEndpointaccess",
    "awscc.redshift_endpointauthorization": "c7n_awscc.resources.redshift_endpointauthorization.RedshiftEndpointauthorization",
    "awscc.redshift_eventsubscription": "c7n_awscc.resources.redshift_eventsubscription.RedshiftEventsubscription",
    "awscc.redshift_scheduledaction": "c7n_awscc.resources.redshift_scheduledaction.RedshiftScheduledaction",
    "awscc.rekognition_project": "c7n_awscc.resources.rekognition_project.RekognitionProject",
    "awscc.resiliencehub_app": "c7n_awscc.resources.resiliencehub_app.ResiliencehubApp",
    "awscc.resiliencehub_resiliencypolicy": "c7n_awscc.resources.resiliencehub_resiliencypolicy.ResiliencehubResiliencypolicy",
    "awscc.resourcegroups_group": "c7n_awscc.resources.resourcegroups_group.ResourcegroupsGroup",
    "awscc.robomaker_fleet": "c7n_awscc.resources.robomaker_fleet.RobomakerFleet",
    "awscc.robomaker_robot": "c7n_awscc.resources.robomaker_robot.RobomakerRobot",
    "awscc.robomaker_simulationapplication": "c7n_awscc.resources.robomaker_simulationapplication.RobomakerSimulationapplication",
    "awscc.route53_healthcheck": "c7n_awscc.resources.route53_healthcheck.Route53Healthcheck",
    "awscc.route53_hostedzone": "c7n_awscc.resources.route53_hostedzone.Route53Hostedzone",
    "awscc.route53_keysigningkey": "c7n_awscc.resources.route53_keysigningkey.Route53Keysigningkey",
    "awscc.route53recoverycontrol_controlpanel": "c7n_awscc.resources.route53recoverycontrol_controlpanel.Route53RecoverycontrolControlpanel",
    "awscc.route53recoverycontrol_routingcontrol": "c7n_awscc.resources.route53recoverycontrol_routingcontrol.Route53RecoverycontrolRoutingcontrol",
    "awscc.route53recoverycontrol_safetyrule": "c7n_awscc.resources.route53recoverycontrol_safetyrule.Route53RecoverycontrolSafetyrule",
    "awscc.route53recoveryreadiness_cell": "c7n_awscc.resources.route53recoveryreadiness_cell.Route53RecoveryreadinessCell",
    "awscc.route53recoveryreadiness_readinesscheck": "c7n_awscc.resources.route53recoveryreadiness_readinesscheck.Route53RecoveryreadinessReadinesscheck",
    "awscc.route53recoveryreadiness_recoverygroup": "c7n_awscc.resources.route53recoveryreadiness_recoverygroup.Route53RecoveryreadinessRecoverygroup",
    "awscc.route53recoveryreadiness_resourceset": "c7n_awscc.resources.route53recoveryreadiness_resourceset.Route53RecoveryreadinessResourceset",
    "awscc.route53resolver_firewalldomainlist": "c7n_awscc.resources.route53resolver_firewalldomainlist.Route53ResolverFirewalldomainlist",
    "awscc.route53resolver_firewallrulegroup": "c7n_awscc.resources.route53resolver_firewallrulegroup.Route53ResolverFirewallrulegroup",
    "awscc.route53resolver_firewallrulegroupassociation": "c7n_awscc.resources.route53resolver_firewallrulegroupassociation.Route53ResolverFirewallrulegroupassociation",
    "awscc.route53resolver_resolverrule": "c7n_awscc.resources.route53resolver_resolverrule.Route53ResolverResolverrule",
    "awscc.rum_appmonitor": "c7n_awscc.resources.rum_appmonitor.RumAppmonitor",
    "awscc.s3_accesspoint": "c7n_awscc.resources.s3_accesspoint.S3Accesspoint",
    "awscc.s3_bucket": "c7n_awscc.resources.s3_bucket.S3Bucket",
    "awscc.s3_multiregionaccesspoint": "c7n_awscc.resources.s3_multiregionaccesspoint.S3Multiregionaccesspoint",
    "awscc.s3_multiregionaccesspointpolicy": "c7n_awscc.resources.s3_multiregionaccesspointpolicy.S3Multiregionaccesspointpolicy",
    "awscc.s3_storagelens": "c7n_awscc.resources.s3_storagelens.S3Storagelens",
    "awscc.s3objectlambda_accesspoint": "c7n_awscc.resources.s3objectlambda_accesspoint.S3ObjectlambdaAccesspoint",
    "awscc.s3objectlambda_accesspointpolicy": "c7n_awscc.resources.s3objectlambda_accesspointpolicy.S3ObjectlambdaAccesspointpolicy",
    "awscc.s3outposts_accesspoint": "c7n_awscc.resources.s3outposts_accesspoint.S3OutpostsAccesspoint",
    "awscc.s3outposts_bucket": "c7n_awscc.resources.s3outposts_bucket.S3OutpostsBucket",
    "awscc.s3outposts_bucketpolicy": "c7n_awscc.resources.s3outposts_bucketpolicy.S3OutpostsBucketpolicy",
    "awscc.sagemaker_appimageconfig": "c7n_awscc.resources.sagemaker_appimageconfig.SagemakerAppimageconfig",
    "awscc.sagemaker_device": "c7n_awscc.resources.sagemaker_device.SagemakerDevice",
    "awscc.sagemaker_devicefleet": "c7n_awscc.resources.sagemaker_devicefleet.SagemakerDevicefleet",
    "awscc.sagemaker_domain": "c7n_awscc.resources.sagemaker_domain.SagemakerDomain",
    "awscc.sagemaker_image": "c7n_awscc.resources.sagemaker_image.SagemakerImage",
    "awscc.sagemaker_modelpackagegroup": "c7n_awscc.resources.sagemaker_modelpackagegroup.SagemakerModelpackagegroup",
    "awscc.sagemaker_monitoringschedule": "c7n_awscc.resources.sagemaker_monitoringschedule.SagemakerMonitoringschedule",
    "awscc.sagemaker_pipeline": "c7n_awscc.resources.sagemaker_pipeline.SagemakerPipeline",
    "awscc.sagemaker_project": "c7n_awscc.resources.sagemaker_project.SagemakerProject",
    "awscc.sagemaker_userprofile": "c7n_awscc.resources.sagemaker_userprofile.SagemakerUserprofile",
    "awscc.servicecatalog_cloudformationprovisionedproduct": "c7n_awscc.resources.servicecatalog_cloudformationprovisionedproduct.ServicecatalogCloudformationprovisionedproduct",
    "awscc.servicecatalog_serviceaction": "c7n_awscc.resources.servicecatalog_serviceaction.ServicecatalogServiceaction",
    "awscc.servicecatalogappregistry_application": "c7n_awscc.resources.servicecatalogappregistry_application.ServicecatalogappregistryApplication",
    "awscc.servicecatalogappregistry_attributegroup": "c7n_awscc.resources.servicecatalogappregistry_attributegroup.ServicecatalogappregistryAttributegroup",
    "awscc.ses_contactlist": "c7n_awscc.resources.ses_contactlist.SesContactlist",
    "awscc.signer_signingprofile": "c7n_awscc.resources.signer_signingprofile.SignerSigningprofile",
    "awscc.ssm_association": "c7n_awscc.resources.ssm_association.SsmAssociation",
    "awscc.ssm_document": "c7n_awscc.resources.ssm_document.SsmDocument",
    "awscc.ssm_resourcedatasync": "c7n_awscc.resources.ssm_resourcedatasync.SsmResourcedatasync",
    "awscc.ssmcontacts_contact": "c7n_awscc.resources.ssmcontacts_contact.SsmcontactsContact",
    "awscc.ssmcontacts_contactchannel": "c7n_awscc.resources.ssmcontacts_contactchannel.SsmcontactsContactchannel",
    "awscc.ssmincidents_replicationset": "c7n_awscc.resources.ssmincidents_replicationset.SsmincidentsReplicationset",
    "awscc.ssmincidents_responseplan": "c7n_awscc.resources.ssmincidents_responseplan.SsmincidentsResponseplan",
    "awscc.sso_instanceaccesscontrolattributeconfiguration": "c7n_awscc.resources.sso_instanceaccesscontrolattributeconfiguration.SsoInstanceaccesscontrolattributeconfiguration",
    "awscc.sso_permissionset": "c7n_awscc.resources.sso_permissionset.SsoPermissionset",
    "awscc.stepfunctions_activity": "c7n_awscc.resources.stepfunctions_activity.StepfunctionsActivity",
    "awscc.stepfunctions_statemachine": "c7n_awscc.resources.stepfunctions_statemachine.StepfunctionsStatemachine",
    "awscc.synthetics_canary": "c7n_awscc.resources.synthetics_canary.SyntheticsCanary",
    "awscc.timestream_database": "c7n_awscc.resources.timestream_database.TimestreamDatabase",
    "awscc.timestream_scheduledquery": "c7n_awscc.resources.timestream_scheduledquery.TimestreamScheduledquery",
    "awscc.timestream_table": "c7n_awscc.resources.timestream_table.TimestreamTable",
    "awscc.transfer_workflow": "c7n_awscc.resources.transfer_workflow.TransferWorkflow",
    "awscc.wafv2_ipset": "c7n_awscc.resources.wafv2_ipset.Wafv2Ipset",
    "awscc.wafv2_loggingconfiguration": "c7n_awscc.resources.wafv2_loggingconfiguration.Wafv2Loggingconfiguration",
    "awscc.wafv2_regexpatternset": "c7n_awscc.resources.wafv2_regexpatternset.Wafv2Regexpatternset",
    "awscc.wafv2_rulegroup": "c7n_awscc.resources.wafv2_rulegroup.Wafv2Rulegroup",
    "awscc.wafv2_webacl": "c7n_awscc.resources.wafv2_webacl.Wafv2Webacl",
    "awscc.wafv2_webaclassociation": "c7n_awscc.resources.wafv2_webaclassociation.Wafv2Webaclassociation",
    "awscc.xray_group": "c7n_awscc.resources.xray_group.XrayGroup",
    "awscc.xray_samplingrule": "c7n_awscc.resources.xray_samplingrule.XraySamplingrule"
  },
  "augment": {
    "AWS::AccessAnalyzer::Analyzer": {
      "service": "accessanalyzer",
      "type": "accessanalyzer_analyzer"
    },
    "AWS::ACMPCA::Certificate": {
      "service": "acm-pca",
      "type": "acmpca_certificate"
    },
    "AWS::ACMPCA::CertificateAuthority": {
      "service": "acm-pca",
      "type": "acmpca_certificateauthority"
    },
    "AWS::ACMPCA::CertificateAuthorityActivation": {
      "service": "acm-pca",
      "type": "acmpca_certificateauthorityactivation"
    },
    "AWS::Amplify::App": {
      "service": "amplify",
      "type": "amplify_app"
    },
    "AWS::Amplify::Branch": {
      "service": "amplify",
      "type": "amplify_branch"
    },
    "AWS::Amplify::Domain": {
      "service": "amplify",
      "type": "amplify_domain"
    },
    "AWS::AmplifyUIBuilder::Component": {
      "service": "amplifyuibuilder",
      "type": "amplifyuibuilder_component"
    },
    "AWS::AmplifyUIBuilder::Theme": {
      "service": "amplifyuibuilder",
      "type": "amplifyuibuilder_theme"
    },
    "AWS::ApiGateway::Account": {
      "service": "apigateway",
      "type": "apigateway_account"
    },
    "AWS::ApiGateway::ApiKey": {
      "service": "apigateway",
      "type": "apigateway_apikey"
    },
    "AWS::ApiGateway::Authorizer": {
      "service": "apigateway",
      "type": "apigateway_authorizer"
    },
    "AWS::ApiGateway::BasePathMapping": {
      "service": "apigateway",
      "type": "apigateway_basepathmapping"
    },
    "AWS::ApiGateway::ClientCertificate": {
      "service": "apigateway",
      "type": "apigateway_clientcertificate",
      "c7n_type": "aws.rest-client-certificate"
    },
    "AWS::ApiGateway::Deployment": {
      "service": "apigateway",
      "type": "apigateway_deployment"
    },
    "AWS::ApiGateway::DocumentationVersion": {
      "service": "apigateway",
      "type": "apigateway_documentationversion"
    },
    "AWS::ApiGateway::DomainName": {
      "service": "apigateway",
      "type": "apigateway_domainname"
    },
    "AWS::ApiGateway::Method": {
      "service": "apigateway",
      "type": "apigateway_method"
    },
    "AWS::ApiGateway::Model": {
      "service": "apigateway",
      "type": "apigateway_model"
    },
    "AWS::ApiGateway::RequestValidator": {
      "service": "apigateway",
      "type": "apigateway_requestvalidator"
    },
    "AWS::ApiGateway::Stage": {
      "service": "apigateway",
      "type": "apigateway_stage",
      "c7n_type": "aws.rest-stage"
    },
    "AWS::ApiGateway::UsagePlan": {
      "service": "apigateway",
      "type": "apigateway_usageplan"
    },
    "AWS::AppFlow::ConnectorProfile": {
      "service": "appflow",
      "type": "appflow_connectorprofile"
    },
    "AWS::AppFlow::Flow": {
      "service": "appflow",
      "type": "appflow_flow"
    },
    "AWS::AppIntegrations::EventIntegration": {
      "service": "appintegrations",
      "type": "appintegrations_eventintegration"
    },
    "AWS::ApplicationInsights::Application": {
      "service": "application-insights",
      "type": "applicationinsights_application"
    },
    "AWS::AppRunner::Service": {
      "service": "apprunner",
      "type": "apprunner_service"
    },
    "AWS::AppStream::Application": {
      "service": "appstream",
      "type": "appstream_application"
    },
    "AWS::AppStream::Entitlement": {
      "service": "appstream",
      "type": "appstream_entitlement"
    },
    "AWS::AppSync::DomainName": {
      "service": "appsync",
      "type": "appsync_domainname"
    },
    "AWS::AppSync::DomainNameApiAssociation": {
      "service": "appsync",
      "type": "appsync_domainnameapiassociation"
    },
    "AWS::APS::RuleGroupsNamespace": {
      "service": "amp",
      "type": "aps_rulegroupsnamespace"
    },
    "AWS::APS::Workspace": {
      "service": "amp",
      "type": "aps_workspace"
    },
    "AWS::Athena::DataCatalog": {
      "service": "athena",
      "type": "athena_datacatalog"
    },
    "AWS::Athena::NamedQuery": {
      "service": "athena",
      "type": "athena_namedquery"
    },
    "AWS::Athena::PreparedStatement": {
      "service": "athena",
      "type": "athena_preparedstatement"
    },
    "AWS::Athena::WorkGroup": {
      "service": "athena",
      "type": "athena_workgroup"
    },
    "AWS::AuditManager::Assessment": {
      "service": "auditmanager",
      "type": "auditmanager_assessment"
    },
    "AWS::AutoScaling::LifecycleHook": {
      "service": "autoscaling",
      "type": "autoscaling_lifecyclehook"
    },
    "AWS::AutoScaling::WarmPool": {
      "service": "autoscaling",
      "type": "autoscaling_warmpool"
    },
    "AWS::Backup::BackupPlan": {
      "service": "backup",
      "type": "backup_backupplan",
      "c7n_type": "aws.backup-plan"
    },
    "AWS::Backup::BackupVault": {
      "service": "backup",
      "type": "backup_backupvault",
      "c7n_type": "aws.backup-vault"
    },
    "AWS::Backup::Framework": {
      "service": "backup",
      "type": "backup_framework"
    },
    "AWS::Backup::ReportPlan": {
      "service": "backup",
      "type": "backup_reportplan"
    },
    "AWS::Batch::SchedulingPolicy": {
      "service": "batch",
      "type": "batch_schedulingpolicy"
    },
    "AWS::Budgets::BudgetsAction": {
      "service": "budgets",
      "type": "budgets_budgetsaction"
    },
    "AWS::Cassandra::Keyspace": {
      "service": null,
      "type": "cassandra_keyspace"
    },
    "AWS::Cassandra::Table": {
      "service": null,
      "type": "cassandra_table"
    },
    "AWS::CE::AnomalyMonitor": {
      "service": "ce",
      "type": "ce_anomalymonitor"
    },
    "AWS::CE::AnomalySubscription": {
      "service": "ce",
      "type": "ce_anomalysubscription"
    },
    "AWS::CE::CostCategory": {
      "service": "ce",
      "type": "ce_costcategory"
    },
    "AWS::CertificateManager::Account": {
      "service": "acm",
      "type": "certificatemanager_account"
    },
    "AWS::Chatbot::SlackChannelConfiguration": {
      "service": null,
      "type": "chatbot_slackchannelconfiguration"
    },
    "AWS::CloudFormation::ResourceDefaultVersion": {
      "service": "cloudformation",
      "type": "cloudformation_resourcedefaultversion"
    },
    "AWS::CloudFormation::StackSet": {
      "service": "cloudformation",
      "type": "cloudformation_stackset"
    },
    "AWS::CloudFormation::TypeActivation": {
      "service": "cloudformation",
      "type": "cloudformation_typeactivation"
    },
    "AWS::CloudFront::CachePolicy": {
      "service": "cloudfront",
      "type": "cloudfront_cachepolicy"
    },
    "AWS::CloudFront::CloudFrontOriginAccessIdentity": {
      "service": "cloudfront",
      "type": "cloudfront_cloudfrontoriginaccessidentity"
    },
    "AWS::CloudFront::Distribution": {
      "service": "cloudfront",
      "type": "cloudfront_distribution",
      "c7n_type": "aws.distribution"
    },
    "AWS::CloudFront::Function": {
      "service": "cloudfront",
      "type": "cloudfront_function"
    },
    "AWS::CloudFront::KeyGroup": {
      "service": "cloudfront",
      "type": "cloudfront_keygroup"
    },
    "AWS::CloudFront::OriginRequestPolicy": {
      "service": "cloudfront",
      "type": "cloudfront_originrequestpolicy"
    },
    "AWS::CloudFront::PublicKey": {
      "service": "cloudfront",
      "type": "cloudfront_publickey"
    },
    "AWS::CloudFront::RealtimeLogConfig": {
      "service": "cloudfront",
      "type": "cloudfront_realtimelogconfig"
    },
    "AWS::CloudFront::ResponseHeadersPolicy": {
      "service": "cloudfront",
      "type": "cloudfront_responseheaderspolicy"
    },
    "AWS::CloudTrail::Trail": {
      "service": "cloudtrail",
      "type": "cloudtrail_trail",
      "c7n_type": "aws.cloudtrail"
    },
    "AWS::CloudWatch::CompositeAlarm": {
      "service": "cloudwatch",
      "type": "cloudwatch_compositealarm"
    },
    "AWS::CloudWatch::MetricStream": {
      "service": "cloudwatch",
      "type": "cloudwatch_metricstream"
    },
    "AWS::CodeArtifact::Domain": {
      "service": "codeartifact",
      "type": "codeartifact_domain"
    },
    "AWS::CodeArtifact::Repository": {
      "service": "codeartifact",
      "type": "codeartifact_repository"
    },
    "AWS::CodeGuruProfiler::ProfilingGroup": {
      "service": "codeguruprofiler",
      "type": "codeguruprofiler_profilinggroup"
    },
    "AWS::CodeStarConnections::Connection": {
      "service": "codestar-connections",
      "type": "codestarconnections_connection"
    },
    "AWS::CodeStarNotifications::NotificationRule": {
      "service": null,
      "type": "codestarnotifications_notificationrule"
    },
    "AWS::Config::AggregationAuthorization": {
      "service": "config",
      "type": "config_aggregationauthorization"
    },
    "AWS::Config::ConfigurationAggregator": {
      "service": "config",
      "type": "config_configurationaggregator"
    },
    "AWS::Config::ConformancePack": {
      "service": "config",
      "type": "config_conformancepack"
    },
    "AWS::Config::OrganizationConformancePack": {
      "service": "config",
      "type": "config_organizationconformancepack"
    },
    "AWS::Config::StoredQuery": {
      "service": "config",
      "type": "config_storedquery"
    },
    "AWS::Connect::ContactFlow": {
      "service": "connect",
      "type": "connect_contactflow"
    },
    "AWS::Connect::ContactFlowModule": {
      "service": "connect",
      "type": "connect_contactflowmodule"
    },
    "AWS::Connect::HoursOfOperation": {
      "service": "connect",
      "type": "connect_hoursofoperation"
    },
    "AWS::Connect::QuickConnect": {
      "service": "connect",
      "type": "connect_quickconnect"
    },
    "AWS::Connect::User": {
      "service": "connect",
      "type": "connect_user"
    },
    "AWS::Connect::UserHierarchyGroup": {
      "service": "connect",
      "type": "connect_userhierarchygroup"
    },
    "AWS::CUR::ReportDefinition": {
      "service": "cur",
      "type": "cur_reportdefinition"
    },
    "AWS::CustomerProfiles::Domain": {
      "service": "customer-profiles",
      "type": "customerprofiles_domain"
    },
    "AWS::CustomerProfiles::Integration": {
      "service": "customer-profiles",
      "type": "customerprofiles_integration"
    },
    "AWS::CustomerProfiles::ObjectType": {
      "service": "customer-profiles",
      "type": "customerprofiles_objecttype"
    },
    "AWS::DataBrew::Dataset": {
      "service": "databrew",
      "type": "databrew_dataset"
    },
    "AWS::DataBrew::Job": {
      "service": "databrew",
      "type": "databrew_job"
    },
    "AWS::DataBrew::Project": {
      "service": "databrew",
      "type": "databrew_project"
    },
    "AWS::DataBrew::Recipe": {
      "service": "databrew",
      "type": "databrew_recipe"
    },
    "AWS::DataBrew::Ruleset": {
      "service": "databrew",
      "type": "databrew_ruleset"
    },
    "AWS::DataBrew::Schedule": {
      "service": "databrew",
      "type": "databrew_schedule"
    },
    "AWS::DataSync::Agent": {
      "service": "datasync",
      "type": "datasync_agent"
    },
    "AWS::DataSync::LocationEFS": {
      "service": "datasync",
      "type": "datasync_locationefs"
    },
    "AWS::DataSync::LocationFSxWindows": {
      "service": "datasync",
      "type": "datasync_locationfsxwindows"
    },
    "AWS::DataSync::LocationHDFS": {
      "service": "datasync",
      "type": "datasync_locationhdfs"
    },
    "AWS::DataSync::LocationNFS": {
      "service": "datasync",
      "type": "datasync_locationnfs"
    },
    "AWS::DataSync::LocationObjectStorage": {
      "service": "datasync",
      "type": "datasync_locationobjectstorage"
    },
    "AWS::DataSync::LocationS3": {
      "service": "datasync",
      "type": "datasync_locations3"
    },
    "AWS::DataSync::LocationSMB": {
      "service": "datasync",
      "type": "datasync_locationsmb"
    },
    "AWS::DataSync::Task": {
      "service": "datasync",
      "type": "datasync_task"
    },
    "AWS::Detective::Graph": {
      "service": "detective",
      "type": "detective_graph"
    },
    "AWS::Detective::MemberInvitation": {
      "service": "detective",
      "type": "detective_memberinvitation"
    },
    "AWS::DevOpsGuru::ResourceCollection": {
      "service": "devops-guru",
      "type": "devopsguru_resourcecollection"
    },
    "AWS::DynamoDB::GlobalTable": {
      "service": "dynamodb",
      "type": "dynamodb_globaltable"
    },
    "AWS::EC2::CapacityReservationFleet": {
      "service": "ec2",
      "type": "ec2_capacityreservationfleet"
    },
    "AWS::EC2::CarrierGateway": {
      "service": "ec2",
      "type": "ec2_carriergateway"
    },
    "AWS::EC2::DHCPOptions": {
      "service": "ec2",
      "type": "ec2_dhcpoptions"
    },
    "AWS::EC2::EC2Fleet": {
      "service": "ec2",
      "type": "ec2_ec2fleet"
    },
    "AWS::EC2::FlowLog": {
      "service": "ec2",
      "type": "ec2_flowlog"
    },
    "AWS::EC2::GatewayRouteTableAssociation": {
      "service": "ec2",
      "type": "ec2_gatewayroutetableassociation"
    },
    "AWS::EC2::Host": {
      "service": "ec2",
      "type": "ec2_host",
      "c7n_type": "aws.ec2-host"
    },
    "AWS::EC2::InternetGateway": {
      "service": "ec2",
      "type": "ec2_internetgateway",
      "c7n_type": "aws.internet-gateway"
    },
    "AWS::EC2::IPAM": {
      "service": "ec2",
      "type": "ec2_ipam"
    },
    "AWS::EC2::IPAMPool": {
      "service": "ec2",
      "type": "ec2_ipampool"
    },
    "AWS::EC2::IPAMScope": {
      "service": "ec2",
      "type": "ec2_ipamscope"
    },
    "AWS::EC2::LocalGatewayRouteTableVPCAssociation": {
      "service": "ec2",
      "type": "ec2_localgatewayroutetablevpcassociation"
    },
    "AWS::EC2::NetworkAcl": {
      "service": "ec2",
      "type": "ec2_networkacl",
      "c7n_type": "aws.network-acl"
    },
    "AWS::EC2::NetworkInsightsAccessScope": {
      "service": "ec2",
      "type": "ec2_networkinsightsaccessscope"
    },
    "AWS::EC2::NetworkInsightsAccessScopeAnalysis": {
      "service": "ec2",
      "type": "ec2_networkinsightsaccessscopeanalysis"
    },
    "AWS::EC2::NetworkInsightsAnalysis": {
      "service": "ec2",
      "type": "ec2_networkinsightsanalysis"
    },
    "AWS::EC2::NetworkInsightsPath": {
      "service": "ec2",
      "type": "ec2_networkinsightspath"
    },
    "AWS::EC2::NetworkInterface": {
      "service": "ec2",
      "type": "ec2_networkinterface",
      "c7n_type": "aws.eni"
    },
    "AWS::EC2::PrefixList": {
      "service": "ec2",
      "type": "ec2_prefixlist"
    },
    "AWS::EC2::RouteTable": {
      "service": "ec2",
      "type": "ec2_routetable",
      "c7n_type": "aws.route-table"
    },
    "AWS::EC2::SpotFleet": {
      "service": "ec2",
      "type": "ec2_spotfleet",
      "c7n_type": "aws.ec2-spot-fleet-request"
    },
    "AWS::EC2::Subnet": {
      "service": "ec2",
      "type": "ec2_subnet",
      "c7n_type": "aws.subnet"
    },
    "AWS::EC2::TransitGateway": {
      "service": "ec2",
      "type": "ec2_transitgateway",
      "c7n_type": "aws.transit-gateway"
    },
    "AWS::EC2::TransitGatewayConnect": {
      "service": "ec2",
      "type": "ec2_transitgatewayconnect"
    },
    "AWS::EC2::TransitGatewayMulticastDomain": {
      "service": "ec2",
      "type": "ec2_transitgatewaymulticastdomain"
    },
    "AWS::EC2::TransitGatewayPeeringAttachment": {
      "service": "ec2",
      "type": "ec2_transitgatewaypeeringattachment"
    },
    "AWS::EC2::TransitGatewayVpcAttachment": {
      "service": "ec2",
      "type": "ec2_transitgatewayvpcattachment"
    },
    "AWS::EC2::VPC": {
      "service": "ec2",
      "type": "ec2_vpc",
      "c7n_type": "aws.vpc"
    },
    "AWS::EC2::VPCDHCPOptionsAssociation": {
      "service": "ec2",
      "type": "ec2_vpcdhcpoptionsassociation"
    },
    "AWS::EC2::VPCEndpoint": {
      "service": "ec2",
      "type": "ec2_vpcendpoint",
      "c7n_type": "aws.vpc-endpoint"
    },
    "AWS::ECR::PublicRepository": {
      "service": "ecr",
      "type": "ecr_publicrepository"
    },
    "AWS::ECR::RegistryPolicy": {
      "service": "ecr",
      "type": "ecr_registrypolicy"
    },
    "AWS::ECR::ReplicationConfiguration": {
      "service": "ecr",
      "type": "ecr_replicationconfiguration"
    },
    "AWS::ECR::Repository": {
      "service": "ecr",
      "type": "ecr_repository",
      "c7n_type": "aws.ecr"
    },
    "AWS::ECS::CapacityProvider": {
      "service": "ecs",
      "type": "ecs_capacityprovider"
    },
    "AWS::ECS::Cluster": {
      "service": "ecs",
      "type": "ecs_cluster",
      "c7n_type": "aws.ecs"
    },
    "AWS::ECS::ClusterCapacityProviderAssociations": {
      "service": "ecs",
      "type": "ecs_clustercapacityproviderassociations"
    },
    "AWS::ECS::PrimaryTaskSet": {
      "service": "ecs",
      "type": "ecs_primarytaskset"
    },
    "AWS::ECS::Service": {
      "service": "ecs",
      "type": "ecs_service",
      "c7n_type": "aws.ecs-service"
    },
    "AWS::ECS::TaskDefinition": {
      "service": "ecs",
      "type": "ecs_taskdefinition",
      "c7n_type": "aws.ecs-task-definition"
    },
    "AWS::ECS::TaskSet": {
      "service": "ecs",
      "type": "ecs_taskset",
      "c7n_type": "aws.ecs-task"
    },
    "AWS::EFS::AccessPoint": {
      "service": "efs",
      "type": "efs_accesspoint"
    },
    "AWS::EFS::FileSystem": {
      "service": "efs",
      "type": "efs_filesystem",
      "c7n_type": "aws.efs"
    },
    "AWS::EFS::MountTarget": {
      "service": "efs",
      "type": "efs_mounttarget",
      "c7n_type": "aws.efs-mount-target"
    },
    "AWS::EKS::Addon": {
      "service": "eks",
      "type": "eks_addon"
    },
    "AWS::EKS::Cluster": {
      "service": "eks",
      "type": "eks_cluster",
      "c7n_type": "aws.eks"
    },
    "AWS::EKS::FargateProfile": {
      "service": "eks",
      "type": "eks_fargateprofile"
    },
    "AWS::ElastiCache::GlobalReplicationGroup": {
      "service": "elasticache",
      "type": "elasticache_globalreplicationgroup"
    },
    "AWS::ElastiCache::User": {
      "service": "elasticache",
      "type": "elasticache_user"
    },
    "AWS::ElastiCache::UserGroup": {
      "service": "elasticache",
      "type": "elasticache_usergroup"
    },
    "AWS::ElasticLoadBalancingV2::Listener": {
      "service": "elbv2",
      "type": "elasticloadbalancingv2_listener"
    },
    "AWS::ElasticLoadBalancingV2::ListenerRule": {
      "service": "elbv2",
      "type": "elasticloadbalancingv2_listenerrule"
    },
    "AWS::EMR::Studio": {
      "service": "emr",
      "type": "emr_studio"
    },
    "AWS::EMR::StudioSessionMapping": {
      "service": "emr",
      "type": "emr_studiosessionmapping"
    },
    "AWS::EMRContainers::VirtualCluster": {
      "service": "emr-containers",
      "type": "emrcontainers_virtualcluster"
    },
    "AWS::Events::ApiDestination": {
      "service": "events",
      "type": "events_apidestination"
    },
    "AWS::Events::Archive": {
      "service": "events",
      "type": "events_archive"
    },
    "AWS::Events::Connection": {
      "service": "events",
      "type": "events_connection"
    },
    "AWS::EventSchemas::RegistryPolicy": {
      "service": "schemas",
      "type": "eventschemas_registrypolicy"
    },
    "AWS::Evidently::Experiment": {
      "service": "evidently",
      "type": "evidently_experiment"
    },
    "AWS::Evidently::Feature": {
      "service": "evidently",
      "type": "evidently_feature"
    },
    "AWS::Evidently::Launch": {
      "service": "evidently",
      "type": "evidently_launch"
    },
    "AWS::Evidently::Project": {
      "service": "evidently",
      "type": "evidently_project"
    },
    "AWS::FinSpace::Environment": {
      "service": "finspace",
      "type": "finspace_environment"
    },
    "AWS::FIS::ExperimentTemplate": {
      "service": "fis",
      "type": "fis_experimenttemplate"
    },
    "AWS::FMS::NotificationChannel": {
      "service": "fms",
      "type": "fms_notificationchannel"
    },
    "AWS::FMS::Policy": {
      "service": "fms",
      "type": "fms_policy"
    },
    "AWS::Forecast::DatasetGroup": {
      "service": "forecast",
      "type": "forecast_datasetgroup"
    },
    "AWS::FraudDetector::Detector": {
      "service": "frauddetector",
      "type": "frauddetector_detector"
    },
    "AWS::FraudDetector::EntityType": {
      "service": "frauddetector",
      "type": "frauddetector_entitytype"
    },
    "AWS::FraudDetector::EventType": {
      "service": "frauddetector",
      "type": "frauddetector_eventtype"
    },
    "AWS::FraudDetector::Label": {
      "service": "frauddetector",
      "type": "frauddetector_label"
    },
    "AWS::FraudDetector::Outcome": {
      "service": "frauddetector",
      "type": "frauddetector_outcome"
    },
    "AWS::FraudDetector::Variable": {
      "service": "frauddetector",
      "type": "frauddetector_variable"
    },
    "AWS::GameLift::Alias": {
      "service": "gamelift",
      "type": "gamelift_alias"
    },
    "AWS::GameLift::Fleet": {
      "service": "gamelift",
      "type": "gamelift_fleet",
      "c7n_type": "aws.gamelift-fleet"
    },
    "AWS::GameLift::GameServerGroup": {
      "service": "gamelift",
      "type": "gamelift_gameservergroup"
    },
    "AWS::GlobalAccelerator::Accelerator": {
      "service": "globalaccelerator",
      "type": "globalaccelerator_accelerator"
    },
    "AWS::GlobalAccelerator::EndpointGroup": {
      "service": "globalaccelerator",
      "type": "globalaccelerator_endpointgroup"
    },
    "AWS::GlobalAccelerator::Listener": {
      "service": "globalaccelerator",
      "type": "globalaccelerator_listener"
    },
    "AWS::Glue::Registry": {
      "service": "glue",
      "type": "glue_registry"
    },
    "AWS::Glue::Schema": {
      "service": "glue",
      "type": "glue_schema"
    },
    "AWS::GreengrassV2::ComponentVersion": {
      "service": "greengrassv2",
      "type": "greengrassv2_componentversion"
    },
    "AWS::GroundStation::Config": {
      "service": "groundstation",
      "type": "groundstation_config"
    },
    "AWS::GroundStation::MissionProfile": {
      "service": "groundstation",
      "type": "groundstation_missionprofile"
    },
    "AWS::HealthLake::FHIRDatastore": {
      "service": "healthlake",
      "type": "healthlake_fhirdatastore"
    },
    "AWS::IAM::OIDCProvider": {
      "service": "iam",
      "type": "iam_oidcprovider"
    },
    "AWS::IAM::Role": {
      "service": "iam",
      "type": "iam_role",
      "c7n_type": "aws.iam-role"
    },
    "AWS::IAM::SAMLProvider": {
      "service": "iam",
      "type": "iam_samlprovider"
    },
    "AWS::IAM::ServerCertificate": {
      "service": "iam",
      "type": "iam_servercertificate"
    },
    "AWS::IAM::VirtualMFADevice": {
      "service": "iam",
      "type": "iam_virtualmfadevice"
    },
    "AWS::ImageBuilder::DistributionConfiguration": {
      "service": "imagebuilder",
      "type": "imagebuilder_distributionconfiguration"
    },
    "AWS::ImageBuilder::Image": {
      "service": "imagebuilder",
      "type": "imagebuilder_image"
    },
    "AWS::ImageBuilder::ImagePipeline": {
      "service": "imagebuilder",
      "type": "imagebuilder_imagepipeline"
    },
    "AWS::ImageBuilder::InfrastructureConfiguration": {
      "service": "imagebuilder",
      "type": "imagebuilder_infrastructureconfiguration"
    },
    "AWS::InspectorV2::Filter": {
      "service": "inspector2",
      "type": "inspectorv2_filter"
    },
    "AWS::IoT::AccountAuditConfiguration": {
      "service": "iot",
      "type": "iot_accountauditconfiguration"
    },
    "AWS::IoT::Authorizer": {
      "service": "iot",
      "type": "iot_authorizer"
    },
    "AWS::IoT::Certificate": {
      "service": "iot",
      "type": "iot_certificate"
    },
    "AWS::IoT::CustomMetric": {
      "service": "iot",
      "type": "iot_custommetric"
    },
    "AWS::IoT::Dimension": {
      "service": "iot",
      "type": "iot_dimension"
    },
    "AWS::IoT::DomainConfiguration": {
      "service": "iot",
      "type": "iot_domainconfiguration"
    },
    "AWS::IoT::FleetMetric": {
      "service": "iot",
      "type": "iot_fleetmetric"
    },
    "AWS::IoT::Logging": {
      "service": "iot",
      "type": "iot_logging"
    },
    "AWS::IoT::MitigationAction": {
      "service": "iot",
      "type": "iot_mitigationaction"
    },
    "AWS::IoT::ProvisioningTemplate": {
      "service": "iot",
      "type": "iot_provisioningtemplate"
    },
    "AWS::IoT::ResourceSpecificLogging": {
      "service": "iot",
      "type": "iot_resourcespecificlogging"
    },
    "AWS::IoT::ScheduledAudit": {
      "service": "iot",
      "type": "iot_scheduledaudit"
    },
    "AWS::IoT::SecurityProfile": {
      "service": "iot",
      "type": "iot_securityprofile"
    },
    "AWS::IoT::TopicRule": {
      "service": "iot",
      "type": "iot_topicrule"
    },
    "AWS::IoT::TopicRuleDestination": {
      "service": "iot",
      "type": "iot_topicruledestination"
    },
    "AWS::IoTAnalytics::Dataset": {
      "service": "iotanalytics",
      "type": "iotanalytics_dataset"
    },
    "AWS::IoTAnalytics::Datastore": {
      "service": "iotanalytics",
      "type": "iotanalytics_datastore"
    },
    "AWS::IoTAnalytics::Pipeline": {
      "service": "iotanalytics",
      "type": "iotanalytics_pipeline"
    },
    "AWS::IoTCoreDeviceAdvisor::SuiteDefinition": {
      "service": "iotdeviceadvisor",
      "type": "iotcoredeviceadvisor_suitedefinition"
    },
    "AWS::IoTEvents::DetectorModel": {
      "service": "iotevents",
      "type": "iotevents_detectormodel"
    },
    "AWS::IoTEvents::Input": {
      "service": "iotevents",
      "type": "iotevents_input"
    },
    "AWS::IoTFleetHub::Application": {
      "service": "iotfleethub",
      "type": "iotfleethub_application"
    },
    "AWS::IoTSiteWise::AccessPolicy": {
      "service": "iotsitewise",
      "type": "iotsitewise_accesspolicy"
    },
    "AWS::IoTSiteWise::Asset": {
      "service": "iotsitewise",
      "type": "iotsitewise_asset"
    },
    "AWS::IoTSiteWise::AssetModel": {
      "service": "iotsitewise",
      "type": "iotsitewise_assetmodel"
    },
    "AWS::IoTSiteWise::Dashboard": {
      "service": "iotsitewise",
      "type": "iotsitewise_dashboard"
    },
    "AWS::IoTSiteWise::Gateway": {
      "service": "iotsitewise",
      "type": "iotsitewise_gateway"
    },
    "AWS::IoTSiteWise::Portal": {
      "service": "iotsitewise",
      "type": "iotsitewise_portal"
    },
    "AWS::IoTSiteWise::Project": {
      "service": "iotsitewise",
      "type": "iotsitewise_project"
    },
    "AWS::IoTWireless::Destination": {
      "service": "iotwireless",
      "type": "iotwireless_destination"
    },
    "AWS::IoTWireless::FuotaTask": {
      "service": "iotwireless",
      "type": "iotwireless_fuotatask"
    },
    "AWS::IoTWireless::MulticastGroup": {
      "service": "iotwireless",
      "type": "iotwireless_multicastgroup"
    },
    "AWS::IoTWireless::PartnerAccount": {
      "service": "iotwireless",
      "type": "iotwireless_partneraccount"
    },
    "AWS::IoTWireless::WirelessDevice": {
      "service": "iotwireless",
      "type": "iotwireless_wirelessdevice"
    },
    "AWS::IoTWireless::WirelessGateway": {
      "service": "iotwireless",
      "type": "iotwireless_wirelessgateway"
    },
    "AWS::IVS::Channel": {
      "service": "ivs",
      "type": "ivs_channel"
    },
    "AWS::IVS::PlaybackKeyPair": {
      "service": "ivs",
      "type": "ivs_playbackkeypair"
    },
    "AWS::IVS::RecordingConfiguration": {
      "service": "ivs",
      "type": "ivs_recordingconfiguration"
    },
    "AWS::IVS::StreamKey": {
      "service": "ivs",
      "type": "ivs_streamkey"
    },
    "AWS::Kendra::DataSource": {
      "service": "kendra",
      "type": "kendra_datasource"
    },
    "AWS::Kendra::Faq": {
      "service": "kendra",
      "type": "kendra_faq"
    },
    "AWS::Kendra::Index": {
      "service": "kendra",
      "type": "kendra_index"
    },
    "AWS::Kinesis::Stream": {
      "service": "kinesis",
      "type": "kinesis_stream",
      "c7n_type": "aws.kinesis"
    },
    "AWS::KinesisFirehose::DeliveryStream": {
      "service": "kinesis-firehose",
      "type": "kinesisfirehose_deliverystream",
      "c7n_type": "aws.firehose"
    },
    "AWS::KinesisVideo::SignalingChannel": {
      "service": "kinesisvideo",
      "type": "kinesisvideo_signalingchannel"
    },
    "AWS::KinesisVideo::Stream": {
      "service": "kinesisvideo",
      "type": "kinesisvideo_stream"
    },
    "AWS::KMS::Alias": {
      "service": "kms",
      "type": "kms_alias",
      "c7n_type": "aws.kms"
    },
    "AWS::KMS::Key": {
      "service": "kms",
      "type": "kms_key",
      "c7n_type": "aws.kms-key"
    },
    "AWS::KMS::ReplicaKey": {
      "service": "kms",
      "type": "kms_replicakey"
    },
    "AWS::Lambda::CodeSigningConfig": {
      "service": "lambda",
      "type": "lambda_codesigningconfig"
    },
    "AWS::Lambda::EventSourceMapping": {
      "service": "lambda",
      "type": "lambda_eventsourcemapping"
    },
    "AWS::Lambda::Function": {
      "service": "lambda",
      "type": "lambda_function",
      "c7n_type": "aws.lambda"
    },
    "AWS::Lex::Bot": {
      "service": "lexv2-models",
      "type": "lex_bot"
    },
    "AWS::Lex::BotAlias": {
      "service": "lexv2-models",
      "type": "lex_botalias"
    },
    "AWS::Lex::ResourcePolicy": {
      "service": "lexv2-models",
      "type": "lex_resourcepolicy"
    },
    "AWS::LicenseManager::Grant": {
      "service": "license-manager",
      "type": "licensemanager_grant"
    },
    "AWS::LicenseManager::License": {
      "service": "license-manager",
      "type": "licensemanager_license"
    },
    "AWS::Lightsail::Alarm": {
      "service": "lightsail",
      "type": "lightsail_alarm"
    },
    "AWS::Lightsail::Bucket": {
      "service": "lightsail",
      "type": "lightsail_bucket"
    },
    "AWS::Lightsail::Database": {
      "service": "lightsail",
      "type": "lightsail_database"
    },
    "AWS::Lightsail::Disk": {
      "service": "lightsail",
      "type": "lightsail_disk"
    },
    "AWS::Lightsail::Instance": {
      "service": "lightsail",
      "type": "lightsail_instance"
    },
    "AWS::Lightsail::LoadBalancer": {
      "service": "lightsail",
      "type": "lightsail_loadbalancer"
    },
    "AWS::Lightsail::LoadBalancerTlsCertificate": {
      "service": "lightsail",
      "type": "lightsail_loadbalancertlscertificate"
    },
    "AWS::Lightsail::StaticIp": {
      "service": "lightsail",
      "type": "lightsail_staticip"
    },
    "AWS::Logs::LogGroup": {
      "service": "logs",
      "type": "logs_loggroup",
      "c7n_type": "aws.log-group"
    },
    "AWS::Logs::QueryDefinition": {
      "service": "logs",
      "type": "logs_querydefinition"
    },
    "AWS::Logs::ResourcePolicy": {
      "service": "logs",
      "type": "logs_resourcepolicy"
    },
    "AWS::LookoutEquipment::InferenceScheduler": {
      "service": "lookoutequipment",
      "type": "lookoutequipment_inferencescheduler"
    },
    "AWS::LookoutMetrics::AnomalyDetector": {
      "service": "lookoutmetrics",
      "type": "lookoutmetrics_anomalydetector"
    },
    "AWS::LookoutVision::Project": {
      "service": "lookoutvision",
      "type": "lookoutvision_project"
    },
    "AWS::Macie::CustomDataIdentifier": {
      "service": "macie",
      "type": "macie_customdataidentifier"
    },
    "AWS::Macie::FindingsFilter": {
      "service": "macie",
      "type": "macie_findingsfilter"
    },
    "AWS::Macie::Session": {
      "service": "macie",
      "type": "macie_session"
    },
    "AWS::MediaConnect::Flow": {
      "service": "mediaconnect",
      "type": "mediaconnect_flow"
    },
    "AWS::MediaConnect::FlowEntitlement": {
      "service": "mediaconnect",
      "type": "mediaconnect_flowentitlement"
    },
    "AWS::MediaConnect::FlowOutput": {
      "service": "mediaconnect",
      "type": "mediaconnect_flowoutput"
    },
    "AWS::MediaConnect::FlowSource": {
      "service": "mediaconnect",
      "type": "mediaconnect_flowsource"
    },
    "AWS::MediaConnect::FlowVpcInterface": {
      "service": "mediaconnect",
      "type": "mediaconnect_flowvpcinterface"
    },
    "AWS::MediaPackage::Channel": {
      "service": "mediapackage",
      "type": "mediapackage_channel"
    },
    "AWS::MediaPackage::OriginEndpoint": {
      "service": "mediapackage",
      "type": "mediapackage_originendpoint"
    },
    "AWS::MediaPackage::PackagingGroup": {
      "service": "mediapackage",
      "type": "mediapackage_packaginggroup"
    },
    "AWS::MemoryDB::ACL": {
      "service": "memorydb",
      "type": "memorydb_acl"
    },
    "AWS::MemoryDB::Cluster": {
      "service": "memorydb",
      "type": "memorydb_cluster"
    },
    "AWS::MemoryDB::ParameterGroup": {
      "service": "memorydb",
      "type": "memorydb_parametergroup"
    },
    "AWS::MemoryDB::SubnetGroup": {
      "service": "memorydb",
      "type": "memorydb_subnetgroup"
    },
    "AWS::MemoryDB::User": {
      "service": "memorydb",
      "type": "memorydb_user"
    },
    "AWS::MWAA::Environment": {
      "service": "mwaa",
      "type": "mwaa_environment",
      "c7n_type": "aws.airflow"
    },
    "AWS::NetworkFirewall::Firewall": {
      "service": "network-firewall",
      "type": "networkfirewall_firewall",
      "c7n_type": "aws.firewall"
    },
    "AWS::NetworkFirewall::FirewallPolicy": {
      "service": "network-firewall",
      "type": "networkfirewall_firewallpolicy"
    },
    "AWS::NetworkFirewall::LoggingConfiguration": {
      "service": "network-firewall",
      "type": "networkfirewall_loggingconfiguration"
    },
    "AWS::NetworkFirewall::RuleGroup": {
      "service": "network-firewall",
      "type": "networkfirewall_rulegroup"
    },
    "AWS::NetworkManager::Device": {
      "service": "networkmanager",
      "type": "networkmanager_device"
    },
    "AWS::NetworkManager::GlobalNetwork": {
      "service": "networkmanager",
      "type": "networkmanager_globalnetwork"
    },
    "AWS::NetworkManager::Link": {
      "service": "networkmanager",
      "type": "networkmanager_link"
    },
    "AWS::NetworkManager::Site": {
      "service": "networkmanager",
      "type": "networkmanager_site"
    },
    "AWS::NimbleStudio::LaunchProfile": {
      "service": "nimble",
      "type": "nimblestudio_launchprofile"
    },
    "AWS::NimbleStudio::StreamingImage": {
      "service": "nimble",
      "type": "nimblestudio_streamingimage"
    },
    "AWS::NimbleStudio::Studio": {
      "service": "nimble",
      "type": "nimblestudio_studio"
    },
    "AWS::NimbleStudio::StudioComponent": {
      "service": "nimble",
      "type": "nimblestudio_studiocomponent"
    },
    "AWS::OpenSearchService::Domain": {
      "service": "es",
      "type": "opensearchservice_domain"
    },
    "AWS::OpsWorksCM::Server": {
      "service": "opsworkscm",
      "type": "opsworkscm_server",
      "c7n_type": "aws.opswork-cm"
    },
    "AWS::Panorama::ApplicationInstance": {
      "service": "panorama",
      "type": "panorama_applicationinstance"
    },
    "AWS::Panorama::Package": {
      "service": "panorama",
      "type": "panorama_package"
    },
    "AWS::Panorama::PackageVersion": {
      "service": "panorama",
      "type": "panorama_packageversion"
    },
    "AWS::Pinpoint::InAppTemplate": {
      "service": "pinpoint",
      "type": "pinpoint_inapptemplate"
    },
    "AWS::QLDB::Stream": {
      "service": "qldb",
      "type": "qldb_stream"
    },
    "AWS::QuickSight::Analysis": {
      "service": "quicksight",
      "type": "quicksight_analysis"
    },
    "AWS::QuickSight::Dashboard": {
      "service": "quicksight",
      "type": "quicksight_dashboard"
    },
    "AWS::QuickSight::DataSet": {
      "service": "quicksight",
      "type": "quicksight_dataset"
    },
    "AWS::QuickSight::DataSource": {
      "service": "quicksight",
      "type": "quicksight_datasource"
    },
    "AWS::QuickSight::Template": {
      "service": "quicksight",
      "type": "quicksight_template"
    },
    "AWS::QuickSight::Theme": {
      "service": "quicksight",
      "type": "quicksight_theme"
    },
    "AWS::RDS::DBProxy": {
      "service": "rds",
      "type": "rds_dbproxy"
    },
    "AWS::RDS::DBProxyEndpoint": {
      "service": "rds",
      "type": "rds_dbproxyendpoint"
    },
    "AWS::RDS::DBProxyTargetGroup": {
      "service": "rds",
      "type": "rds_dbproxytargetgroup"
    },
    "AWS::RDS::GlobalCluster": {
      "service": "rds",
      "type": "rds_globalcluster"
    },
    "AWS::Redshift::Cluster": {
      "service": "redshift",
      "type": "redshift_cluster",
      "c7n_type": "aws.redshift"
    },
    "AWS::Redshift::EndpointAccess": {
      "service": "redshift",
      "type": "redshift_endpointaccess"
    },
    "AWS::Redshift::EndpointAuthorization": {
      "service": "redshift",
      "type": "redshift_endpointauthorization"
    },
    "AWS::Redshift::EventSubscription": {
      "service": "redshift",
      "type": "redshift_eventsubscription"
    },
    "AWS::Redshift::ScheduledAction": {
      "service": "redshift",
      "type": "redshift_scheduledaction"
    },
    "AWS::Rekognition::Project": {
      "service": "rekognition",
      "type": "rekognition_project"
    },
    "AWS::ResilienceHub::App": {
      "service": "resiliencehub",
      "type": "resiliencehub_app"
    },
    "AWS::ResilienceHub::ResiliencyPolicy": {
      "service": "resiliencehub",
      "type": "resiliencehub_resiliencypolicy"
    },
    "AWS::ResourceGroups::Group": {
      "service": "resource-groups",
      "type": "resourcegroups_group"
    },
    "AWS::RoboMaker::Fleet": {
      "service": "robomaker",
      "type": "robomaker_fleet"
    },
    "AWS::RoboMaker::Robot": {
      "service": "robomaker",
      "type": "robomaker_robot"
    },
    "AWS::RoboMaker::SimulationApplication": {
      "service": "robomaker",
      "type": "robomaker_simulationapplication"
    },
    "AWS::Route53::HealthCheck": {
      "service": "route53",
      "type": "route53_healthcheck",
      "c7n_type": "aws.healthcheck"
    },
    "AWS::Route53::HostedZone": {
      "service": "route53",
      "type": "route53_hostedzone",
      "c7n_type": "aws.hostedzone"
    },
    "AWS::Route53::KeySigningKey": {
      "service": "route53",
      "type": "route53_keysigningkey"
    },
    "AWS::Route53RecoveryControl::ControlPanel": {
      "service": "route53-recovery-control-config",
      "type": "route53recoverycontrol_controlpanel"
    },
    "AWS::Route53RecoveryControl::RoutingControl": {
      "service": "route53-recovery-control-config",
      "type": "route53recoverycontrol_routingcontrol"
    },
    "AWS::Route53RecoveryControl::SafetyRule": {
      "service": "route53-recovery-control-config",
      "type": "route53recoverycontrol_safetyrule"
    },
    "AWS::Route53RecoveryReadiness::Cell": {
      "service": "route53-recovery-readiness",
      "type": "route53recoveryreadiness_cell"
    },
    "AWS::Route53RecoveryReadiness::ReadinessCheck": {
      "service": "route53-recovery-readiness",
      "type": "route53recoveryreadiness_readinesscheck"
    },
    "AWS::Route53RecoveryReadiness::RecoveryGroup": {
      "service": "route53-recovery-readiness",
      "type": "route53recoveryreadiness_recoverygroup"
    },
    "AWS::Route53RecoveryReadiness::ResourceSet": {
      "service": "route53-recovery-readiness",
      "type": "route53recoveryreadiness_resourceset"
    },
    "AWS::Route53Resolver::FirewallDomainList": {
      "service": "route53resolver",
      "type": "route53resolver_firewalldomainlist"
    },
    "AWS::Route53Resolver::FirewallRuleGroup": {
      "service": "route53resolver",
      "type": "route53resolver_firewallrulegroup"
    },
    "AWS::Route53Resolver::FirewallRuleGroupAssociation": {
      "service": "route53resolver",
      "type": "route53resolver_firewallrulegroupassociation"
    },
    "AWS::Route53Resolver::ResolverRule": {
      "service": "route53resolver",
      "type": "route53resolver_resolverrule"
    },
    "AWS::RUM::AppMonitor": {
      "service": "rum",
      "type": "rum_appmonitor"
    },
    "AWS::S3::AccessPoint": {
      "service": "s3",
      "type": "s3_accesspoint",
      "c7n_type": "aws.s3-access-point"
    },
    "AWS::S3::Bucket": {
      "service": "s3",
      "type": "s3_bucket",
      "c7n_type": "aws.s3"
    },
    "AWS::S3::MultiRegionAccessPoint": {
      "service": "s3",
      "type": "s3_multiregionaccesspoint",
      "c7n_type": "aws.s3-access-point-multi"
    },
    "AWS::S3::MultiRegionAccessPointPolicy": {
      "service": "s3",
      "type": "s3_multiregionaccesspointpolicy"
    },
    "AWS::S3::StorageLens": {
      "service": "s3",
      "type": "s3_storagelens"
    },
    "AWS::S3ObjectLambda::AccessPoint": {
      "service": "s3control",
      "type": "s3objectlambda_accesspoint"
    },
    "AWS::S3ObjectLambda::AccessPointPolicy": {
      "service": "s3control",
      "type": "s3objectlambda_accesspointpolicy"
    },
    "AWS::S3Outposts::AccessPoint": {
      "service": "s3outposts",
      "type": "s3outposts_accesspoint"
    },
    "AWS::S3Outposts::Bucket": {
      "service": "s3outposts",
      "type": "s3outposts_bucket"
    },
    "AWS::S3Outposts::BucketPolicy": {
      "service": "s3outposts",
      "type": "s3outposts_bucketpolicy"
    },
    "AWS::SageMaker::AppImageConfig": {
      "service": "sagemaker",
      "type": "sagemaker_appimageconfig"
    },
    "AWS::SageMaker::Device": {
      "service": "sagemaker",
      "type": "sagemaker_device"
    },
    "AWS::SageMaker::DeviceFleet": {
      "service": "sagemaker",
      "type": "sagemaker_devicefleet"
    },
    "AWS::SageMaker::Domain": {
      "service": "sagemaker",
      "type": "sagemaker_domain"
    },
    "AWS::SageMaker::Image": {
      "service": "sagemaker",
      "type": "sagemaker_image"
    },
    "AWS::SageMaker::ModelPackageGroup": {
      "service": "sagemaker",
      "type": "sagemaker_modelpackagegroup"
    },
    "AWS::SageMaker::MonitoringSchedule": {
      "service": "sagemaker",
      "type": "sagemaker_monitoringschedule"
    },
    "AWS::SageMaker::Pipeline": {
      "service": "sagemaker",
      "type": "sagemaker_pipeline"
    },
    "AWS::SageMaker::Project": {
      "service": "sagemaker",
      "type": "sagemaker_project"
    },
    "AWS::SageMaker::UserProfile": {
      "service": "sagemaker",
      "type": "sagemaker_userprofile"
    },
    "AWS::ServiceCatalog::CloudFormationProvisionedProduct": {
      "service": "servicecatalog",
      "type": "servicecatalog_cloudformationprovisionedproduct"
    },
    "AWS::ServiceCatalog::ServiceAction": {
      "service": "servicecatalog",
      "type": "servicecatalog_serviceaction"
    },
    "AWS::ServiceCatalogAppRegistry::Application": {
      "service": "servicecatalog-appregistry",
      "type": "servicecatalogappregistry_application"
    },
    "AWS::ServiceCatalogAppRegistry::AttributeGroup": {
      "service": "servicecatalog-appregistry",
      "type": "servicecatalogappregistry_attributegroup"
    },
    "AWS::SES::ContactList": {
      "service": "ses",
      "type": "ses_contactlist"
    },
    "AWS::Signer::SigningProfile": {
      "service": "signer",
      "type": "signer_signingprofile"
    },
    "AWS::SSM::Association": {
      "service": "ssm",
      "type": "ssm_association"
    },
    "AWS::SSM::Document": {
      "service": "ssm",
      "type": "ssm_document"
    },
    "AWS::SSM::ResourceDataSync": {
      "service": "ssm",
      "type": "ssm_resourcedatasync"
    },
    "AWS::SSMContacts::Contact": {
      "service": "ssm-contacts",
      "type": "ssmcontacts_contact"
    },
    "AWS::SSMContacts::ContactChannel": {
      "service": "ssm-contacts",
      "type": "ssmcontacts_contactchannel"
    },
    "AWS::SSMIncidents::ReplicationSet": {
      "service": "ssm-incidents",
      "type": "ssmincidents_replicationset"
    },
    "AWS::SSMIncidents::ResponsePlan": {
      "service": "ssm-incidents",
      "type": "ssmincidents_responseplan"
    },
    "AWS::SSO::InstanceAccessControlAttributeConfiguration": {
      "service": "sso",
      "type": "sso_instanceaccesscontrolattributeconfiguration"
    },
    "AWS::SSO::PermissionSet": {
      "service": "sso",
      "type": "sso_permissionset"
    },
    "AWS::StepFunctions::Activity": {
      "service": "stepfunctions",
      "type": "stepfunctions_activity"
    },
    "AWS::StepFunctions::StateMachine": {
      "service": "stepfunctions",
      "type": "stepfunctions_statemachine",
      "c7n_type": "aws.step-machine"
    },
    "AWS::Synthetics::Canary": {
      "service": "synthetics",
      "type": "synthetics_canary"
    },
    "AWS::Timestream::Database": {
      "service": null,
      "type": "timestream_database"
    },
    "AWS::Timestream::ScheduledQuery": {
      "service": null,
      "type": "timestream_scheduledquery"
    },
    "AWS::Timestream::Table": {
      "service": null,
      "type": "timestream_table"
    },
    "AWS::Transfer::Workflow": {
      "service": "transfer",
      "type": "transfer_workflow"
    },
    "AWS::WAFv2::IPSet": {
      "service": "wafv2",
      "type": "wafv2_ipset"
    },
    "AWS::WAFv2::LoggingConfiguration": {
      "service": "wafv2",
      "type": "wafv2_loggingconfiguration"
    },
    "AWS::WAFv2::RegexPatternSet": {
      "service": "wafv2",
      "type": "wafv2_regexpatternset"
    },
    "AWS::WAFv2::RuleGroup": {
      "service": "wafv2",
      "type": "wafv2_rulegroup"
    },
    "AWS::WAFv2::WebACL": {
      "service": "wafv2",
      "type": "wafv2_webacl"
    },
    "AWS::WAFv2::WebACLAssociation": {
      "service": "wafv2",
      "type": "wafv2_webaclassociation"
    },
    "AWS::XRay::Group": {
      "service": "xray",
      "type": "xray_group"
    },
    "AWS::XRay::SamplingRule": {
      "service": "xray",
      "type": "xray_samplingrule"
    }
  }
}