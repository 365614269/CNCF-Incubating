# Dockerfiles are generated from tools/dev/dockerpkg.py
FROM ubuntu:24.04 AS build-env

SHELL ["/bin/bash", "-c"]

# pre-requisite distro deps, and build env setup
RUN apt-get --yes update
RUN apt-get --yes install --no-install-recommends build-essential     curl python3-venv python3-dev adduser
RUN adduser --disabled-login --gecos "" custodian
# wheel installation cache
RUN --mount=type=cache,target=/root/.cache/uv
COPY --from=ghcr.io/astral-sh/uv:0.7.6 /uv /uvx /bin/
ARG PATH="/root/.local/bin:$PATH"

WORKDIR /src
# Add core & aws packages
ARG providers="gcp azure kube openstack tencentcloud oci awscc"

# copy pyproject.tomls for all packages
ADD pyproject.toml uv.lock README.md /src/
RUN uv sync --frozen --inexact --no-install-workspace

# We include `pyproject.toml` and `uv.lock` first to allow
# cache of dependency installs.

ADD tools/c7n_gcp/pyproject.toml /src/tools/c7n_gcp/
RUN if [[ " ${providers[*]} " =~ "gcp" ]]; then    uv sync --package c7n_gcp --frozen --inexact --no-install-workspace; fi

ADD tools/c7n_azure/pyproject.toml /src/tools/c7n_azure/
RUN if [[ " ${providers[*]} " =~ "azure" ]]; then    uv sync --package c7n_azure --frozen --inexact --no-install-workspace; fi

ADD tools/c7n_kube/pyproject.toml /src/tools/c7n_kube/
RUN if [[ " ${providers[*]} " =~ "kube" ]]; then    uv sync --package c7n_kube --frozen --inexact --no-install-workspace; fi

ADD tools/c7n_openstack/pyproject.toml /src/tools/c7n_openstack/
RUN if [[ " ${providers[*]} " =~ "openstack" ]]; then    uv sync --package c7n_openstack --frozen --inexact --no-install-workspace; fi

ADD tools/c7n_tencentcloud/pyproject.toml /src/tools/c7n_tencentcloud/
RUN if [[ " ${providers[*]} " =~ "tencentcloud" ]]; then    uv sync --package c7n_tencentcloud --frozen --inexact --no-install-workspace; fi

ADD tools/c7n_oci/pyproject.toml /src/tools/c7n_oci/
RUN if [[ " ${providers[*]} " =~ "oci" ]]; then    uv sync --package c7n_oci --frozen --inexact --no-install-workspace; fi

ADD tools/c7n_awscc/pyproject.toml /src/tools/c7n_awscc/
RUN if [[ " ${providers[*]} " =~ "awscc" ]]; then    uv sync --package c7n_awscc --frozen --inexact --no-install-workspace; fi


# copy packages
ADD c7n /src/c7n/
RUN uv sync --frozen --inexact

# Now install the root of each provider

ADD tools/c7n_gcp /src/tools/c7n_gcp
RUN if [[ " ${providers[*]} " =~ "gcp" ]]; then    uv sync --package c7n_gcp --frozen --inexact; fi

ADD tools/c7n_azure /src/tools/c7n_azure
RUN if [[ " ${providers[*]} " =~ "azure" ]]; then    uv sync --package c7n_azure --frozen --inexact; fi

ADD tools/c7n_kube /src/tools/c7n_kube
RUN if [[ " ${providers[*]} " =~ "kube" ]]; then    uv sync --package c7n_kube --frozen --inexact; fi

ADD tools/c7n_openstack /src/tools/c7n_openstack
RUN if [[ " ${providers[*]} " =~ "openstack" ]]; then    uv sync --package c7n_openstack --frozen --inexact; fi

ADD tools/c7n_tencentcloud /src/tools/c7n_tencentcloud
RUN if [[ " ${providers[*]} " =~ "tencentcloud" ]]; then    uv sync --package c7n_tencentcloud --frozen --inexact; fi

ADD tools/c7n_oci /src/tools/c7n_oci
RUN if [[ " ${providers[*]} " =~ "oci" ]]; then    uv sync --package c7n_oci --frozen --inexact; fi

ADD tools/c7n_awscc /src/tools/c7n_awscc
RUN if [[ " ${providers[*]} " =~ "awscc" ]]; then    uv sync --package c7n_awscc --frozen --inexact; fi


RUN mkdir /output

# Install c7n-org
ADD tools/c7n_org /src/tools/c7n_org
RUN uv sync --locked --inexact --package c7n_org

FROM ubuntu:24.04

LABEL name="org" \
      repository="http://github.com/cloud-custodian/cloud-custodian"

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get --yes update \
        && apt-get --yes install python3 python3-venv adduser  --no-install-recommends \
        && rm -Rf /var/cache/apt \
        && rm -Rf /var/lib/apt/lists/* \
        && rm -Rf /var/log/*

# These should remain below any other commands because they will invalidate
# the layer cache
COPY --from=build-env /src /src
COPY --from=build-env /usr/local /usr/local
COPY --from=build-env /output /output


RUN adduser --disabled-login --gecos "" custodian
USER custodian
WORKDIR /home/custodian
ENV LC_ALL="C.UTF-8" LANG="C.UTF-8"
VOLUME ["/home/custodian"]
ENTRYPOINT ["/usr/local/bin/c7n-org"]
CMD ["--help"]

LABEL "org.opencontainers.image.title"="org"
LABEL "org.opencontainers.image.description"="Cloud Custodian Management Rules Engine"
LABEL "org.opencontainers.image.documentation"="https://cloudcustodian.io/docs"
