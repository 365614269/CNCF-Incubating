// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"context"
	"net/http"
	"sync"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/record"
	"sigs.k8s.io/controller-runtime/pkg/cache"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/config/v1alpha1"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
)

// MockManager is a mock implementation of manager.IManager.
//
//	func TestSomethingThatUsesIManager(t *testing.T) {
//
//		// make and configure a mocked manager.IManager
//		mockedIManager := &MockManager{
//			AddFunc: func(runnable manager.Runnable) error {
//				panic("mock out the Add method")
//			},
//			AddHealthzCheckFunc: func(name string, check healthz.Checker) error {
//				panic("mock out the AddHealthzCheck method")
//			},
//			AddMetricsExtraHandlerFunc: func(path string, handler http.Handler) error {
//				panic("mock out the AddMetricsExtraHandler method")
//			},
//			AddReadyzCheckFunc: func(name string, check healthz.Checker) error {
//				panic("mock out the AddReadyzCheck method")
//			},
//			ElectedFunc: func() <-chan struct{} {
//				panic("mock out the Elected method")
//			},
//			GetAPIReaderFunc: func() client.Reader {
//				panic("mock out the GetAPIReader method")
//			},
//			GetCacheFunc: func() cache.Cache {
//				panic("mock out the GetCache method")
//			},
//			GetClientFunc: func() client.Client {
//				panic("mock out the GetClient method")
//			},
//			GetConfigFunc: func() *rest.Config {
//				panic("mock out the GetConfig method")
//			},
//			GetControllerOptionsFunc: func() v1alpha1.ControllerConfigurationSpec {
//				panic("mock out the GetControllerOptions method")
//			},
//			GetEventRecorderForFunc: func(name string) record.EventRecorder {
//				panic("mock out the GetEventRecorderFor method")
//			},
//			GetFieldIndexerFunc: func() client.FieldIndexer {
//				panic("mock out the GetFieldIndexer method")
//			},
//			GetLoggerFunc: func() logr.Logger {
//				panic("mock out the GetLogger method")
//			},
//			GetRESTMapperFunc: func() meta.RESTMapper {
//				panic("mock out the GetRESTMapper method")
//			},
//			GetSchemeFunc: func() *runtime.Scheme {
//				panic("mock out the GetScheme method")
//			},
//			GetWebhookServerFunc: func() *webhook.Server {
//				panic("mock out the GetWebhookServer method")
//			},
//			SetFieldsFunc: func(ifaceVal interface{}) error {
//				panic("mock out the SetFields method")
//			},
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedIManager in code that requires manager.IManager
//		// and then make assertions.
//
//	}
type MockManager struct {
	// AddFunc mocks the Add method.
	AddFunc func(runnable manager.Runnable) error

	// AddHealthzCheckFunc mocks the AddHealthzCheck method.
	AddHealthzCheckFunc func(name string, check healthz.Checker) error

	// AddMetricsExtraHandlerFunc mocks the AddMetricsExtraHandler method.
	AddMetricsExtraHandlerFunc func(path string, handler http.Handler) error

	// AddReadyzCheckFunc mocks the AddReadyzCheck method.
	AddReadyzCheckFunc func(name string, check healthz.Checker) error

	// ElectedFunc mocks the Elected method.
	ElectedFunc func() <-chan struct{}

	// GetAPIReaderFunc mocks the GetAPIReader method.
	GetAPIReaderFunc func() client.Reader

	// GetCacheFunc mocks the GetCache method.
	GetCacheFunc func() cache.Cache

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func() client.Client

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *rest.Config

	// GetControllerOptionsFunc mocks the GetControllerOptions method.
	GetControllerOptionsFunc func() v1alpha1.ControllerConfigurationSpec

	// GetEventRecorderForFunc mocks the GetEventRecorderFor method.
	GetEventRecorderForFunc func(name string) record.EventRecorder

	// GetFieldIndexerFunc mocks the GetFieldIndexer method.
	GetFieldIndexerFunc func() client.FieldIndexer

	// GetLoggerFunc mocks the GetLogger method.
	GetLoggerFunc func() logr.Logger

	// GetRESTMapperFunc mocks the GetRESTMapper method.
	GetRESTMapperFunc func() meta.RESTMapper

	// GetSchemeFunc mocks the GetScheme method.
	GetSchemeFunc func() *runtime.Scheme

	// GetWebhookServerFunc mocks the GetWebhookServer method.
	GetWebhookServerFunc func() *webhook.Server

	// SetFieldsFunc mocks the SetFields method.
	SetFieldsFunc func(ifaceVal interface{}) error

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Runnable is the runnable argument value.
			Runnable manager.Runnable
		}
		// AddHealthzCheck holds details about calls to the AddHealthzCheck method.
		AddHealthzCheck []struct {
			// Name is the name argument value.
			Name string
			// Check is the check argument value.
			Check healthz.Checker
		}
		// AddMetricsExtraHandler holds details about calls to the AddMetricsExtraHandler method.
		AddMetricsExtraHandler []struct {
			// Path is the path argument value.
			Path string
			// Handler is the handler argument value.
			Handler http.Handler
		}
		// AddReadyzCheck holds details about calls to the AddReadyzCheck method.
		AddReadyzCheck []struct {
			// Name is the name argument value.
			Name string
			// Check is the check argument value.
			Check healthz.Checker
		}
		// Elected holds details about calls to the Elected method.
		Elected []struct {
		}
		// GetAPIReader holds details about calls to the GetAPIReader method.
		GetAPIReader []struct {
		}
		// GetCache holds details about calls to the GetCache method.
		GetCache []struct {
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetControllerOptions holds details about calls to the GetControllerOptions method.
		GetControllerOptions []struct {
		}
		// GetEventRecorderFor holds details about calls to the GetEventRecorderFor method.
		GetEventRecorderFor []struct {
			// Name is the name argument value.
			Name string
		}
		// GetFieldIndexer holds details about calls to the GetFieldIndexer method.
		GetFieldIndexer []struct {
		}
		// GetLogger holds details about calls to the GetLogger method.
		GetLogger []struct {
		}
		// GetRESTMapper holds details about calls to the GetRESTMapper method.
		GetRESTMapper []struct {
		}
		// GetScheme holds details about calls to the GetScheme method.
		GetScheme []struct {
		}
		// GetWebhookServer holds details about calls to the GetWebhookServer method.
		GetWebhookServer []struct {
		}
		// SetFields holds details about calls to the SetFields method.
		SetFields []struct {
			// IfaceVal is the ifaceVal argument value.
			IfaceVal interface{}
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockAdd                    sync.RWMutex
	lockAddHealthzCheck        sync.RWMutex
	lockAddMetricsExtraHandler sync.RWMutex
	lockAddReadyzCheck         sync.RWMutex
	lockElected                sync.RWMutex
	lockGetAPIReader           sync.RWMutex
	lockGetCache               sync.RWMutex
	lockGetClient              sync.RWMutex
	lockGetConfig              sync.RWMutex
	lockGetControllerOptions   sync.RWMutex
	lockGetEventRecorderFor    sync.RWMutex
	lockGetFieldIndexer        sync.RWMutex
	lockGetLogger              sync.RWMutex
	lockGetRESTMapper          sync.RWMutex
	lockGetScheme              sync.RWMutex
	lockGetWebhookServer       sync.RWMutex
	lockSetFields              sync.RWMutex
	lockStart                  sync.RWMutex
}

// Add calls AddFunc.
func (mock *MockManager) Add(runnable manager.Runnable) error {
	if mock.AddFunc == nil {
		panic("MockManager.AddFunc: method is nil but IManager.Add was just called")
	}
	callInfo := struct {
		Runnable manager.Runnable
	}{
		Runnable: runnable,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(runnable)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedIManager.AddCalls())
func (mock *MockManager) AddCalls() []struct {
	Runnable manager.Runnable
} {
	var calls []struct {
		Runnable manager.Runnable
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// AddHealthzCheck calls AddHealthzCheckFunc.
func (mock *MockManager) AddHealthzCheck(name string, check healthz.Checker) error {
	if mock.AddHealthzCheckFunc == nil {
		panic("MockManager.AddHealthzCheckFunc: method is nil but IManager.AddHealthzCheck was just called")
	}
	callInfo := struct {
		Name  string
		Check healthz.Checker
	}{
		Name:  name,
		Check: check,
	}
	mock.lockAddHealthzCheck.Lock()
	mock.calls.AddHealthzCheck = append(mock.calls.AddHealthzCheck, callInfo)
	mock.lockAddHealthzCheck.Unlock()
	return mock.AddHealthzCheckFunc(name, check)
}

// AddHealthzCheckCalls gets all the calls that were made to AddHealthzCheck.
// Check the length with:
//
//	len(mockedIManager.AddHealthzCheckCalls())
func (mock *MockManager) AddHealthzCheckCalls() []struct {
	Name  string
	Check healthz.Checker
} {
	var calls []struct {
		Name  string
		Check healthz.Checker
	}
	mock.lockAddHealthzCheck.RLock()
	calls = mock.calls.AddHealthzCheck
	mock.lockAddHealthzCheck.RUnlock()
	return calls
}

// AddMetricsExtraHandler calls AddMetricsExtraHandlerFunc.
func (mock *MockManager) AddMetricsExtraHandler(path string, handler http.Handler) error {
	if mock.AddMetricsExtraHandlerFunc == nil {
		panic("MockManager.AddMetricsExtraHandlerFunc: method is nil but IManager.AddMetricsExtraHandler was just called")
	}
	callInfo := struct {
		Path    string
		Handler http.Handler
	}{
		Path:    path,
		Handler: handler,
	}
	mock.lockAddMetricsExtraHandler.Lock()
	mock.calls.AddMetricsExtraHandler = append(mock.calls.AddMetricsExtraHandler, callInfo)
	mock.lockAddMetricsExtraHandler.Unlock()
	return mock.AddMetricsExtraHandlerFunc(path, handler)
}

// AddMetricsExtraHandlerCalls gets all the calls that were made to AddMetricsExtraHandler.
// Check the length with:
//
//	len(mockedIManager.AddMetricsExtraHandlerCalls())
func (mock *MockManager) AddMetricsExtraHandlerCalls() []struct {
	Path    string
	Handler http.Handler
} {
	var calls []struct {
		Path    string
		Handler http.Handler
	}
	mock.lockAddMetricsExtraHandler.RLock()
	calls = mock.calls.AddMetricsExtraHandler
	mock.lockAddMetricsExtraHandler.RUnlock()
	return calls
}

// AddReadyzCheck calls AddReadyzCheckFunc.
func (mock *MockManager) AddReadyzCheck(name string, check healthz.Checker) error {
	if mock.AddReadyzCheckFunc == nil {
		panic("MockManager.AddReadyzCheckFunc: method is nil but IManager.AddReadyzCheck was just called")
	}
	callInfo := struct {
		Name  string
		Check healthz.Checker
	}{
		Name:  name,
		Check: check,
	}
	mock.lockAddReadyzCheck.Lock()
	mock.calls.AddReadyzCheck = append(mock.calls.AddReadyzCheck, callInfo)
	mock.lockAddReadyzCheck.Unlock()
	return mock.AddReadyzCheckFunc(name, check)
}

// AddReadyzCheckCalls gets all the calls that were made to AddReadyzCheck.
// Check the length with:
//
//	len(mockedIManager.AddReadyzCheckCalls())
func (mock *MockManager) AddReadyzCheckCalls() []struct {
	Name  string
	Check healthz.Checker
} {
	var calls []struct {
		Name  string
		Check healthz.Checker
	}
	mock.lockAddReadyzCheck.RLock()
	calls = mock.calls.AddReadyzCheck
	mock.lockAddReadyzCheck.RUnlock()
	return calls
}

// Elected calls ElectedFunc.
func (mock *MockManager) Elected() <-chan struct{} {
	if mock.ElectedFunc == nil {
		panic("MockManager.ElectedFunc: method is nil but IManager.Elected was just called")
	}
	callInfo := struct {
	}{}
	mock.lockElected.Lock()
	mock.calls.Elected = append(mock.calls.Elected, callInfo)
	mock.lockElected.Unlock()
	return mock.ElectedFunc()
}

// ElectedCalls gets all the calls that were made to Elected.
// Check the length with:
//
//	len(mockedIManager.ElectedCalls())
func (mock *MockManager) ElectedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockElected.RLock()
	calls = mock.calls.Elected
	mock.lockElected.RUnlock()
	return calls
}

// GetAPIReader calls GetAPIReaderFunc.
func (mock *MockManager) GetAPIReader() client.Reader {
	if mock.GetAPIReaderFunc == nil {
		panic("MockManager.GetAPIReaderFunc: method is nil but IManager.GetAPIReader was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAPIReader.Lock()
	mock.calls.GetAPIReader = append(mock.calls.GetAPIReader, callInfo)
	mock.lockGetAPIReader.Unlock()
	return mock.GetAPIReaderFunc()
}

// GetAPIReaderCalls gets all the calls that were made to GetAPIReader.
// Check the length with:
//
//	len(mockedIManager.GetAPIReaderCalls())
func (mock *MockManager) GetAPIReaderCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAPIReader.RLock()
	calls = mock.calls.GetAPIReader
	mock.lockGetAPIReader.RUnlock()
	return calls
}

// GetCache calls GetCacheFunc.
func (mock *MockManager) GetCache() cache.Cache {
	if mock.GetCacheFunc == nil {
		panic("MockManager.GetCacheFunc: method is nil but IManager.GetCache was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetCache.Lock()
	mock.calls.GetCache = append(mock.calls.GetCache, callInfo)
	mock.lockGetCache.Unlock()
	return mock.GetCacheFunc()
}

// GetCacheCalls gets all the calls that were made to GetCache.
// Check the length with:
//
//	len(mockedIManager.GetCacheCalls())
func (mock *MockManager) GetCacheCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCache.RLock()
	calls = mock.calls.GetCache
	mock.lockGetCache.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *MockManager) GetClient() client.Client {
	if mock.GetClientFunc == nil {
		panic("MockManager.GetClientFunc: method is nil but IManager.GetClient was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	mock.lockGetClient.Unlock()
	return mock.GetClientFunc()
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//
//	len(mockedIManager.GetClientCalls())
func (mock *MockManager) GetClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetClient.RLock()
	calls = mock.calls.GetClient
	mock.lockGetClient.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *MockManager) GetConfig() *rest.Config {
	if mock.GetConfigFunc == nil {
		panic("MockManager.GetConfigFunc: method is nil but IManager.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedIManager.GetConfigCalls())
func (mock *MockManager) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetControllerOptions calls GetControllerOptionsFunc.
func (mock *MockManager) GetControllerOptions() v1alpha1.ControllerConfigurationSpec {
	if mock.GetControllerOptionsFunc == nil {
		panic("MockManager.GetControllerOptionsFunc: method is nil but IManager.GetControllerOptions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetControllerOptions.Lock()
	mock.calls.GetControllerOptions = append(mock.calls.GetControllerOptions, callInfo)
	mock.lockGetControllerOptions.Unlock()
	return mock.GetControllerOptionsFunc()
}

// GetControllerOptionsCalls gets all the calls that were made to GetControllerOptions.
// Check the length with:
//
//	len(mockedIManager.GetControllerOptionsCalls())
func (mock *MockManager) GetControllerOptionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetControllerOptions.RLock()
	calls = mock.calls.GetControllerOptions
	mock.lockGetControllerOptions.RUnlock()
	return calls
}

// GetEventRecorderFor calls GetEventRecorderForFunc.
func (mock *MockManager) GetEventRecorderFor(name string) record.EventRecorder {
	if mock.GetEventRecorderForFunc == nil {
		panic("MockManager.GetEventRecorderForFunc: method is nil but IManager.GetEventRecorderFor was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetEventRecorderFor.Lock()
	mock.calls.GetEventRecorderFor = append(mock.calls.GetEventRecorderFor, callInfo)
	mock.lockGetEventRecorderFor.Unlock()
	return mock.GetEventRecorderForFunc(name)
}

// GetEventRecorderForCalls gets all the calls that were made to GetEventRecorderFor.
// Check the length with:
//
//	len(mockedIManager.GetEventRecorderForCalls())
func (mock *MockManager) GetEventRecorderForCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetEventRecorderFor.RLock()
	calls = mock.calls.GetEventRecorderFor
	mock.lockGetEventRecorderFor.RUnlock()
	return calls
}

// GetFieldIndexer calls GetFieldIndexerFunc.
func (mock *MockManager) GetFieldIndexer() client.FieldIndexer {
	if mock.GetFieldIndexerFunc == nil {
		panic("MockManager.GetFieldIndexerFunc: method is nil but IManager.GetFieldIndexer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetFieldIndexer.Lock()
	mock.calls.GetFieldIndexer = append(mock.calls.GetFieldIndexer, callInfo)
	mock.lockGetFieldIndexer.Unlock()
	return mock.GetFieldIndexerFunc()
}

// GetFieldIndexerCalls gets all the calls that were made to GetFieldIndexer.
// Check the length with:
//
//	len(mockedIManager.GetFieldIndexerCalls())
func (mock *MockManager) GetFieldIndexerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetFieldIndexer.RLock()
	calls = mock.calls.GetFieldIndexer
	mock.lockGetFieldIndexer.RUnlock()
	return calls
}

// GetLogger calls GetLoggerFunc.
func (mock *MockManager) GetLogger() logr.Logger {
	if mock.GetLoggerFunc == nil {
		panic("MockManager.GetLoggerFunc: method is nil but IManager.GetLogger was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetLogger.Lock()
	mock.calls.GetLogger = append(mock.calls.GetLogger, callInfo)
	mock.lockGetLogger.Unlock()
	return mock.GetLoggerFunc()
}

// GetLoggerCalls gets all the calls that were made to GetLogger.
// Check the length with:
//
//	len(mockedIManager.GetLoggerCalls())
func (mock *MockManager) GetLoggerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetLogger.RLock()
	calls = mock.calls.GetLogger
	mock.lockGetLogger.RUnlock()
	return calls
}

// GetRESTMapper calls GetRESTMapperFunc.
func (mock *MockManager) GetRESTMapper() meta.RESTMapper {
	if mock.GetRESTMapperFunc == nil {
		panic("MockManager.GetRESTMapperFunc: method is nil but IManager.GetRESTMapper was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRESTMapper.Lock()
	mock.calls.GetRESTMapper = append(mock.calls.GetRESTMapper, callInfo)
	mock.lockGetRESTMapper.Unlock()
	return mock.GetRESTMapperFunc()
}

// GetRESTMapperCalls gets all the calls that were made to GetRESTMapper.
// Check the length with:
//
//	len(mockedIManager.GetRESTMapperCalls())
func (mock *MockManager) GetRESTMapperCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRESTMapper.RLock()
	calls = mock.calls.GetRESTMapper
	mock.lockGetRESTMapper.RUnlock()
	return calls
}

// GetScheme calls GetSchemeFunc.
func (mock *MockManager) GetScheme() *runtime.Scheme {
	if mock.GetSchemeFunc == nil {
		panic("MockManager.GetSchemeFunc: method is nil but IManager.GetScheme was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetScheme.Lock()
	mock.calls.GetScheme = append(mock.calls.GetScheme, callInfo)
	mock.lockGetScheme.Unlock()
	return mock.GetSchemeFunc()
}

// GetSchemeCalls gets all the calls that were made to GetScheme.
// Check the length with:
//
//	len(mockedIManager.GetSchemeCalls())
func (mock *MockManager) GetSchemeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetScheme.RLock()
	calls = mock.calls.GetScheme
	mock.lockGetScheme.RUnlock()
	return calls
}

// GetWebhookServer calls GetWebhookServerFunc.
func (mock *MockManager) GetWebhookServer() *webhook.Server {
	if mock.GetWebhookServerFunc == nil {
		panic("MockManager.GetWebhookServerFunc: method is nil but IManager.GetWebhookServer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWebhookServer.Lock()
	mock.calls.GetWebhookServer = append(mock.calls.GetWebhookServer, callInfo)
	mock.lockGetWebhookServer.Unlock()
	return mock.GetWebhookServerFunc()
}

// GetWebhookServerCalls gets all the calls that were made to GetWebhookServer.
// Check the length with:
//
//	len(mockedIManager.GetWebhookServerCalls())
func (mock *MockManager) GetWebhookServerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWebhookServer.RLock()
	calls = mock.calls.GetWebhookServer
	mock.lockGetWebhookServer.RUnlock()
	return calls
}

// SetFields calls SetFieldsFunc.
func (mock *MockManager) SetFields(ifaceVal interface{}) error {
	if mock.SetFieldsFunc == nil {
		panic("MockManager.SetFieldsFunc: method is nil but IManager.SetFields was just called")
	}
	callInfo := struct {
		IfaceVal interface{}
	}{
		IfaceVal: ifaceVal,
	}
	mock.lockSetFields.Lock()
	mock.calls.SetFields = append(mock.calls.SetFields, callInfo)
	mock.lockSetFields.Unlock()
	return mock.SetFieldsFunc(ifaceVal)
}

// SetFieldsCalls gets all the calls that were made to SetFields.
// Check the length with:
//
//	len(mockedIManager.SetFieldsCalls())
func (mock *MockManager) SetFieldsCalls() []struct {
	IfaceVal interface{}
} {
	var calls []struct {
		IfaceVal interface{}
	}
	mock.lockSetFields.RLock()
	calls = mock.calls.SetFields
	mock.lockSetFields.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *MockManager) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("MockManager.StartFunc: method is nil but IManager.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedIManager.StartCalls())
func (mock *MockManager) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}
