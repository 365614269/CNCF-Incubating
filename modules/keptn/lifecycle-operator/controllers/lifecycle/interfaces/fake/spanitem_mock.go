// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/trace"
	"sync"
)

// SpanItemMock is a mock implementation of interfaces.SpanItem.
//
//	func TestSomethingThatUsesSpanItem(t *testing.T) {
//
//		// make and configure a mocked interfaces.SpanItem
//		mockedSpanItem := &SpanItemMock{
//			GetSpanKeyFunc: func(phase string) string {
//				panic("mock out the GetSpanKey method")
//			},
//			GetSpanNameFunc: func(phase string) string {
//				panic("mock out the GetSpanName method")
//			},
//			SetPhaseTraceIDFunc: func(phase string, carrier propagation.MapCarrier)  {
//				panic("mock out the SetPhaseTraceID method")
//			},
//			SetSpanAttributesFunc: func(span trace.Span)  {
//				panic("mock out the SetSpanAttributes method")
//			},
//		}
//
//		// use mockedSpanItem in code that requires interfaces.SpanItem
//		// and then make assertions.
//
//	}
type SpanItemMock struct {
	// GetSpanKeyFunc mocks the GetSpanKey method.
	GetSpanKeyFunc func(phase string) string

	// GetSpanNameFunc mocks the GetSpanName method.
	GetSpanNameFunc func(phase string) string

	// SetPhaseTraceIDFunc mocks the SetPhaseTraceID method.
	SetPhaseTraceIDFunc func(phase string, carrier propagation.MapCarrier)

	// SetSpanAttributesFunc mocks the SetSpanAttributes method.
	SetSpanAttributesFunc func(span trace.Span)

	// calls tracks calls to the methods.
	calls struct {
		// GetSpanKey holds details about calls to the GetSpanKey method.
		GetSpanKey []struct {
			// Phase is the phase argument value.
			Phase string
		}
		// GetSpanName holds details about calls to the GetSpanName method.
		GetSpanName []struct {
			// Phase is the phase argument value.
			Phase string
		}
		// SetPhaseTraceID holds details about calls to the SetPhaseTraceID method.
		SetPhaseTraceID []struct {
			// Phase is the phase argument value.
			Phase string
			// Carrier is the carrier argument value.
			Carrier propagation.MapCarrier
		}
		// SetSpanAttributes holds details about calls to the SetSpanAttributes method.
		SetSpanAttributes []struct {
			// Span is the span argument value.
			Span trace.Span
		}
	}
	lockGetSpanKey        sync.RWMutex
	lockGetSpanName       sync.RWMutex
	lockSetPhaseTraceID   sync.RWMutex
	lockSetSpanAttributes sync.RWMutex
}

// GetSpanKey calls GetSpanKeyFunc.
func (mock *SpanItemMock) GetSpanKey(phase string) string {
	if mock.GetSpanKeyFunc == nil {
		panic("SpanItemMock.GetSpanKeyFunc: method is nil but SpanItem.GetSpanKey was just called")
	}
	callInfo := struct {
		Phase string
	}{
		Phase: phase,
	}
	mock.lockGetSpanKey.Lock()
	mock.calls.GetSpanKey = append(mock.calls.GetSpanKey, callInfo)
	mock.lockGetSpanKey.Unlock()
	return mock.GetSpanKeyFunc(phase)
}

// GetSpanKeyCalls gets all the calls that were made to GetSpanKey.
// Check the length with:
//
//	len(mockedSpanItem.GetSpanKeyCalls())
func (mock *SpanItemMock) GetSpanKeyCalls() []struct {
	Phase string
} {
	var calls []struct {
		Phase string
	}
	mock.lockGetSpanKey.RLock()
	calls = mock.calls.GetSpanKey
	mock.lockGetSpanKey.RUnlock()
	return calls
}

// GetSpanName calls GetSpanNameFunc.
func (mock *SpanItemMock) GetSpanName(phase string) string {
	if mock.GetSpanNameFunc == nil {
		panic("SpanItemMock.GetSpanNameFunc: method is nil but SpanItem.GetSpanName was just called")
	}
	callInfo := struct {
		Phase string
	}{
		Phase: phase,
	}
	mock.lockGetSpanName.Lock()
	mock.calls.GetSpanName = append(mock.calls.GetSpanName, callInfo)
	mock.lockGetSpanName.Unlock()
	return mock.GetSpanNameFunc(phase)
}

// GetSpanNameCalls gets all the calls that were made to GetSpanName.
// Check the length with:
//
//	len(mockedSpanItem.GetSpanNameCalls())
func (mock *SpanItemMock) GetSpanNameCalls() []struct {
	Phase string
} {
	var calls []struct {
		Phase string
	}
	mock.lockGetSpanName.RLock()
	calls = mock.calls.GetSpanName
	mock.lockGetSpanName.RUnlock()
	return calls
}

// SetPhaseTraceID calls SetPhaseTraceIDFunc.
func (mock *SpanItemMock) SetPhaseTraceID(phase string, carrier propagation.MapCarrier) {
	if mock.SetPhaseTraceIDFunc == nil {
		panic("SpanItemMock.SetPhaseTraceIDFunc: method is nil but SpanItem.SetPhaseTraceID was just called")
	}
	callInfo := struct {
		Phase   string
		Carrier propagation.MapCarrier
	}{
		Phase:   phase,
		Carrier: carrier,
	}
	mock.lockSetPhaseTraceID.Lock()
	mock.calls.SetPhaseTraceID = append(mock.calls.SetPhaseTraceID, callInfo)
	mock.lockSetPhaseTraceID.Unlock()
	mock.SetPhaseTraceIDFunc(phase, carrier)
}

// SetPhaseTraceIDCalls gets all the calls that were made to SetPhaseTraceID.
// Check the length with:
//
//	len(mockedSpanItem.SetPhaseTraceIDCalls())
func (mock *SpanItemMock) SetPhaseTraceIDCalls() []struct {
	Phase   string
	Carrier propagation.MapCarrier
} {
	var calls []struct {
		Phase   string
		Carrier propagation.MapCarrier
	}
	mock.lockSetPhaseTraceID.RLock()
	calls = mock.calls.SetPhaseTraceID
	mock.lockSetPhaseTraceID.RUnlock()
	return calls
}

// SetSpanAttributes calls SetSpanAttributesFunc.
func (mock *SpanItemMock) SetSpanAttributes(span trace.Span) {
	if mock.SetSpanAttributesFunc == nil {
		panic("SpanItemMock.SetSpanAttributesFunc: method is nil but SpanItem.SetSpanAttributes was just called")
	}
	callInfo := struct {
		Span trace.Span
	}{
		Span: span,
	}
	mock.lockSetSpanAttributes.Lock()
	mock.calls.SetSpanAttributes = append(mock.calls.SetSpanAttributes, callInfo)
	mock.lockSetSpanAttributes.Unlock()
	mock.SetSpanAttributesFunc(span)
}

// SetSpanAttributesCalls gets all the calls that were made to SetSpanAttributes.
// Check the length with:
//
//	len(mockedSpanItem.SetSpanAttributesCalls())
func (mock *SpanItemMock) SetSpanAttributesCalls() []struct {
	Span trace.Span
} {
	var calls []struct {
		Span trace.Span
	}
	mock.lockSetSpanAttributes.RLock()
	calls = mock.calls.SetSpanAttributes
	mock.lockSetSpanAttributes.RUnlock()
	return calls
}
