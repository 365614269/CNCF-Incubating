// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"context"
	apilifecycle "github.com/keptn/lifecycle-toolkit/lifecycle-operator/apis/lifecycle/v1"
	apicommon "github.com/keptn/lifecycle-toolkit/lifecycle-operator/apis/lifecycle/v1/common"
	"github.com/keptn/lifecycle-toolkit/lifecycle-operator/controllers/common/evaluation"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sync"
)

// MockEvaluationHandler is a mock implementation of evaluation.IEvaluationHandler.
//
//	func TestSomethingThatUsesIEvaluationHandler(t *testing.T) {
//
//		// make and configure a mocked evaluation.IEvaluationHandler
//		mockedIEvaluationHandler := &MockEvaluationHandler{
//			ReconcileEvaluationsFunc: func(ctx context.Context, phaseCtx context.Context, reconcileObject client.Object, evaluationCreateAttributes evaluation.CreateEvaluationAttributes) ([]apilifecycle.ItemStatus, apicommon.StatusSummary, error) {
//				panic("mock out the ReconcileEvaluations method")
//			},
//		}
//
//		// use mockedIEvaluationHandler in code that requires evaluation.IEvaluationHandler
//		// and then make assertions.
//
//	}
type MockEvaluationHandler struct {
	// ReconcileEvaluationsFunc mocks the ReconcileEvaluations method.
	ReconcileEvaluationsFunc func(ctx context.Context, phaseCtx context.Context, reconcileObject client.Object, evaluationCreateAttributes evaluation.CreateEvaluationAttributes) ([]apilifecycle.ItemStatus, apicommon.StatusSummary, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReconcileEvaluations holds details about calls to the ReconcileEvaluations method.
		ReconcileEvaluations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PhaseCtx is the phaseCtx argument value.
			PhaseCtx context.Context
			// ReconcileObject is the reconcileObject argument value.
			ReconcileObject client.Object
			// EvaluationCreateAttributes is the evaluationCreateAttributes argument value.
			EvaluationCreateAttributes evaluation.CreateEvaluationAttributes
		}
	}
	lockReconcileEvaluations sync.RWMutex
}

// ReconcileEvaluations calls ReconcileEvaluationsFunc.
func (mock *MockEvaluationHandler) ReconcileEvaluations(ctx context.Context, phaseCtx context.Context, reconcileObject client.Object, evaluationCreateAttributes evaluation.CreateEvaluationAttributes) ([]apilifecycle.ItemStatus, apicommon.StatusSummary, error) {
	if mock.ReconcileEvaluationsFunc == nil {
		panic("MockEvaluationHandler.ReconcileEvaluationsFunc: method is nil but IEvaluationHandler.ReconcileEvaluations was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		PhaseCtx                   context.Context
		ReconcileObject            client.Object
		EvaluationCreateAttributes evaluation.CreateEvaluationAttributes
	}{
		Ctx:                        ctx,
		PhaseCtx:                   phaseCtx,
		ReconcileObject:            reconcileObject,
		EvaluationCreateAttributes: evaluationCreateAttributes,
	}
	mock.lockReconcileEvaluations.Lock()
	mock.calls.ReconcileEvaluations = append(mock.calls.ReconcileEvaluations, callInfo)
	mock.lockReconcileEvaluations.Unlock()
	return mock.ReconcileEvaluationsFunc(ctx, phaseCtx, reconcileObject, evaluationCreateAttributes)
}

// ReconcileEvaluationsCalls gets all the calls that were made to ReconcileEvaluations.
// Check the length with:
//
//	len(mockedIEvaluationHandler.ReconcileEvaluationsCalls())
func (mock *MockEvaluationHandler) ReconcileEvaluationsCalls() []struct {
	Ctx                        context.Context
	PhaseCtx                   context.Context
	ReconcileObject            client.Object
	EvaluationCreateAttributes evaluation.CreateEvaluationAttributes
} {
	var calls []struct {
		Ctx                        context.Context
		PhaseCtx                   context.Context
		ReconcileObject            client.Object
		EvaluationCreateAttributes evaluation.CreateEvaluationAttributes
	}
	mock.lockReconcileEvaluations.RLock()
	calls = mock.calls.ReconcileEvaluations
	mock.lockReconcileEvaluations.RUnlock()
	return calls
}
