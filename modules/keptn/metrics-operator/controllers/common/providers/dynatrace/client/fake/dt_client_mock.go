// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"context"
	"sync"
)

// DTAPIClientMock is a mock implementation of dynatrace.DTAPIClient.
//
//	func TestSomethingThatUsesDTAPIClient(t *testing.T) {
//
//		// make and configure a mocked dynatrace.DTAPIClient
//		mockedDTAPIClient := &DTAPIClientMock{
//			DoFunc: func(ctx context.Context, path string, method string, payload []byte) ([]byte, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedDTAPIClient in code that requires dynatrace.DTAPIClient
//		// and then make assertions.
//
//	}
type DTAPIClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, path string, method string, payload []byte) ([]byte, int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Path is the path argument value.
			Path string
			// Method is the method argument value.
			Method string
			// Payload is the payload argument value.
			Payload []byte
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *DTAPIClientMock) Do(ctx context.Context, path string, method string, payload []byte) ([]byte, int, error) {
	if mock.DoFunc == nil {
		panic("DTAPIClientMock.DoFunc: method is nil but DTAPIClient.Do was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Path    string
		Method  string
		Payload []byte
	}{
		Ctx:     ctx,
		Path:    path,
		Method:  method,
		Payload: payload,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, path, method, payload)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedDTAPIClient.DoCalls())
func (mock *DTAPIClientMock) DoCalls() []struct {
	Ctx     context.Context
	Path    string
	Method  string
	Payload []byte
} {
	var calls []struct {
		Ctx     context.Context
		Path    string
		Method  string
		Payload []byte
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
