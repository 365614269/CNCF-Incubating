Creates a new and optimized server image.

Usage:

kc.sh build [OPTIONS]

Creates a new and optimized server image based on the configuration options
passed to this command. Once created, the configuration will be persisted and
read during startup without having to pass them over again.

Consider running this command before running the server in production for an
optimal runtime.

Options:

-h, --help           This help message.
--help-all           This same help message but with additional options.
-v, --verbose        Print out error details when running this command.

Cache:

--cache <type>       Defines the cache mechanism for high-availability. By default in production
                       mode, a 'ispn' cache is used to create a cluster between multiple server
                       nodes. By default in development mode, a 'local' cache disables clustering
                       and is intended for development and testing purposes. Possible values are:
                       ispn, local. Default: ispn.
--cache-config-file <file>
                     Defines the file from which cache configuration should be loaded from. The
                       configuration file is relative to the 'conf/' directory.
--cache-embedded-mtls-enabled <true|false>
                     Encrypts the network communication between Keycloak servers. Default: false.
--cache-embedded-mtls-key-store-file <file>
                     The Keystore file path. The Keystore must contain the certificate to use by
                       the TLS protocol. By default, it lookup 'cache-mtls-keystore.p12' under
                       conf/ directory.
--cache-embedded-mtls-key-store-password <password>
                     The password to access the Keystore.
--cache-embedded-mtls-trust-store-file <file>
                     The Truststore file path. It should contain the trusted certificates or the
                       Certificate Authority that signed the certificates. By default, it lookup
                       'cache-mtls-truststore.p12' under conf/ directory.
--cache-embedded-mtls-trust-store-password <password>
                     The password to access the Truststore.
--cache-stack <stack>
                     Define the default stack to use for cluster communication and node discovery.
                       This option only takes effect if 'cache' is set to 'ispn'. Default: udp.
                       Possible values are: tcp, udp, kubernetes, ec2, azure, google.

Database:

--db <vendor>        The database vendor. Possible values are: dev-file, dev-mem, mariadb, mssql,
                       mysql, oracle, postgres. Default: dev-file.
--db-driver <driver> The fully qualified class name of the JDBC driver. If not set, a default
                       driver is set accordingly to the chosen database.

Transaction:

--transaction-xa-enabled <true|false>
                     If set to false, Keycloak uses a non-XA datasource in case the database does
                       not support XA transactions. Default: true.

Feature:

--features <feature> Enables a set of one or more features. Possible values are: account-api[:v1],
                       account2[:v1], account3[:v1], admin-api[:v1], admin-fine-grained-authz[:v1],
                       admin2[:v1], authorization[:v1], ciba[:v1], client-policies[:v1],
                       client-secret-rotation[:v1], client-types[:v1], declarative-ui[:v1],
                       device-flow[:v1], docker[:v1], dpop[:v1], dynamic-scopes[:v1], fips[:v1],
                       hostname[:v1], impersonation[:v1], js-adapter[:v1], kerberos[:v1],
                       linkedin-oauth[:v1], login2[:v1], multi-site[:v1], offline-session-preloading
                       [:v1], oid4vc-vci[:v1], par[:v1], preview, recovery-codes[:v1], scripts[:
                       v1], step-up-authentication[:v1], token-exchange[:v1], transient-users[:v1],
                       update-email[:v1], web-authn[:v1].
--features-disabled <feature>
                     Disables a set of one or more features. Possible values are: account-api,
                       account2, account3, admin-api, admin-fine-grained-authz, admin2,
                       authorization, ciba, client-policies, client-secret-rotation, client-types,
                       declarative-ui, device-flow, docker, dpop, dynamic-scopes, fips,
                       impersonation, js-adapter, kerberos, linkedin-oauth, login2, multi-site,
                       offline-session-preloading, oid4vc-vci, par, preview, recovery-codes,
                       scripts, step-up-authentication, token-exchange, transient-users,
                       update-email, web-authn.

HTTP(S):

--http-relative-path <path>
                     Set the path relative to '/' for serving resources. The path must start with a
                       '/'. Default: /.
--https-client-auth <auth>
                     Configures the server to require/request client authentication. Possible
                       values are: none, request, required. Default: none.

Health:

--health-enabled <true|false>
                     If the server should expose health check endpoints. If enabled, health checks
                       are available at the '/health', '/health/ready' and '/health/live'
                       endpoints. Default: false.

Metrics:

--metrics-enabled <true|false>
                     If the server should expose metrics. If enabled, metrics are available at the
                       '/metrics' endpoint. Default: false.

Vault:

--vault <provider>   Enables a vault provider. Possible values are: file, keystore.

Security:

--fips-mode <mode>   Sets the FIPS mode. If 'non-strict' is set, FIPS is enabled but on
                       non-approved mode. For full FIPS compliance, set 'strict' to run on approved
                       mode. This option defaults to 'disabled' when 'fips' feature is disabled,
                       which is by default. This option defaults to 'non-strict' when 'fips'
                       feature is enabled. Possible values are: non-strict, strict. Default:
                       disabled.

Examples:

  Change the database vendor:

      $ kc.sh build --db=postgres

  Enable a feature:

      $ kc.sh build --features=<feature_name>

  Or alternatively, enable all tech preview features:

      $ kc.sh build --features=preview

  Enable health endpoints:

      $ kc.sh build --health-enabled=true

  Enable metrics endpoints:

      $ kc.sh build --metrics-enabled=true

  Change the relative path:

      $ kc.sh build --http-relative-path=/auth
